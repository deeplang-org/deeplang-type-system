(* OCaml module generated by the BNF converter *)


type iF = IF of ((int * int) * string)
and eLSE = ELSE of ((int * int) * string)
and wHILE = WHILE of ((int * int) * string)
and fOR = FOR of ((int * int) * string)
and lET = LET of ((int * int) * string)
and fUN = FUN of ((int * int) * string)
and mUT = MUT of ((int * int) * string)
and iNTERFACE = INTERFACE of ((int * int) * string)
and iMPL = IMPL of ((int * int) * string)
and aS = AS of ((int * int) * string)
and mATCH = MATCH of ((int * int) * string)
and tYPE = TYPE of ((int * int) * string)
and eXTENDS = EXTENDS of ((int * int) * string)
and typeId = TypeId of (((int * int) * string) * int)
and baseType = BaseType of ((int * int) * string)
and varId = VarId of (((int * int) * string) * int)
and code =
   Declares of declare
 | Defines of define
 | Statements of statement
 | Expressions of expression
 | Unit

and typeT =
   TypeFixLenArray of typeT * int
 | TypeArrow of typeT * typeT
 | TypeUnit1
 | TypeUnit2
 | TypeTuple of typeT list
 | TypePrimitive of baseType
 | TypeX of typeId

and variable =
   Variables of varId

and declare =
   DecImmut of lET * varId * typeT
 | DecMut of lET * mUT * varId * typeT
 | DecFunc of fUN * varId * args * retType
 | InterfaceNoExt of iNTERFACE * interfaceName * methods
 | InterfaceExt of iNTERFACE * interfaceName * eXTENDS * interfaceName list * methods

and args =
   ArgUnit
 | ArgUnit2
 | ArgExist of arg list

and arg =
   ArgCons of varId * typeT

and retType =
   RetUnit
 | RetExist of typeT

and interfaceName =
   InterfaceNames of typeId

and methods =
   InterfaceMethodUnit
 | InterfaceMethodExist of methodT list

and methodT =
   InterfaceMethod of fUN * varId * args * retType
 | ADTMethod of fUN * varId * args * retType * code list

and define =
   DefFunc of functionT
 | ADT of tYPE * typeId * constructor list
 | Struct of tYPE * typeId * structField list
 | DefVar of lET * typedVar * expression
 | DefType of tYPE * typeId * args
 | InterfaceImpl of iMPL * interfaceName * fOR * typeT * functions
 | RawImpl of iMPL * typeT * functions

and functionT =
   FuncUnit of fUN * varId * args * retType
 | Func of fUN * varId * args * retType * code list

and constructor =
   Constructors of typeId * field list

and field =
   FieldCons of varId * typeT

and structField =
   BasicStructField of field
 | DelegateStructField of aS * field

and typedVar =
   ImmutVar of varId * typeT
 | MutVar of mUT * varId * typeT

and functions =
   FunctionsUnit
 | FunctionsMany of functionT list

and statement =
   Block of statement list
 | DefVarSt of lET * typedVar * expression
 | DefTypeSt of tYPE * typeId * args
 | ExprSt of expression
 | Return of expression
 | If of iF * expression * statement list * elseBody
 | For of fOR * matcher * expression * statement list
 | While of wHILE * expression * statement list
 | Match of mATCH * varId * matchBody

and elseBody =
   NoElse
 | Elif of eLSE * iF * expression * statement list * elseBody
 | Else of eLSE * statement list

and matchBody =
   MatchBodys of matchCase list

and matchCase =
   MatchCases of matcher * statement list

and matcher =
   WildCardMatch
 | ConsMatchUnit of typeId
 | ConsMatch of typeId * matcher
 | TypelessVarMatch of varId
 | UnitMatch
 | TupleMatch of matcher list
 | LiteralMatch of literal
 | FieldMatchUnit of typeId
 | FieldMatch of typeId * fieldMatcher list

and fieldMatcher =
   FieldMatchers of varId * matcher

and expression =
   ExpVar of variable
 | Literals of literal
 | Tuples of expression list
 | StructInit of typeId * fieldInit list
 | ExpAssignment of variable * expression
 | ExpAssignmentPlus of variable * expression
 | ExpAssignmentMinus of variable * expression
 | ExpAssignmentMul of variable * expression
 | ExpAssignmentDiv of variable * expression
 | ExpAssignmentMod of variable * expression
 | ExpLogicalOr of expression * expression
 | ExpLogicalAnd of expression * expression
 | ExpLogicalNot of expression
 | ExpLt of expression * expression
 | ExpLeq of expression * expression
 | ExpGt of expression * expression
 | ExpGeq of expression * expression
 | ExpEq of expression * expression
 | ExpNoteq of expression * expression
 | ExpLeftShift of expression * expression
 | ExpRightShift of expression * expression
 | ExpAdd of expression * expression
 | ExpSub of expression * expression
 | ExpMul of expression * expression
 | ExpDiv of expression * expression
 | ExpMod of expression * expression
 | ExpApp of expression * expression list
 | ExpAppUnit of expression
 | ExpNewObj of typeId * expression list
 | ExpNewObjUnit of typeId
 | ExpMethod of expression * variable
 | ExpBracket of expression

and literal =
   String of string
 | Char of char
 | Integer of int
 | Float of float
 | True
 | False
 | LUnit

and fieldInit =
   FieldInitCons of varId * expression

