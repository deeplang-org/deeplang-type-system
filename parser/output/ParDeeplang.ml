type token =
  | KW_return
  | KW_true
  | KW_false
  | KW_new
  | SYMB1
  | SYMB2
  | SYMB3
  | SYMB4
  | SYMB5
  | SYMB6
  | SYMB7
  | SYMB8
  | SYMB9
  | SYMB10
  | SYMB11
  | SYMB12
  | SYMB13
  | SYMB14
  | SYMB15
  | SYMB16
  | SYMB17
  | SYMB18
  | SYMB19
  | SYMB20
  | SYMB21
  | SYMB22
  | SYMB23
  | SYMB24
  | SYMB25
  | SYMB26
  | SYMB27
  | SYMB28
  | SYMB29
  | SYMB30
  | SYMB31
  | SYMB32
  | SYMB33
  | SYMB34
  | SYMB35
  | SYMB36
  | SYMB37
  | TOK_EOF
  | TOK_Ident of (string)
  | TOK_Char of (char)
  | TOK_Double of (float)
  | TOK_Integer of (int)
  | TOK_String of (string)
  | TOK_IF of ((int * int) * string)
  | TOK_ELSE of ((int * int) * string)
  | TOK_WHILE of ((int * int) * string)
  | TOK_FOR of ((int * int) * string)
  | TOK_LET of ((int * int) * string)
  | TOK_FUN of ((int * int) * string)
  | TOK_MUT of ((int * int) * string)
  | TOK_INTERFACE of ((int * int) * string)
  | TOK_IMPL of ((int * int) * string)
  | TOK_AS of ((int * int) * string)
  | TOK_MATCH of ((int * int) * string)
  | TOK_TYPE of ((int * int) * string)
  | TOK_EXTENDS of ((int * int) * string)
  | TOK_TypeId of ((int * int) * string)
  | TOK_BaseType of ((int * int) * string)
  | TOK_VarId of ((int * int) * string)

open Parsing;;
let _ = parse_error;;
# 3 "ParDeeplang.mly"
open AbsDeeplang
open Lexing


# 74 "ParDeeplang.ml"
let yytransl_const = [|
  257 (* KW_return *);
  258 (* KW_true *);
  259 (* KW_false *);
  260 (* KW_new *);
  261 (* SYMB1 *);
  262 (* SYMB2 *);
  263 (* SYMB3 *);
  264 (* SYMB4 *);
  265 (* SYMB5 *);
  266 (* SYMB6 *);
  267 (* SYMB7 *);
  268 (* SYMB8 *);
  269 (* SYMB9 *);
  270 (* SYMB10 *);
  271 (* SYMB11 *);
  272 (* SYMB12 *);
  273 (* SYMB13 *);
  274 (* SYMB14 *);
  275 (* SYMB15 *);
  276 (* SYMB16 *);
  277 (* SYMB17 *);
  278 (* SYMB18 *);
  279 (* SYMB19 *);
  280 (* SYMB20 *);
  281 (* SYMB21 *);
  282 (* SYMB22 *);
  283 (* SYMB23 *);
  284 (* SYMB24 *);
  285 (* SYMB25 *);
  286 (* SYMB26 *);
  287 (* SYMB27 *);
  288 (* SYMB28 *);
  289 (* SYMB29 *);
  290 (* SYMB30 *);
  291 (* SYMB31 *);
  292 (* SYMB32 *);
  293 (* SYMB33 *);
  294 (* SYMB34 *);
  295 (* SYMB35 *);
  296 (* SYMB36 *);
  297 (* SYMB37 *);
  298 (* TOK_EOF *);
    0|]

let yytransl_block = [|
  299 (* TOK_Ident *);
  300 (* TOK_Char *);
  301 (* TOK_Double *);
  302 (* TOK_Integer *);
  303 (* TOK_String *);
  304 (* TOK_IF *);
  305 (* TOK_ELSE *);
  306 (* TOK_WHILE *);
  307 (* TOK_FOR *);
  308 (* TOK_LET *);
  309 (* TOK_FUN *);
  310 (* TOK_MUT *);
  311 (* TOK_INTERFACE *);
  312 (* TOK_IMPL *);
  313 (* TOK_AS *);
  314 (* TOK_MATCH *);
  315 (* TOK_TYPE *);
  316 (* TOK_EXTENDS *);
  317 (* TOK_TypeId *);
  318 (* TOK_BaseType *);
  319 (* TOK_VarId *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\004\000\004\000\
\005\000\005\000\006\000\006\000\007\000\007\000\008\000\008\000\
\009\000\009\000\010\000\010\000\011\000\011\000\012\000\012\000\
\013\000\013\000\014\000\014\000\015\000\015\000\016\000\016\000\
\017\000\017\000\018\000\018\000\019\000\019\000\020\000\020\000\
\021\000\021\000\022\000\022\000\023\000\023\000\024\000\024\000\
\025\000\025\000\026\000\026\000\027\000\027\000\028\000\028\000\
\029\000\029\000\030\000\030\000\031\000\031\000\032\000\032\000\
\033\000\033\000\034\000\034\000\035\000\035\000\036\000\036\000\
\037\000\037\000\038\000\038\000\039\000\039\000\040\000\040\000\
\041\000\041\000\042\000\042\000\043\000\043\000\044\000\044\000\
\045\000\045\000\046\000\046\000\047\000\047\000\048\000\048\000\
\049\000\049\000\050\000\050\000\051\000\051\000\052\000\052\000\
\053\000\053\000\054\000\054\000\055\000\055\000\056\000\056\000\
\056\000\057\000\057\000\057\000\057\000\057\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\059\000\059\000\060\000\
\061\000\061\000\062\000\062\000\062\000\062\000\062\000\063\000\
\063\000\063\000\064\000\065\000\065\000\066\000\066\000\067\000\
\068\000\068\000\069\000\069\000\070\000\070\000\071\000\071\000\
\071\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\073\000\073\000\074\000\075\000\075\000\076\000\077\000\077\000\
\078\000\078\000\079\000\079\000\080\000\080\000\081\000\081\000\
\082\000\082\000\082\000\083\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\084\000\084\000\085\000\085\000\
\085\000\086\000\087\000\088\000\088\000\088\000\088\000\088\000\
\088\000\088\000\088\000\088\000\089\000\089\000\089\000\090\000\
\090\000\090\000\091\000\092\000\092\000\093\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\095\000\095\000\096\000\
\096\000\097\000\097\000\098\000\098\000\098\000\098\000\098\000\
\099\000\099\000\099\000\100\000\100\000\100\000\101\000\101\000\
\101\000\102\000\102\000\102\000\102\000\103\000\104\000\104\000\
\104\000\104\000\104\000\104\000\105\000\105\000\105\000\105\000\
\105\000\106\000\106\000\107\000\107\000\107\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\109\000\109\000\110\000\
\129\000\130\000\111\000\128\000\124\000\127\000\125\000\122\000\
\115\000\117\000\116\000\118\000\121\000\123\000\126\000\120\000\
\119\000\113\000\112\000\114\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\001\000\
\000\000\001\000\001\000\001\000\002\000\000\000\005\000\003\000\
\001\000\002\000\003\000\001\000\001\000\001\000\003\000\001\000\
\001\000\003\000\005\000\006\000\004\000\003\000\005\000\002\000\
\001\000\003\000\003\000\001\000\003\000\000\000\002\000\001\000\
\001\000\003\000\001\000\003\000\005\000\007\000\000\000\001\000\
\002\000\001\000\005\000\005\000\005\000\004\000\005\000\003\000\
\005\000\007\000\004\000\001\000\003\000\003\000\001\000\003\000\
\001\000\002\000\001\000\003\000\003\000\004\000\001\000\003\000\
\000\000\001\000\002\000\003\000\005\000\004\000\002\000\003\000\
\008\000\009\000\007\000\007\000\001\000\002\000\000\000\009\000\
\004\000\001\000\005\000\001\000\002\000\004\000\001\000\001\000\
\003\000\001\000\002\000\004\000\000\000\001\000\003\000\000\000\
\001\000\003\000\003\000\001\000\002\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\003\000\001\000\
\003\000\001\000\002\000\001\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\001\000\003\000\
\003\000\001\000\003\000\003\000\003\000\001\000\001\000\004\000\
\002\000\005\000\003\000\003\000\001\000\001\000\001\000\003\000\
\004\000\003\000\003\000\000\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\011\001\012\001\000\000\013\001\000\000\000\000\
\000\000\017\001\018\001\019\001\020\001\021\001\023\001\024\001\
\025\001\026\001\028\001\029\001\031\001\032\001\034\001\036\001\
\037\001\000\000\000\000\000\000\114\000\115\000\154\000\116\000\
\000\000\214\000\000\000\000\000\224\000\226\000\228\000\000\000\
\000\000\000\000\242\000\000\000\247\000\253\000\255\000\009\001\
\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\001\008\001\010\001\004\000\038\001\
\000\000\006\000\000\000\121\000\000\000\035\001\039\001\000\000\
\124\000\125\000\008\000\040\001\000\000\000\000\010\000\041\001\
\000\000\012\000\042\001\000\000\000\000\014\000\043\001\000\000\
\000\000\000\000\016\000\137\000\000\000\044\001\000\000\018\000\
\045\001\000\000\000\000\020\000\046\001\000\000\000\000\022\000\
\000\000\047\001\000\000\024\000\048\001\000\000\144\000\026\000\
\049\001\000\000\000\000\028\000\147\000\000\000\050\001\000\000\
\030\000\051\001\000\000\000\000\032\000\052\001\000\000\000\000\
\034\000\053\001\000\000\000\000\000\000\000\000\036\000\054\001\
\000\000\038\000\055\001\000\000\000\000\040\000\056\001\000\000\
\000\000\042\000\057\001\000\000\000\000\044\000\058\001\000\000\
\000\000\046\000\030\001\059\001\169\000\000\000\000\000\048\000\
\060\001\000\000\000\000\050\000\027\001\061\001\000\000\000\000\
\000\000\052\000\175\000\000\000\062\001\000\000\054\000\063\001\
\000\000\000\000\056\000\064\001\000\000\000\000\000\000\000\000\
\058\000\065\001\000\000\000\000\060\000\022\001\066\001\000\000\
\000\000\062\000\200\000\000\000\196\000\067\001\000\000\000\000\
\000\000\194\000\202\000\000\000\199\000\064\000\068\001\000\000\
\066\000\069\001\000\000\068\000\070\001\000\000\000\000\070\000\
\071\001\000\000\000\000\000\000\072\000\072\001\000\000\074\000\
\073\001\000\000\076\000\074\001\000\000\078\000\075\001\000\000\
\080\000\076\001\254\000\000\000\082\000\077\001\000\000\084\000\
\078\001\000\000\086\000\079\001\000\000\088\000\080\001\000\000\
\000\000\090\000\081\001\000\000\092\000\082\001\000\000\094\000\
\083\001\000\000\096\000\084\001\000\000\098\000\085\001\000\000\
\100\000\086\001\000\000\102\000\000\000\087\001\000\000\104\000\
\088\001\000\000\000\000\106\000\089\001\000\000\108\000\090\001\
\000\000\000\000\000\000\110\000\091\001\000\000\000\000\000\000\
\000\000\000\000\000\000\227\000\001\000\111\000\000\000\000\000\
\000\000\000\000\000\000\000\000\117\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\249\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\122\000\
\000\000\000\000\005\000\000\000\007\000\009\000\000\000\011\000\
\013\000\000\000\000\000\000\000\136\000\000\000\015\000\017\000\
\000\000\000\000\019\000\000\000\021\000\023\000\000\000\025\000\
\000\000\027\000\029\000\000\000\153\000\031\000\033\000\000\000\
\000\000\000\000\035\000\037\000\000\000\000\000\039\000\041\000\
\000\000\000\000\043\000\045\000\170\000\000\000\047\000\049\000\
\000\000\000\000\000\000\051\000\179\000\053\000\055\000\183\000\
\000\000\000\000\190\000\057\000\059\000\000\000\000\000\000\000\
\061\000\213\000\000\000\197\000\000\000\203\000\000\000\063\000\
\065\000\000\000\067\000\069\000\000\000\000\000\071\000\073\000\
\075\000\077\000\079\000\081\000\083\000\085\000\087\000\089\000\
\091\000\093\000\095\000\097\000\099\000\000\000\101\000\000\000\
\103\000\105\000\107\000\000\000\000\000\109\000\184\000\251\000\
\000\000\002\001\000\001\180\000\216\000\217\000\218\000\219\000\
\220\000\221\000\000\000\225\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\243\000\244\000\
\245\000\000\000\252\000\000\000\000\000\000\000\000\000\000\000\
\033\001\134\000\000\000\000\000\000\000\000\000\160\000\000\000\
\000\000\000\000\000\000\000\000\000\000\123\000\000\000\127\000\
\130\000\000\000\000\000\000\000\138\000\000\000\141\000\146\000\
\148\000\000\000\000\000\000\000\000\000\000\000\165\000\000\000\
\168\000\172\000\000\000\000\000\176\000\000\000\000\000\000\000\
\000\000\201\000\000\000\000\000\000\000\207\000\210\000\211\000\
\006\001\015\001\016\001\000\000\248\000\001\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\158\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\133\000\000\000\
\000\000\000\000\158\000\163\000\000\000\000\000\182\000\193\000\
\000\000\000\000\198\000\204\000\250\000\157\000\131\000\000\000\
\161\000\000\000\135\000\155\000\156\000\159\000\000\000\000\000\
\000\000\000\000\119\000\000\000\149\000\000\000\157\000\181\000\
\000\000\195\000\132\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\162\000\000\000\000\000\187\000\188\000\150\000\
\000\000\000\000\185\000\000\000\186\000\192\000"

let yydgoto = "\056\000\
\081\000\120\000\127\000\132\000\136\000\139\000\143\000\150\000\
\153\000\157\000\162\000\165\000\169\000\175\000\178\000\182\000\
\186\000\192\000\195\000\199\000\203\000\207\000\212\000\217\000\
\222\000\229\000\232\000\236\000\242\000\247\000\254\000\007\001\
\010\001\013\001\017\001\022\001\025\001\028\001\031\001\034\001\
\038\001\041\001\044\001\047\001\051\001\054\001\057\001\060\001\
\063\001\066\001\070\001\073\001\077\001\080\001\085\001\082\000\
\083\000\133\000\134\000\084\000\141\000\085\000\151\000\158\000\
\159\000\163\000\170\000\171\000\176\000\183\000\184\000\086\000\
\087\000\200\000\201\000\213\000\209\000\218\000\219\000\223\000\
\230\000\234\000\243\000\244\000\248\000\255\000\000\001\001\001\
\015\001\018\001\019\001\002\001\238\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\075\001\103\000\081\001\082\001\104\000\129\000\
\105\000\106\000\239\000\225\000\108\000\109\000\019\002\240\000\
\111\000\112\000\215\000\113\000\114\000\115\000\249\000\116\000\
\117\000\118\000"

let yysindex = "\227\005\
\168\001\233\001\182\255\190\255\068\255\083\255\126\255\016\000\
\093\255\095\255\199\000\055\255\087\255\049\000\059\255\091\255\
\171\255\109\255\105\255\106\255\096\255\097\255\054\255\056\255\
\071\255\180\000\132\255\255\001\063\002\170\255\005\001\166\002\
\190\002\223\002\098\255\100\255\245\002\212\255\212\000\085\002\
\096\002\135\002\200\001\000\003\022\003\055\003\077\003\088\003\
\110\003\135\001\055\000\161\002\012\000\101\255\102\255\000\000\
\000\000\086\001\000\000\000\000\175\255\000\000\086\001\164\004\
\086\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\142\004\080\001\000\000\000\000\000\000\000\000\
\227\255\000\000\048\000\074\000\000\000\000\000\000\000\186\002\
\242\000\246\000\000\000\192\255\000\000\000\000\000\000\000\000\
\114\000\000\000\135\255\059\000\175\255\175\255\225\255\161\000\
\171\000\187\000\191\000\000\000\000\000\000\000\000\000\000\000\
\093\000\000\000\225\255\000\000\199\255\000\000\000\000\052\255\
\000\000\000\000\000\000\000\000\107\000\166\000\000\000\000\000\
\168\000\000\000\000\000\213\000\175\000\000\000\000\000\186\000\
\135\255\059\000\000\000\000\000\047\255\000\000\190\000\000\000\
\000\000\203\000\249\000\000\000\000\000\248\000\225\000\000\000\
\225\255\000\000\227\000\000\000\000\000\232\000\000\000\000\000\
\000\000\008\001\250\000\000\000\000\000\251\000\000\000\001\001\
\000\000\000\000\003\001\059\000\000\000\000\000\251\000\020\001\
\000\000\000\000\028\001\135\255\059\000\175\255\000\000\000\000\
\052\001\000\000\000\000\064\001\077\001\000\000\000\000\098\001\
\078\001\000\000\000\000\082\001\099\001\000\000\000\000\110\001\
\083\001\000\000\000\000\000\000\000\000\084\001\059\000\000\000\
\000\000\116\001\087\001\000\000\000\000\000\000\092\001\123\001\
\059\000\000\000\000\000\251\000\000\000\106\001\000\000\000\000\
\251\000\124\001\000\000\000\000\131\001\160\001\135\255\175\255\
\000\000\000\000\164\004\132\001\000\000\000\000\000\000\133\001\
\172\255\000\000\000\000\073\002\000\000\000\000\134\001\073\002\
\169\001\000\000\000\000\175\001\000\000\000\000\000\000\144\001\
\000\000\000\000\146\001\000\000\000\000\180\001\151\001\000\000\
\000\000\152\001\185\001\186\001\000\000\000\000\159\001\000\000\
\000\000\163\001\000\000\000\000\164\001\000\000\000\000\165\001\
\000\000\000\000\000\000\131\000\000\000\000\000\050\255\000\000\
\000\000\166\001\000\000\000\000\183\001\000\000\000\000\188\001\
\108\001\000\000\000\000\169\000\000\000\000\000\207\000\000\000\
\000\000\076\001\000\000\000\000\196\001\000\000\000\000\029\000\
\000\000\000\000\197\001\000\000\086\001\000\000\198\001\000\000\
\000\000\199\001\207\001\000\000\000\000\208\001\000\000\000\000\
\209\001\205\001\215\001\000\000\000\000\210\001\217\001\016\001\
\027\001\230\001\237\001\000\000\000\000\000\000\086\001\086\001\
\086\001\086\001\086\001\086\001\000\000\086\001\086\001\008\002\
\008\002\008\002\008\002\008\002\008\002\008\002\008\002\008\002\
\008\002\008\002\008\002\008\002\000\000\086\001\059\000\059\000\
\245\001\241\001\059\000\045\001\169\255\220\000\239\000\218\001\
\000\000\073\002\086\001\086\001\059\000\000\000\178\000\000\000\
\004\002\225\255\000\000\225\255\000\000\000\000\059\000\000\000\
\000\000\003\002\059\000\045\001\000\000\009\002\000\000\000\000\
\225\255\059\000\000\000\011\002\000\000\000\000\175\255\000\000\
\015\002\000\000\000\000\045\001\000\000\000\000\000\000\017\002\
\045\001\220\000\000\000\000\000\059\000\175\255\000\000\000\000\
\225\255\059\000\000\000\000\000\000\000\226\255\000\000\000\000\
\225\255\024\002\023\002\000\000\000\000\000\000\000\000\000\000\
\025\002\045\001\000\000\000\000\000\000\164\004\031\002\037\002\
\000\000\000\000\041\002\000\000\073\002\000\000\059\000\000\000\
\000\000\073\002\000\000\000\000\059\000\073\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\002\000\000\086\001\
\000\000\000\000\000\000\059\000\086\001\000\000\000\000\000\000\
\086\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\000\000\023\001\023\001\023\001\023\001\
\023\001\023\001\242\000\242\000\246\000\246\000\000\000\000\000\
\000\000\050\002\000\000\052\002\086\001\225\255\057\002\066\002\
\000\000\000\000\175\255\175\255\226\255\072\002\000\000\225\255\
\067\002\068\002\070\002\075\002\038\002\000\000\011\002\000\000\
\000\000\225\255\078\002\066\002\000\000\011\002\000\000\000\000\
\000\000\066\002\086\001\066\002\088\002\086\002\000\000\011\002\
\000\000\000\000\011\002\225\255\000\000\086\001\097\002\087\002\
\086\001\000\000\164\004\090\002\100\002\000\000\000\000\000\000\
\000\000\000\000\000\000\093\002\000\000\000\000\120\002\201\000\
\225\255\046\001\059\001\121\002\111\002\000\000\239\000\086\001\
\118\002\134\002\136\002\143\002\201\000\225\255\000\000\061\000\
\147\002\046\001\000\000\000\000\011\002\150\002\000\000\000\000\
\145\002\144\002\000\000\000\000\000\000\000\000\000\000\247\000\
\000\000\142\004\000\000\000\000\000\000\000\000\162\002\164\004\
\164\004\073\002\000\000\247\000\000\000\142\004\000\000\000\000\
\157\002\000\000\000\000\158\002\163\002\167\002\170\002\171\002\
\173\002\164\004\000\000\164\004\128\002\000\000\000\000\000\000\
\175\002\178\002\000\000\128\002\000\000\000\000"

let yyrindex = "\000\000\
\153\002\155\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\159\002\000\000\000\000\000\000\000\000\160\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\188\002\000\000\000\000\189\002\000\000\000\000\
\000\000\196\002\197\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\198\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\192\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\224\255\022\005\000\000\000\000\000\000\000\000\
\000\000\000\000\128\000\136\000\000\000\000\000\000\000\036\000\
\195\005\096\005\000\000\060\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\255\000\000\000\000\000\000\
\000\000\000\000\000\000\199\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\186\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\212\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\236\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\227\002\000\000\000\000\000\000\000\000\
\092\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\094\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\193\002\000\000\000\000\000\000\096\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\237\255\000\000\000\000\
\000\000\000\000\104\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\202\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\251\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\116\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\192\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\203\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\228\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\230\002\000\000\
\000\000\018\000\000\000\000\000\134\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\192\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\142\002\000\000\163\000\208\000\066\001\136\003\
\036\006\038\006\228\005\004\006\129\005\162\005\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\250\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\165\003\000\000\
\000\000\000\000\000\000\159\002\000\000\165\255\000\000\000\000\
\000\000\106\000\000\000\070\001\000\000\000\000\000\000\143\000\
\000\000\000\000\072\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\232\002\
\000\000\079\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\125\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\233\002\
\000\000\236\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\236\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\004\000\000\000\000\000\000\
\000\000\000\000\000\000\057\004\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\184\255\
\255\003\007\000\159\255\048\001\119\002\254\003\207\254\006\004\
\136\255\121\255\024\000\138\254\170\254\248\003\021\000\000\004\
\022\000\253\003\117\254\247\255\186\254\251\003\126\254\197\255\
\163\254\205\000\003\000\207\255\053\254\161\001\244\003\242\255\
\031\255\067\255\241\003\249\255\255\255\028\000\239\003\238\255\
\252\255\240\003\249\003\254\255\231\255\218\255\222\255\236\003\
\245\003\243\003\217\255\032\000\189\254\242\003\013\002\000\000\
\013\000\118\000\001\000\068\000\063\000\000\000\000\000\005\000\
\000\000\168\002\000\000\050\003\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 1872
let yytable = "\089\000\
\089\000\107\000\107\000\088\000\088\000\110\000\110\000\145\000\
\058\001\128\000\094\001\204\000\208\000\061\001\091\001\130\000\
\130\000\188\000\011\001\014\001\055\001\190\000\039\001\090\001\
\167\000\167\000\200\001\137\001\150\001\026\001\237\000\197\000\
\197\000\023\002\047\002\166\000\029\001\042\001\018\002\193\000\
\040\002\049\001\052\001\004\001\004\001\004\001\004\001\121\001\
\233\000\004\001\074\001\050\002\012\002\210\000\164\000\216\000\
\087\001\149\001\177\000\138\001\092\001\089\001\003\001\003\001\
\003\001\003\001\032\001\135\000\003\001\146\000\220\000\164\000\
\126\000\088\001\016\002\103\001\022\002\180\000\180\000\189\000\
\189\000\089\000\138\000\107\000\078\001\088\000\168\000\110\000\
\173\000\189\000\181\000\220\001\152\000\139\001\156\000\202\000\
\206\000\016\001\036\002\021\001\079\001\084\001\046\002\126\000\
\194\000\198\000\164\000\049\002\191\000\080\000\211\000\074\000\
\211\000\173\000\042\002\079\000\080\000\127\001\080\000\044\002\
\045\002\167\000\126\001\129\001\221\000\142\000\155\000\155\000\
\168\001\135\001\080\000\231\000\125\001\080\000\128\001\130\000\
\076\002\130\000\205\000\205\000\205\000\205\000\224\000\074\000\
\055\002\080\000\077\002\079\000\005\001\005\001\005\001\005\001\
\020\001\020\001\005\001\080\000\075\002\080\000\080\000\080\000\
\080\000\074\000\080\000\080\000\080\000\079\000\079\000\156\001\
\066\002\245\000\185\000\083\001\083\001\130\000\123\001\139\000\
\139\000\073\000\074\000\193\001\075\000\122\000\173\000\174\000\
\074\000\139\002\198\001\123\000\221\000\131\000\124\000\125\000\
\142\002\195\001\161\001\123\000\140\000\080\000\124\000\125\000\
\117\001\118\001\170\001\165\001\123\000\181\001\139\000\124\000\
\125\000\136\001\125\000\027\001\147\001\059\000\060\000\061\000\
\125\000\125\000\246\000\070\000\062\000\063\000\073\000\074\000\
\122\001\124\001\076\000\140\000\017\002\078\000\123\000\101\001\
\119\001\124\000\125\000\079\000\180\000\014\001\065\000\112\000\
\062\002\110\002\079\000\126\000\107\002\180\000\167\000\206\000\
\202\001\233\000\079\000\126\000\194\001\144\000\233\000\066\000\
\067\000\068\000\069\000\079\000\126\000\005\001\146\001\148\001\
\004\001\112\000\155\000\076\001\004\001\059\000\060\000\147\000\
\079\000\061\002\080\000\151\000\062\000\167\000\206\000\063\002\
\148\000\149\000\211\000\003\001\205\000\079\000\126\000\003\001\
\080\000\039\002\189\000\004\001\005\001\117\001\118\001\189\000\
\233\000\164\001\032\002\145\000\145\000\151\000\233\000\233\000\
\172\000\224\000\169\001\233\000\137\000\140\000\068\001\066\000\
\067\000\068\000\069\000\205\000\233\000\233\000\173\000\174\000\
\069\001\117\002\004\001\230\001\093\001\119\001\228\001\145\000\
\102\001\005\002\006\002\118\002\205\000\233\000\010\002\007\002\
\008\002\009\002\171\000\251\001\003\002\004\002\186\001\035\001\
\035\001\035\001\035\001\035\001\035\001\035\001\035\001\035\001\
\035\001\035\001\252\001\103\001\224\000\253\001\254\001\255\001\
\000\002\001\002\002\002\177\000\171\000\189\000\142\000\212\000\
\035\001\005\001\138\001\025\002\074\001\005\001\140\001\209\000\
\142\000\080\000\245\001\246\001\247\001\248\001\249\001\250\001\
\120\001\026\002\027\002\014\001\215\000\177\000\134\001\189\000\
\074\002\212\000\215\000\215\000\222\000\174\000\004\001\215\000\
\031\002\209\000\222\000\222\000\056\002\208\000\130\000\222\000\
\130\000\166\000\166\000\102\001\087\002\014\001\166\000\038\002\
\222\000\003\001\088\002\208\000\090\002\130\000\174\000\229\000\
\208\000\215\000\130\001\167\000\219\001\229\000\229\000\208\000\
\187\001\222\000\229\000\226\000\131\001\189\001\029\002\048\002\
\166\000\138\001\197\000\229\000\229\000\130\000\060\002\051\002\
\065\002\227\000\228\000\014\001\132\001\130\000\160\000\064\002\
\133\001\068\002\110\001\111\001\229\000\103\002\161\000\141\001\
\138\001\142\001\224\001\030\001\230\000\059\000\060\000\061\000\
\144\001\004\001\230\000\230\000\062\000\063\000\004\001\230\000\
\143\001\020\002\004\001\145\001\148\000\149\000\074\001\151\001\
\230\000\230\000\021\002\067\002\003\001\083\001\065\000\074\001\
\015\002\003\001\112\001\113\001\152\001\003\001\138\001\005\001\
\225\001\230\000\028\002\123\002\227\000\228\000\138\001\066\000\
\067\000\068\000\069\000\154\001\250\000\153\001\059\000\060\000\
\035\002\098\002\155\001\071\002\157\001\251\000\252\000\155\000\
\079\000\158\001\080\000\159\001\072\002\112\001\113\001\253\000\
\240\001\241\001\130\000\114\001\115\001\116\001\079\002\167\000\
\197\000\124\002\205\000\160\001\130\000\242\001\232\001\205\000\
\085\002\089\002\162\001\205\000\163\001\129\002\130\000\074\000\
\066\000\067\000\068\000\069\000\094\002\148\000\149\000\097\002\
\110\001\111\001\093\002\105\002\106\002\166\001\126\002\127\002\
\130\000\079\000\005\001\080\000\020\001\167\001\231\000\005\001\
\173\000\174\000\020\001\005\001\231\000\231\000\111\002\104\002\
\137\002\231\000\138\002\142\000\142\000\130\000\173\001\059\000\
\060\000\061\000\231\000\231\000\116\002\171\001\062\000\063\000\
\095\001\083\001\130\000\096\001\097\001\098\001\099\001\100\001\
\089\000\172\001\107\000\231\000\088\000\174\001\110\000\177\001\
\065\000\114\001\115\001\116\001\089\000\226\001\107\000\175\001\
\088\000\178\001\110\000\176\001\179\001\180\001\004\001\182\001\
\183\001\066\000\067\000\068\000\069\000\184\001\065\001\185\001\
\059\000\060\000\205\000\108\001\109\001\110\001\111\001\062\000\
\063\000\003\001\079\000\188\001\080\000\035\001\035\001\035\001\
\035\001\035\001\035\001\035\001\035\001\035\001\035\001\035\001\
\035\001\035\001\035\001\035\001\192\001\190\001\011\002\057\000\
\058\000\059\000\060\000\061\000\191\001\196\001\197\001\201\001\
\062\000\063\000\066\000\067\000\068\000\069\000\064\000\204\001\
\205\001\208\001\203\001\209\001\206\001\207\001\140\000\210\001\
\211\001\212\001\065\000\079\000\213\001\080\000\214\001\043\001\
\215\001\059\000\060\000\061\000\216\001\217\001\218\001\221\001\
\062\000\063\000\232\001\066\000\067\000\068\000\069\000\070\000\
\236\001\071\000\072\000\073\000\074\000\239\001\075\000\076\000\
\222\001\077\000\078\000\237\001\079\000\223\001\080\000\005\001\
\119\000\058\000\059\000\060\000\061\000\227\001\229\001\231\001\
\243\001\062\000\063\000\066\000\067\000\068\000\069\000\064\000\
\233\001\234\001\235\001\238\001\244\001\014\002\235\000\058\000\
\059\000\060\000\061\000\065\000\079\000\013\002\080\000\062\000\
\063\000\059\000\060\000\061\000\072\000\064\000\030\002\034\002\
\062\000\063\000\138\001\037\002\066\000\067\000\068\000\069\000\
\070\000\065\000\071\000\072\000\073\000\074\000\041\002\075\000\
\076\000\043\002\077\000\078\000\052\002\079\000\053\002\080\000\
\057\002\054\002\066\000\067\000\068\000\069\000\070\000\058\002\
\071\000\072\000\073\000\066\000\067\000\068\000\069\000\059\002\
\077\000\078\000\242\001\079\000\069\002\080\000\241\000\058\000\
\059\000\060\000\061\000\070\002\079\000\073\002\080\000\062\000\
\063\000\161\000\059\000\060\000\078\002\064\000\081\002\080\002\
\082\002\251\000\252\000\068\000\033\001\083\002\059\000\060\000\
\061\000\065\000\086\002\253\000\091\002\062\000\063\000\037\001\
\092\002\059\000\060\000\061\000\099\002\095\002\096\002\101\002\
\062\000\063\000\066\000\067\000\068\000\069\000\070\000\065\000\
\071\000\072\000\073\000\100\002\066\000\067\000\068\000\069\000\
\077\000\078\000\065\000\079\000\102\002\080\000\109\002\108\002\
\066\000\067\000\068\000\069\000\112\002\079\000\040\001\080\000\
\059\000\060\000\061\000\066\000\067\000\068\000\069\000\062\000\
\063\000\079\000\223\000\080\000\113\002\115\002\114\002\119\002\
\223\000\223\000\120\002\121\002\079\000\223\000\080\000\122\002\
\072\001\065\000\059\000\060\000\061\000\006\001\223\000\059\000\
\060\000\062\000\063\000\130\002\125\002\131\002\251\000\252\000\
\246\000\132\002\066\000\067\000\068\000\069\000\133\002\223\000\
\253\000\134\002\135\002\065\000\136\002\009\001\140\002\059\000\
\060\000\141\002\113\000\079\000\118\000\080\000\251\000\252\000\
\142\000\151\000\004\001\205\000\066\000\067\000\068\000\069\000\
\253\000\066\000\067\000\068\000\069\000\104\001\105\001\106\001\
\107\001\108\001\109\001\110\001\111\001\079\000\012\001\080\000\
\059\000\060\000\079\000\151\000\080\000\177\000\191\000\251\000\
\252\000\066\000\067\000\068\000\069\000\205\000\208\000\004\001\
\129\000\253\000\177\000\233\000\024\001\208\000\059\000\060\000\
\173\000\174\000\079\000\113\000\080\000\251\000\252\000\046\001\
\121\000\059\000\060\000\061\000\144\000\033\002\179\000\253\000\
\062\000\063\000\066\000\067\000\068\000\069\000\154\000\196\000\
\187\000\214\000\128\002\008\001\023\001\050\001\036\001\059\000\
\060\000\061\000\045\001\079\000\064\001\080\000\062\000\063\000\
\066\000\067\000\068\000\069\000\048\001\071\001\067\001\024\002\
\086\001\084\002\199\001\066\000\067\000\068\000\069\000\000\000\
\000\000\079\000\000\000\080\000\000\000\000\000\053\001\000\000\
\059\000\060\000\061\000\000\000\079\000\000\000\080\000\062\000\
\063\000\066\000\067\000\068\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\056\001\000\000\059\000\060\000\
\061\000\000\000\079\000\000\000\080\000\062\000\063\000\059\001\
\000\000\059\000\060\000\061\000\000\000\000\000\000\000\000\000\
\062\000\063\000\066\000\067\000\068\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\001\000\000\059\000\
\060\000\061\000\000\000\079\000\000\000\080\000\062\000\063\000\
\066\000\067\000\068\000\069\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\067\000\068\000\069\000\000\000\
\000\000\079\000\000\000\080\000\232\000\000\000\000\000\000\000\
\000\000\000\000\232\000\232\000\079\000\000\000\080\000\232\000\
\000\000\066\000\067\000\068\000\069\000\000\000\000\000\000\000\
\232\000\232\000\000\000\000\000\000\000\120\000\120\000\120\000\
\120\000\120\000\079\000\000\000\080\000\120\000\120\000\120\000\
\120\000\232\000\120\000\120\000\120\000\120\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\120\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\120\000\000\000\
\120\000\120\000\120\000\120\000\120\000\000\000\120\000\120\000\
\120\000\120\000\000\000\120\000\120\000\000\000\120\000\120\000\
\000\000\120\000\000\000\120\000\143\000\143\000\143\000\143\000\
\143\000\000\000\000\000\000\000\143\000\143\000\000\000\000\000\
\000\000\143\000\143\000\143\000\000\000\000\000\000\000\000\000\
\000\000\000\000\142\000\142\000\142\000\142\000\143\000\000\000\
\000\000\000\000\142\000\142\000\000\000\000\000\000\000\142\000\
\142\000\142\000\000\000\000\000\000\000\143\000\000\000\143\000\
\143\000\143\000\143\000\143\000\142\000\143\000\143\000\143\000\
\143\000\000\000\143\000\143\000\000\000\143\000\143\000\000\000\
\143\000\000\000\143\000\142\000\000\000\142\000\142\000\142\000\
\142\000\142\000\000\000\142\000\142\000\142\000\142\000\000\000\
\142\000\142\000\000\000\142\000\142\000\000\000\142\000\000\000\
\142\000\191\000\191\000\191\000\191\000\000\000\000\000\000\000\
\000\000\191\000\191\000\000\000\000\000\000\000\000\000\191\000\
\191\000\000\000\000\000\000\000\000\000\000\000\000\000\133\000\
\133\000\133\000\133\000\191\000\000\000\000\000\000\000\133\000\
\133\000\000\000\000\000\000\000\000\000\000\000\133\000\000\000\
\000\000\000\000\191\000\000\000\191\000\191\000\191\000\191\000\
\191\000\133\000\191\000\191\000\191\000\191\000\000\000\191\000\
\191\000\000\000\191\000\191\000\000\000\191\000\000\000\191\000\
\133\000\000\000\133\000\133\000\133\000\133\000\133\000\000\000\
\133\000\133\000\133\000\133\000\000\000\133\000\133\000\000\000\
\133\000\133\000\000\000\133\000\000\000\133\000\058\000\059\000\
\060\000\061\000\000\000\000\000\000\000\000\000\062\000\063\000\
\000\000\000\000\000\000\000\000\064\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\059\000\060\000\061\000\
\065\000\000\000\000\000\000\000\062\000\063\000\000\000\000\000\
\000\000\000\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\067\000\068\000\069\000\070\000\065\000\071\000\
\072\000\073\000\074\000\000\000\075\000\076\000\000\000\077\000\
\078\000\000\000\079\000\000\000\080\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\000\000\071\000\072\000\073\000\
\000\000\000\000\000\000\000\000\000\000\077\000\078\000\000\000\
\079\000\000\000\080\000\001\000\002\000\003\000\004\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\254\000\000\000\000\000\000\000\254\000\254\000\
\254\000\254\000\000\000\000\000\000\000\254\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\254\000\254\000\
\000\000\254\000\254\000\254\000\254\000\254\000\254\000\254\000\
\254\000\254\000\254\000\254\000\254\000\254\000\254\000\254\000\
\246\000\000\000\000\000\000\000\000\000\000\000\246\000\246\000\
\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\246\000\246\000\000\000\246\000\
\246\000\246\000\246\000\246\000\246\000\246\000\246\000\246\000\
\246\000\246\000\246\000\246\000\239\000\246\000\000\000\000\000\
\000\000\000\000\239\000\239\000\000\000\000\000\000\000\239\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\239\000\239\000\000\000\239\000\239\000\239\000\239\000\239\000\
\239\000\239\000\239\000\239\000\239\000\240\000\000\000\000\000\
\000\000\239\000\000\000\240\000\240\000\000\000\000\000\000\000\
\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\240\000\240\000\000\000\240\000\240\000\240\000\240\000\
\240\000\240\000\240\000\240\000\240\000\240\000\241\000\000\000\
\000\000\000\000\240\000\000\000\241\000\241\000\000\000\000\000\
\000\000\241\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\241\000\241\000\000\000\241\000\241\000\241\000\
\241\000\241\000\241\000\241\000\241\000\241\000\241\000\236\000\
\000\000\000\000\000\000\241\000\000\000\236\000\236\000\000\000\
\000\000\000\000\236\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\236\000\236\000\000\000\236\000\236\000\
\236\000\236\000\236\000\236\000\236\000\236\000\000\000\000\000\
\237\000\000\000\000\000\000\000\236\000\000\000\237\000\237\000\
\000\000\000\000\000\000\237\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\237\000\237\000\000\000\237\000\
\237\000\237\000\237\000\237\000\237\000\237\000\237\000\000\000\
\238\000\000\000\000\000\000\000\000\000\237\000\238\000\238\000\
\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\238\000\238\000\000\000\238\000\
\238\000\238\000\238\000\238\000\238\000\238\000\238\000\000\000\
\234\000\000\000\235\000\000\000\000\000\238\000\234\000\234\000\
\235\000\235\000\000\000\234\000\000\000\235\000\000\000\000\000\
\000\000\000\000\000\000\000\000\234\000\234\000\235\000\235\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\234\000\000\000\235\000"

let yycheck = "\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\002\000\007\000\
\047\000\003\000\083\000\021\000\022\000\048\000\064\000\003\000\
\004\000\017\000\033\000\034\000\046\000\017\000\041\000\063\000\
\012\000\013\000\252\000\125\000\149\000\037\000\028\000\019\000\
\020\000\127\001\174\001\012\000\038\000\042\000\125\001\018\000\
\159\001\044\000\045\000\031\000\032\000\033\000\034\000\107\000\
\027\000\037\000\052\000\182\001\120\001\000\001\000\001\000\001\
\058\000\011\001\000\001\008\001\065\000\063\000\031\000\032\000\
\033\000\034\000\039\000\000\001\037\000\007\000\000\001\007\001\
\011\001\061\000\124\001\026\001\126\001\015\000\016\000\017\000\
\018\000\083\000\000\001\083\000\053\000\083\000\000\001\083\000\
\017\001\027\000\000\001\042\001\000\001\042\001\000\001\000\001\
\000\001\000\001\148\001\000\001\000\001\000\001\173\001\042\001\
\000\001\000\001\042\001\178\001\000\001\063\001\057\001\053\001\
\057\001\042\001\164\001\061\001\063\001\111\000\063\001\169\001\
\170\001\109\000\110\000\111\000\054\001\000\001\009\000\010\000\
\188\000\123\000\063\001\000\001\109\000\063\001\111\000\123\000\
\020\002\125\000\021\000\022\000\023\000\024\000\025\000\053\001\
\194\001\063\001\021\002\061\001\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\063\001\019\002\063\001\063\001\063\001\
\063\001\053\001\063\001\063\001\063\001\061\001\061\001\161\000\
\236\001\000\001\000\001\054\000\055\000\161\000\107\000\011\001\
\012\001\052\001\053\001\239\000\055\001\000\001\014\001\015\001\
\053\001\133\002\015\001\006\001\054\001\000\001\009\001\010\001\
\140\002\243\000\174\000\006\001\011\001\063\001\009\001\010\001\
\009\001\010\001\190\000\183\000\006\001\215\000\042\001\009\001\
\010\001\011\001\008\001\000\001\145\000\002\001\003\001\004\001\
\014\001\015\001\049\001\048\001\009\001\010\001\052\001\053\001\
\107\000\108\000\056\001\042\001\060\001\059\001\006\001\005\001\
\041\001\009\001\010\001\061\001\174\000\252\000\027\001\016\001\
\210\001\079\002\061\001\062\001\075\002\183\000\011\001\011\001\
\000\001\228\000\061\001\062\001\240\000\051\001\233\000\044\001\
\045\001\046\001\047\001\061\001\062\001\011\001\145\000\146\000\
\252\000\042\001\149\000\000\001\000\001\002\001\003\001\000\001\
\061\001\207\001\063\001\016\001\009\001\042\001\042\001\213\001\
\009\001\010\001\057\001\252\000\011\001\061\001\062\001\000\001\
\063\001\154\001\228\000\011\001\042\001\009\001\010\001\233\000\
\005\001\180\000\140\001\014\001\015\001\042\001\011\001\012\001\
\000\001\188\000\189\000\016\001\005\000\006\000\000\001\044\001\
\045\001\046\001\047\001\042\001\025\001\026\001\014\001\015\001\
\010\001\005\001\042\001\069\001\042\001\041\001\042\001\042\001\
\025\001\112\001\113\001\015\001\215\000\042\001\118\001\114\001\
\115\001\116\001\016\001\102\001\110\001\111\001\225\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\103\001\026\001\239\000\104\001\105\001\106\001\
\107\001\108\001\109\001\016\001\042\001\016\001\005\001\016\001\
\065\000\252\000\008\001\130\001\118\001\000\001\012\001\016\001\
\015\001\063\001\095\001\096\001\097\001\098\001\099\001\100\001\
\015\001\131\001\132\001\016\001\005\001\042\001\042\001\042\001\
\016\002\042\001\011\001\012\001\005\001\017\001\130\001\016\001\
\138\001\042\001\011\001\012\001\198\001\016\001\138\001\016\001\
\140\001\011\001\012\001\025\001\036\002\042\001\016\001\153\001\
\025\001\130\001\042\002\173\001\044\002\153\001\042\001\005\001\
\178\001\042\001\010\001\159\001\042\001\011\001\012\001\042\001\
\228\000\042\001\016\001\000\001\010\001\233\000\005\001\177\001\
\042\001\008\001\174\001\025\001\026\001\177\001\205\001\185\001\
\232\001\014\001\015\001\210\001\010\001\185\001\000\001\214\001\
\010\001\241\001\034\001\035\001\042\001\005\001\008\001\042\001\
\008\001\042\001\042\001\000\001\005\001\002\001\003\001\004\001\
\042\001\205\001\011\001\012\001\009\001\010\001\210\001\016\001\
\012\001\006\001\214\001\042\001\009\001\010\001\232\001\042\001\
\025\001\026\001\015\001\237\001\205\001\120\001\027\001\241\001\
\123\001\210\001\036\001\037\001\042\001\214\001\008\001\130\001\
\042\001\042\001\133\001\005\001\014\001\015\001\008\001\044\001\
\045\001\046\001\047\001\012\001\000\001\013\001\002\001\003\001\
\147\001\059\002\042\001\013\002\042\001\009\001\010\001\154\001\
\061\001\042\001\063\001\012\001\014\002\036\001\037\001\019\001\
\009\001\010\001\014\002\038\001\039\001\040\001\024\002\019\002\
\020\002\106\002\173\001\042\001\024\002\011\001\012\001\178\001\
\034\002\043\002\042\001\182\001\042\001\118\002\034\002\053\001\
\044\001\045\001\046\001\047\001\054\002\009\001\010\001\057\002\
\034\001\035\001\052\002\014\001\015\001\042\001\112\002\113\002\
\052\002\061\001\205\001\063\001\207\001\042\001\005\001\210\001\
\014\001\015\001\213\001\214\001\011\001\012\001\080\002\073\002\
\130\002\016\001\132\002\014\001\015\001\073\002\010\001\002\001\
\003\001\004\001\025\001\026\001\086\002\042\001\009\001\010\001\
\017\001\236\001\086\002\020\001\021\001\022\001\023\001\024\001\
\106\002\042\001\106\002\042\001\106\002\012\001\106\002\013\001\
\027\001\038\001\039\001\040\001\118\002\042\001\118\002\042\001\
\118\002\012\001\118\002\042\001\042\001\042\001\114\002\012\001\
\042\001\044\001\045\001\046\001\047\001\042\001\000\001\013\001\
\002\001\003\001\021\002\032\001\033\001\034\001\035\001\009\001\
\010\001\114\002\061\001\042\001\063\001\102\001\103\001\104\001\
\105\001\106\001\107\001\108\001\109\001\110\001\111\001\112\001\
\113\001\114\001\115\001\116\001\005\001\042\001\119\001\000\001\
\001\001\002\001\003\001\004\001\042\001\042\001\042\001\042\001\
\009\001\010\001\044\001\045\001\046\001\047\001\015\001\009\001\
\010\001\042\001\018\001\042\001\014\001\015\001\143\001\012\001\
\042\001\042\001\027\001\061\001\012\001\063\001\013\001\000\001\
\042\001\002\001\003\001\004\001\042\001\042\001\042\001\042\001\
\009\001\010\001\012\001\044\001\045\001\046\001\047\001\048\001\
\012\001\050\001\051\001\052\001\053\001\005\001\055\001\056\001\
\042\001\058\001\059\001\013\001\061\001\042\001\063\001\114\002\
\000\001\001\001\002\001\003\001\004\001\042\001\042\001\042\001\
\011\001\009\001\010\001\044\001\045\001\046\001\047\001\015\001\
\042\001\042\001\042\001\042\001\016\001\013\001\000\001\001\001\
\002\001\003\001\004\001\027\001\061\001\017\001\063\001\009\001\
\010\001\002\001\003\001\004\001\051\001\015\001\011\001\013\001\
\009\001\010\001\008\001\011\001\044\001\045\001\046\001\047\001\
\048\001\027\001\050\001\051\001\052\001\053\001\016\001\055\001\
\056\001\017\001\058\001\059\001\013\001\061\001\016\001\063\001\
\010\001\017\001\044\001\045\001\046\001\047\001\048\001\011\001\
\050\001\051\001\052\001\044\001\045\001\046\001\047\001\015\001\
\058\001\059\001\011\001\061\001\011\001\063\001\000\001\001\001\
\002\001\003\001\004\001\016\001\061\001\013\001\063\001\009\001\
\010\001\008\001\002\001\003\001\005\001\015\001\011\001\013\001\
\011\001\009\001\010\001\046\001\000\001\011\001\002\001\003\001\
\004\001\027\001\013\001\019\001\005\001\009\001\010\001\000\001\
\011\001\002\001\003\001\004\001\011\001\005\001\016\001\011\001\
\009\001\010\001\044\001\045\001\046\001\047\001\048\001\027\001\
\050\001\051\001\052\001\016\001\044\001\045\001\046\001\047\001\
\058\001\059\001\027\001\061\001\005\001\063\001\016\001\007\001\
\044\001\045\001\046\001\047\001\015\001\061\001\000\001\063\001\
\002\001\003\001\004\001\044\001\045\001\046\001\047\001\009\001\
\010\001\061\001\005\001\063\001\015\001\007\001\015\001\005\001\
\011\001\012\001\005\001\011\001\061\001\016\001\063\001\016\001\
\000\001\027\001\002\001\003\001\004\001\000\001\025\001\002\001\
\003\001\009\001\010\001\015\001\011\001\016\001\009\001\010\001\
\049\001\015\001\044\001\045\001\046\001\047\001\016\001\042\001\
\019\001\016\001\016\001\027\001\016\001\000\001\016\001\002\001\
\003\001\016\001\042\001\061\001\042\001\063\001\009\001\010\001\
\042\001\042\001\011\001\011\001\044\001\045\001\046\001\047\001\
\019\001\044\001\045\001\046\001\047\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\061\001\000\001\063\001\
\002\001\003\001\061\001\016\001\063\001\042\001\042\001\009\001\
\010\001\044\001\045\001\046\001\047\001\042\001\042\001\042\001\
\042\001\019\001\016\001\042\001\000\001\016\001\002\001\003\001\
\017\001\017\001\061\001\016\001\063\001\009\001\010\001\000\001\
\002\000\002\001\003\001\004\001\007\000\143\001\015\000\019\001\
\009\001\010\001\044\001\045\001\046\001\047\001\009\000\019\000\
\017\000\023\000\114\002\032\000\036\000\000\001\040\000\002\001\
\003\001\004\001\043\000\061\001\049\000\063\001\009\001\010\001\
\044\001\045\001\046\001\047\001\044\000\051\000\050\000\128\001\
\055\000\029\002\249\000\044\001\045\001\046\001\047\001\255\255\
\255\255\061\001\255\255\063\001\255\255\255\255\000\001\255\255\
\002\001\003\001\004\001\255\255\061\001\255\255\063\001\009\001\
\010\001\044\001\045\001\046\001\047\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\001\255\255\002\001\003\001\
\004\001\255\255\061\001\255\255\063\001\009\001\010\001\000\001\
\255\255\002\001\003\001\004\001\255\255\255\255\255\255\255\255\
\009\001\010\001\044\001\045\001\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\001\255\255\002\001\
\003\001\004\001\255\255\061\001\255\255\063\001\009\001\010\001\
\044\001\045\001\046\001\047\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\045\001\046\001\047\001\255\255\
\255\255\061\001\255\255\063\001\005\001\255\255\255\255\255\255\
\255\255\255\255\011\001\012\001\061\001\255\255\063\001\016\001\
\255\255\044\001\045\001\046\001\047\001\255\255\255\255\255\255\
\025\001\026\001\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\061\001\255\255\063\001\009\001\010\001\011\001\
\012\001\042\001\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\044\001\045\001\046\001\047\001\048\001\255\255\050\001\051\001\
\052\001\053\001\255\255\055\001\056\001\255\255\058\001\059\001\
\255\255\061\001\255\255\063\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\255\255\014\001\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\027\001\255\255\
\255\255\255\255\009\001\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\255\255\255\255\255\255\042\001\255\255\044\001\
\045\001\046\001\047\001\048\001\027\001\050\001\051\001\052\001\
\053\001\255\255\055\001\056\001\255\255\058\001\059\001\255\255\
\061\001\255\255\063\001\042\001\255\255\044\001\045\001\046\001\
\047\001\048\001\255\255\050\001\051\001\052\001\053\001\255\255\
\055\001\056\001\255\255\058\001\059\001\255\255\061\001\255\255\
\063\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\027\001\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\255\255\
\255\255\255\255\042\001\255\255\044\001\045\001\046\001\047\001\
\048\001\027\001\050\001\051\001\052\001\053\001\255\255\055\001\
\056\001\255\255\058\001\059\001\255\255\061\001\255\255\063\001\
\042\001\255\255\044\001\045\001\046\001\047\001\048\001\255\255\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\255\255\
\058\001\059\001\255\255\061\001\255\255\063\001\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\027\001\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\046\001\047\001\048\001\027\001\050\001\
\051\001\052\001\053\001\255\255\055\001\056\001\255\255\058\001\
\059\001\255\255\061\001\255\255\063\001\255\255\255\255\044\001\
\045\001\046\001\047\001\048\001\255\255\050\001\051\001\052\001\
\255\255\255\255\255\255\255\255\255\255\058\001\059\001\255\255\
\061\001\255\255\063\001\001\000\002\000\003\000\004\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\005\001\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\005\001\255\255\255\255\255\255\255\255\255\255\011\001\012\001\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\005\001\042\001\255\255\255\255\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\005\001\255\255\255\255\
\255\255\042\001\255\255\011\001\012\001\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\005\001\255\255\
\255\255\255\255\042\001\255\255\011\001\012\001\255\255\255\255\
\255\255\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\005\001\
\255\255\255\255\255\255\042\001\255\255\011\001\012\001\255\255\
\255\255\255\255\016\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\005\001\255\255\255\255\255\255\042\001\255\255\011\001\012\001\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\255\255\
\005\001\255\255\255\255\255\255\255\255\042\001\011\001\012\001\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\255\255\
\005\001\255\255\005\001\255\255\255\255\042\001\011\001\012\001\
\011\001\012\001\255\255\016\001\255\255\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\025\001\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\042\001"

let yynames_const = "\
  KW_return\000\
  KW_true\000\
  KW_false\000\
  KW_new\000\
  SYMB1\000\
  SYMB2\000\
  SYMB3\000\
  SYMB4\000\
  SYMB5\000\
  SYMB6\000\
  SYMB7\000\
  SYMB8\000\
  SYMB9\000\
  SYMB10\000\
  SYMB11\000\
  SYMB12\000\
  SYMB13\000\
  SYMB14\000\
  SYMB15\000\
  SYMB16\000\
  SYMB17\000\
  SYMB18\000\
  SYMB19\000\
  SYMB20\000\
  SYMB21\000\
  SYMB22\000\
  SYMB23\000\
  SYMB24\000\
  SYMB25\000\
  SYMB26\000\
  SYMB27\000\
  SYMB28\000\
  SYMB29\000\
  SYMB30\000\
  SYMB31\000\
  SYMB32\000\
  SYMB33\000\
  SYMB34\000\
  SYMB35\000\
  SYMB36\000\
  SYMB37\000\
  TOK_EOF\000\
  "

let yynames_block = "\
  TOK_Ident\000\
  TOK_Char\000\
  TOK_Double\000\
  TOK_Integer\000\
  TOK_String\000\
  TOK_IF\000\
  TOK_ELSE\000\
  TOK_WHILE\000\
  TOK_FOR\000\
  TOK_LET\000\
  TOK_FUN\000\
  TOK_MUT\000\
  TOK_INTERFACE\000\
  TOK_IMPL\000\
  TOK_AS\000\
  TOK_MATCH\000\
  TOK_TYPE\000\
  TOK_EXTENDS\000\
  TOK_TypeId\000\
  TOK_BaseType\000\
  TOK_VarId\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'code_list) in
    Obj.repr(
# 131 "ParDeeplang.mly"
                               ( _1 )
# 1075 "ParDeeplang.ml"
               : AbsDeeplang.code list))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1081 "ParDeeplang.ml"
               : AbsDeeplang.code list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'code) in
    Obj.repr(
# 134 "ParDeeplang.mly"
                     ( _1 )
# 1088 "ParDeeplang.ml"
               : AbsDeeplang.code))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1094 "ParDeeplang.ml"
               : AbsDeeplang.code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeT) in
    Obj.repr(
# 137 "ParDeeplang.mly"
                       ( _1 )
# 1101 "ParDeeplang.ml"
               : AbsDeeplang.typeT))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1107 "ParDeeplang.ml"
               : AbsDeeplang.typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeT_list) in
    Obj.repr(
# 140 "ParDeeplang.mly"
                                 ( _1 )
# 1114 "ParDeeplang.ml"
               : AbsDeeplang.typeT list))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1120 "ParDeeplang.ml"
               : AbsDeeplang.typeT list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable) in
    Obj.repr(
# 143 "ParDeeplang.mly"
                             ( _1 )
# 1127 "ParDeeplang.ml"
               : AbsDeeplang.variable))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1133 "ParDeeplang.ml"
               : AbsDeeplang.variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variable_list) in
    Obj.repr(
# 146 "ParDeeplang.mly"
                                       ( _1 )
# 1140 "ParDeeplang.ml"
               : AbsDeeplang.variable list))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1146 "ParDeeplang.ml"
               : AbsDeeplang.variable list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declare) in
    Obj.repr(
# 149 "ParDeeplang.mly"
                           ( _1 )
# 1153 "ParDeeplang.ml"
               : AbsDeeplang.declare))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1159 "ParDeeplang.ml"
               : AbsDeeplang.declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 152 "ParDeeplang.mly"
                     ( _1 )
# 1166 "ParDeeplang.ml"
               : AbsDeeplang.args))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1172 "ParDeeplang.ml"
               : AbsDeeplang.args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'arg) in
    Obj.repr(
# 155 "ParDeeplang.mly"
                   ( _1 )
# 1179 "ParDeeplang.ml"
               : AbsDeeplang.arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1185 "ParDeeplang.ml"
               : AbsDeeplang.arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'arg_list) in
    Obj.repr(
# 158 "ParDeeplang.mly"
                             ( _1 )
# 1192 "ParDeeplang.ml"
               : AbsDeeplang.arg list))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1198 "ParDeeplang.ml"
               : AbsDeeplang.arg list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'retType) in
    Obj.repr(
# 161 "ParDeeplang.mly"
                           ( _1 )
# 1205 "ParDeeplang.ml"
               : AbsDeeplang.retType))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1211 "ParDeeplang.ml"
               : AbsDeeplang.retType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'interfaceName) in
    Obj.repr(
# 164 "ParDeeplang.mly"
                                       ( _1 )
# 1218 "ParDeeplang.ml"
               : AbsDeeplang.interfaceName))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1224 "ParDeeplang.ml"
               : AbsDeeplang.interfaceName))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'interfaceName_list) in
    Obj.repr(
# 167 "ParDeeplang.mly"
                                                 ( _1 )
# 1231 "ParDeeplang.ml"
               : AbsDeeplang.interfaceName list))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1237 "ParDeeplang.ml"
               : AbsDeeplang.interfaceName list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'methods) in
    Obj.repr(
# 170 "ParDeeplang.mly"
                           ( _1 )
# 1244 "ParDeeplang.ml"
               : AbsDeeplang.methods))
; (fun __caml_parser_env ->
    Obj.repr(
# 171 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1250 "ParDeeplang.ml"
               : AbsDeeplang.methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'methodT) in
    Obj.repr(
# 173 "ParDeeplang.mly"
                           ( _1 )
# 1257 "ParDeeplang.ml"
               : AbsDeeplang.methodT))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1263 "ParDeeplang.ml"
               : AbsDeeplang.methodT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'methodT_list) in
    Obj.repr(
# 176 "ParDeeplang.mly"
                                     ( _1 )
# 1270 "ParDeeplang.ml"
               : AbsDeeplang.methodT list))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1276 "ParDeeplang.ml"
               : AbsDeeplang.methodT list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'define) in
    Obj.repr(
# 179 "ParDeeplang.mly"
                         ( _1 )
# 1283 "ParDeeplang.ml"
               : AbsDeeplang.define))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1289 "ParDeeplang.ml"
               : AbsDeeplang.define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'functionT) in
    Obj.repr(
# 182 "ParDeeplang.mly"
                               ( _1 )
# 1296 "ParDeeplang.ml"
               : AbsDeeplang.functionT))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1302 "ParDeeplang.ml"
               : AbsDeeplang.functionT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constructor) in
    Obj.repr(
# 185 "ParDeeplang.mly"
                                   ( _1 )
# 1309 "ParDeeplang.ml"
               : AbsDeeplang.constructor))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1315 "ParDeeplang.ml"
               : AbsDeeplang.constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constructor_list) in
    Obj.repr(
# 188 "ParDeeplang.mly"
                                             ( _1 )
# 1322 "ParDeeplang.ml"
               : AbsDeeplang.constructor list))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1328 "ParDeeplang.ml"
               : AbsDeeplang.constructor list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field) in
    Obj.repr(
# 191 "ParDeeplang.mly"
                       ( _1 )
# 1335 "ParDeeplang.ml"
               : AbsDeeplang.field))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1341 "ParDeeplang.ml"
               : AbsDeeplang.field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    Obj.repr(
# 194 "ParDeeplang.mly"
                                 ( _1 )
# 1348 "ParDeeplang.ml"
               : AbsDeeplang.field list))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1354 "ParDeeplang.ml"
               : AbsDeeplang.field list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structField) in
    Obj.repr(
# 197 "ParDeeplang.mly"
                                   ( _1 )
# 1361 "ParDeeplang.ml"
               : AbsDeeplang.structField))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1367 "ParDeeplang.ml"
               : AbsDeeplang.structField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structField_list) in
    Obj.repr(
# 200 "ParDeeplang.mly"
                                             ( _1 )
# 1374 "ParDeeplang.ml"
               : AbsDeeplang.structField list))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1380 "ParDeeplang.ml"
               : AbsDeeplang.structField list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typedVar) in
    Obj.repr(
# 203 "ParDeeplang.mly"
                             ( _1 )
# 1387 "ParDeeplang.ml"
               : AbsDeeplang.typedVar))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1393 "ParDeeplang.ml"
               : AbsDeeplang.typedVar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'functions) in
    Obj.repr(
# 206 "ParDeeplang.mly"
                               ( _1 )
# 1400 "ParDeeplang.ml"
               : AbsDeeplang.functions))
; (fun __caml_parser_env ->
    Obj.repr(
# 207 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1406 "ParDeeplang.ml"
               : AbsDeeplang.functions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'functionT_list) in
    Obj.repr(
# 209 "ParDeeplang.mly"
                                         ( _1 )
# 1413 "ParDeeplang.ml"
               : AbsDeeplang.functionT list))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1419 "ParDeeplang.ml"
               : AbsDeeplang.functionT list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 212 "ParDeeplang.mly"
                               ( _1 )
# 1426 "ParDeeplang.ml"
               : AbsDeeplang.statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1432 "ParDeeplang.ml"
               : AbsDeeplang.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 215 "ParDeeplang.mly"
                                         ( _1 )
# 1439 "ParDeeplang.ml"
               : AbsDeeplang.statement list))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1445 "ParDeeplang.ml"
               : AbsDeeplang.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elseBody) in
    Obj.repr(
# 218 "ParDeeplang.mly"
                             ( _1 )
# 1452 "ParDeeplang.ml"
               : AbsDeeplang.elseBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 219 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1458 "ParDeeplang.ml"
               : AbsDeeplang.elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'matchBody) in
    Obj.repr(
# 221 "ParDeeplang.mly"
                               ( _1 )
# 1465 "ParDeeplang.ml"
               : AbsDeeplang.matchBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1471 "ParDeeplang.ml"
               : AbsDeeplang.matchBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'matchCase) in
    Obj.repr(
# 224 "ParDeeplang.mly"
                               ( _1 )
# 1478 "ParDeeplang.ml"
               : AbsDeeplang.matchCase))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1484 "ParDeeplang.ml"
               : AbsDeeplang.matchCase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'matcher) in
    Obj.repr(
# 227 "ParDeeplang.mly"
                           ( _1 )
# 1491 "ParDeeplang.ml"
               : AbsDeeplang.matcher))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1497 "ParDeeplang.ml"
               : AbsDeeplang.matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'matcher_list) in
    Obj.repr(
# 230 "ParDeeplang.mly"
                                     ( _1 )
# 1504 "ParDeeplang.ml"
               : AbsDeeplang.matcher list))
; (fun __caml_parser_env ->
    Obj.repr(
# 231 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1510 "ParDeeplang.ml"
               : AbsDeeplang.matcher list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fieldMatcher_list) in
    Obj.repr(
# 233 "ParDeeplang.mly"
                                               ( _1 )
# 1517 "ParDeeplang.ml"
               : AbsDeeplang.fieldMatcher list))
; (fun __caml_parser_env ->
    Obj.repr(
# 234 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1523 "ParDeeplang.ml"
               : AbsDeeplang.fieldMatcher list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fieldMatcher) in
    Obj.repr(
# 236 "ParDeeplang.mly"
                                     ( _1 )
# 1530 "ParDeeplang.ml"
               : AbsDeeplang.fieldMatcher))
; (fun __caml_parser_env ->
    Obj.repr(
# 237 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1536 "ParDeeplang.ml"
               : AbsDeeplang.fieldMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'matchCase_list) in
    Obj.repr(
# 239 "ParDeeplang.mly"
                                         ( _1 )
# 1543 "ParDeeplang.ml"
               : AbsDeeplang.matchCase list))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1549 "ParDeeplang.ml"
               : AbsDeeplang.matchCase list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 242 "ParDeeplang.mly"
                                 ( _1 )
# 1556 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 243 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1562 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression1) in
    Obj.repr(
# 245 "ParDeeplang.mly"
                                   ( _1 )
# 1569 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1575 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression2) in
    Obj.repr(
# 248 "ParDeeplang.mly"
                                   ( _1 )
# 1582 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1588 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression3) in
    Obj.repr(
# 251 "ParDeeplang.mly"
                                   ( _1 )
# 1595 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1601 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression4) in
    Obj.repr(
# 254 "ParDeeplang.mly"
                                   ( _1 )
# 1608 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 255 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1614 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression5) in
    Obj.repr(
# 257 "ParDeeplang.mly"
                                   ( _1 )
# 1621 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1627 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression6) in
    Obj.repr(
# 260 "ParDeeplang.mly"
                                   ( _1 )
# 1634 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 261 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1640 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression7) in
    Obj.repr(
# 263 "ParDeeplang.mly"
                                   ( _1 )
# 1647 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1653 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression8) in
    Obj.repr(
# 266 "ParDeeplang.mly"
                                   ( _1 )
# 1660 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1666 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression9) in
    Obj.repr(
# 269 "ParDeeplang.mly"
                                   ( _1 )
# 1673 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1679 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression10) in
    Obj.repr(
# 272 "ParDeeplang.mly"
                                     ( _1 )
# 1686 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1692 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression11) in
    Obj.repr(
# 275 "ParDeeplang.mly"
                                     ( _1 )
# 1699 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1705 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression12) in
    Obj.repr(
# 278 "ParDeeplang.mly"
                                     ( _1 )
# 1712 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 279 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1718 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression13) in
    Obj.repr(
# 281 "ParDeeplang.mly"
                                     ( _1 )
# 1725 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 282 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1731 "ParDeeplang.ml"
               : AbsDeeplang.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 284 "ParDeeplang.mly"
                                           ( _1 )
# 1738 "ParDeeplang.ml"
               : AbsDeeplang.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 285 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1744 "ParDeeplang.ml"
               : AbsDeeplang.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'literal) in
    Obj.repr(
# 287 "ParDeeplang.mly"
                           ( _1 )
# 1751 "ParDeeplang.ml"
               : AbsDeeplang.literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 288 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1757 "ParDeeplang.ml"
               : AbsDeeplang.literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fieldInit_list) in
    Obj.repr(
# 290 "ParDeeplang.mly"
                                         ( _1 )
# 1764 "ParDeeplang.ml"
               : AbsDeeplang.fieldInit list))
; (fun __caml_parser_env ->
    Obj.repr(
# 291 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1770 "ParDeeplang.ml"
               : AbsDeeplang.fieldInit list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fieldInit) in
    Obj.repr(
# 293 "ParDeeplang.mly"
                               ( _1 )
# 1777 "ParDeeplang.ml"
               : AbsDeeplang.fieldInit))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 1783 "ParDeeplang.ml"
               : AbsDeeplang.fieldInit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'code) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'code_list) in
    Obj.repr(
# 297 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _2) )
# 1791 "ParDeeplang.ml"
               : 'code_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'code) in
    Obj.repr(
# 298 "ParDeeplang.mly"
         ( (fun x -> [x]) _1 )
# 1798 "ParDeeplang.ml"
               : 'code_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 299 "ParDeeplang.mly"
                ( []  )
# 1804 "ParDeeplang.ml"
               : 'code_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declare) in
    Obj.repr(
# 302 "ParDeeplang.mly"
               ( Declares _1 )
# 1811 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'define) in
    Obj.repr(
# 303 "ParDeeplang.mly"
           ( Defines _1 )
# 1818 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 304 "ParDeeplang.mly"
              ( Statements _1 )
# 1825 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 305 "ParDeeplang.mly"
                     ( Expressions _1 )
# 1832 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    Obj.repr(
# 306 "ParDeeplang.mly"
                ( Unit  )
# 1838 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeT) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'int) in
    Obj.repr(
# 309 "ParDeeplang.mly"
                                    ( TypeFixLenArray (_2, _4) )
# 1846 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 310 "ParDeeplang.mly"
                      ( TypeArrow (_1, _3) )
# 1854 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    Obj.repr(
# 311 "ParDeeplang.mly"
          ( TypeUnit1  )
# 1860 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    Obj.repr(
# 312 "ParDeeplang.mly"
                ( TypeUnit2  )
# 1866 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeT_list) in
    Obj.repr(
# 313 "ParDeeplang.mly"
                           ( TypeTuple _2 )
# 1873 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'baseType) in
    Obj.repr(
# 314 "ParDeeplang.mly"
             ( TypePrimitive _1 )
# 1880 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 315 "ParDeeplang.mly"
           ( TypeX _1 )
# 1887 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 318 "ParDeeplang.mly"
                   ( (fun x -> [x]) _1 )
# 1894 "ParDeeplang.ml"
               : 'typeT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT_list) in
    Obj.repr(
# 319 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1902 "ParDeeplang.ml"
               : 'typeT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 322 "ParDeeplang.mly"
                 ( Variables _1 )
# 1909 "ParDeeplang.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 325 "ParDeeplang.mly"
                         ( (fun x -> [x]) _1 )
# 1916 "ParDeeplang.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable_list) in
    Obj.repr(
# 326 "ParDeeplang.mly"
                                 ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1924 "ParDeeplang.ml"
               : 'variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lET) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'varId) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typeT) in
    Obj.repr(
# 329 "ParDeeplang.mly"
                                      ( DecImmut (_1, _2, _4) )
# 1933 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'lET) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'mUT) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'varId) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typeT) in
    Obj.repr(
# 330 "ParDeeplang.mly"
                                    ( DecMut (_1, _2, _3, _5) )
# 1943 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'retType) in
    Obj.repr(
# 331 "ParDeeplang.mly"
                           ( DecFunc (_1, _2, _3, _4) )
# 1953 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'iNTERFACE) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'methods) in
    Obj.repr(
# 332 "ParDeeplang.mly"
                                    ( InterfaceNoExt (_1, _2, _3) )
# 1962 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'iNTERFACE) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'eXTENDS) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'interfaceName_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'methods) in
    Obj.repr(
# 333 "ParDeeplang.mly"
                                                               ( InterfaceExt (_1, _2, _3, _4, _5) )
# 1973 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    Obj.repr(
# 336 "ParDeeplang.mly"
                   ( ArgUnit  )
# 1979 "ParDeeplang.ml"
               : 'args))
; (fun __caml_parser_env ->
    Obj.repr(
# 337 "ParDeeplang.mly"
          ( ArgUnit2  )
# 1985 "ParDeeplang.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arg_list) in
    Obj.repr(
# 338 "ParDeeplang.mly"
                         ( ArgExist _2 )
# 1992 "ParDeeplang.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 341 "ParDeeplang.mly"
                        ( ArgCons (_1, _3) )
# 2000 "ParDeeplang.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 344 "ParDeeplang.mly"
               ( (fun x -> [x]) _1 )
# 2007 "ParDeeplang.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arg_list) in
    Obj.repr(
# 345 "ParDeeplang.mly"
                       ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2015 "ParDeeplang.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 348 "ParDeeplang.mly"
                      ( RetUnit  )
# 2021 "ParDeeplang.ml"
               : 'retType))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 349 "ParDeeplang.mly"
                ( RetExist _2 )
# 2028 "ParDeeplang.ml"
               : 'retType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 352 "ParDeeplang.mly"
                       ( InterfaceNames _1 )
# 2035 "ParDeeplang.ml"
               : 'interfaceName))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'interfaceName) in
    Obj.repr(
# 355 "ParDeeplang.mly"
                                   ( (fun x -> [x]) _1 )
# 2042 "ParDeeplang.ml"
               : 'interfaceName_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'interfaceName_list) in
    Obj.repr(
# 356 "ParDeeplang.mly"
                                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2050 "ParDeeplang.ml"
               : 'interfaceName_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 359 "ParDeeplang.mly"
                 ( InterfaceMethodUnit  )
# 2056 "ParDeeplang.ml"
               : 'methods))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'methodT_list) in
    Obj.repr(
# 360 "ParDeeplang.mly"
                               ( InterfaceMethodExist _2 )
# 2063 "ParDeeplang.ml"
               : 'methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'retType) in
    Obj.repr(
# 363 "ParDeeplang.mly"
                                       ( InterfaceMethod (_1, _2, _3, _4) )
# 2073 "ParDeeplang.ml"
               : 'methodT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'retType) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'code_list) in
    Obj.repr(
# 364 "ParDeeplang.mly"
                                                   ( ADTMethod (_1, _2, _3, _4, _6) )
# 2084 "ParDeeplang.ml"
               : 'methodT))
; (fun __caml_parser_env ->
    Obj.repr(
# 367 "ParDeeplang.mly"
                           ( []  )
# 2090 "ParDeeplang.ml"
               : 'methodT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'methodT) in
    Obj.repr(
# 368 "ParDeeplang.mly"
            ( (fun x -> [x]) _1 )
# 2097 "ParDeeplang.ml"
               : 'methodT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'methodT) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'methodT_list) in
    Obj.repr(
# 369 "ParDeeplang.mly"
                         ( (fun (x,xs) -> x::xs) (_1, _2) )
# 2105 "ParDeeplang.ml"
               : 'methodT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functionT) in
    Obj.repr(
# 372 "ParDeeplang.mly"
                   ( DefFunc _1 )
# 2112 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'constructor_list) in
    Obj.repr(
# 373 "ParDeeplang.mly"
                                             ( ADT (_1, _2, _4) )
# 2121 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'structField_list) in
    Obj.repr(
# 374 "ParDeeplang.mly"
                                               ( Struct (_1, _2, _4) )
# 2130 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lET) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typedVar) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 375 "ParDeeplang.mly"
                                         ( DefVar (_1, _2, _4) )
# 2139 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 376 "ParDeeplang.mly"
                           ( DefType (_1, _2, _3) )
# 2148 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'iMPL) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fOR) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typeT) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'functions) in
    Obj.repr(
# 377 "ParDeeplang.mly"
                                           ( InterfaceImpl (_1, _2, _3, _4, _5) )
# 2159 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'iMPL) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'functions) in
    Obj.repr(
# 378 "ParDeeplang.mly"
                         ( RawImpl (_1, _2, _3) )
# 2168 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'retType) in
    Obj.repr(
# 381 "ParDeeplang.mly"
                                          ( FuncUnit (_1, _2, _3, _4) )
# 2178 "ParDeeplang.ml"
               : 'functionT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'retType) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'code_list) in
    Obj.repr(
# 382 "ParDeeplang.mly"
                                                   ( Func (_1, _2, _3, _4, _6) )
# 2189 "ParDeeplang.ml"
               : 'functionT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    Obj.repr(
# 385 "ParDeeplang.mly"
                                            ( Constructors (_1, _3) )
# 2197 "ParDeeplang.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor) in
    Obj.repr(
# 388 "ParDeeplang.mly"
                               ( (fun x -> [x]) _1 )
# 2204 "ParDeeplang.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constructor) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_list) in
    Obj.repr(
# 389 "ParDeeplang.mly"
                                       ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2212 "ParDeeplang.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 392 "ParDeeplang.mly"
                          ( FieldCons (_1, _3) )
# 2220 "ParDeeplang.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 395 "ParDeeplang.mly"
                   ( (fun x -> [x]) _1 )
# 2227 "ParDeeplang.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_list) in
    Obj.repr(
# 396 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2235 "ParDeeplang.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 399 "ParDeeplang.mly"
                    ( BasicStructField _1 )
# 2242 "ParDeeplang.ml"
               : 'structField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aS) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 400 "ParDeeplang.mly"
             ( DelegateStructField (_1, _2) )
# 2250 "ParDeeplang.ml"
               : 'structField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'structField) in
    Obj.repr(
# 403 "ParDeeplang.mly"
                               ( (fun x -> [x]) _1 )
# 2257 "ParDeeplang.ml"
               : 'structField_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'structField) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'structField_list) in
    Obj.repr(
# 404 "ParDeeplang.mly"
                                       ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2265 "ParDeeplang.ml"
               : 'structField_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 407 "ParDeeplang.mly"
                             ( ImmutVar (_1, _3) )
# 2273 "ParDeeplang.ml"
               : 'typedVar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mUT) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 408 "ParDeeplang.mly"
                          ( MutVar (_1, _2, _4) )
# 2282 "ParDeeplang.ml"
               : 'typedVar))
; (fun __caml_parser_env ->
    Obj.repr(
# 411 "ParDeeplang.mly"
                   ( FunctionsUnit  )
# 2288 "ParDeeplang.ml"
               : 'functions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'functionT_list) in
    Obj.repr(
# 412 "ParDeeplang.mly"
                                 ( FunctionsMany _2 )
# 2295 "ParDeeplang.ml"
               : 'functions))
; (fun __caml_parser_env ->
    Obj.repr(
# 415 "ParDeeplang.mly"
                             ( []  )
# 2301 "ParDeeplang.ml"
               : 'functionT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functionT) in
    Obj.repr(
# 416 "ParDeeplang.mly"
              ( (fun x -> [x]) _1 )
# 2308 "ParDeeplang.ml"
               : 'functionT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'functionT) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'functionT_list) in
    Obj.repr(
# 417 "ParDeeplang.mly"
                             ( (fun (x,xs) -> x::xs) (_1, _2) )
# 2316 "ParDeeplang.ml"
               : 'functionT_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 420 "ParDeeplang.mly"
                                         ( Block _2 )
# 2323 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lET) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typedVar) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 421 "ParDeeplang.mly"
                                         ( DefVarSt (_1, _2, _4) )
# 2332 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 422 "ParDeeplang.mly"
                           ( DefTypeSt (_1, _2, _3) )
# 2341 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 423 "ParDeeplang.mly"
                     ( ExprSt _1 )
# 2348 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 424 "ParDeeplang.mly"
                               ( Return _2 )
# 2355 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'iF) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elseBody) in
    Obj.repr(
# 425 "ParDeeplang.mly"
                                                                    ( If (_1, _3, _6, _8) )
# 2365 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'fOR) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'matcher) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 426 "ParDeeplang.mly"
                                                                          ( For (_1, _3, _5, _8) )
# 2375 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'wHILE) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 427 "ParDeeplang.mly"
                                                              ( While (_1, _3, _6) )
# 2384 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'mATCH) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'varId) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'matchBody) in
    Obj.repr(
# 428 "ParDeeplang.mly"
                                                    ( Match (_1, _3, _6) )
# 2393 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 431 "ParDeeplang.mly"
                           ( (fun x -> [x]) _1 )
# 2400 "ParDeeplang.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 432 "ParDeeplang.mly"
                             ( (fun (x,xs) -> x::xs) (_1, _2) )
# 2408 "ParDeeplang.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 435 "ParDeeplang.mly"
                       ( NoElse  )
# 2414 "ParDeeplang.ml"
               : 'elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'eLSE) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'iF) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'elseBody) in
    Obj.repr(
# 436 "ParDeeplang.mly"
                                                                         ( Elif (_1, _2, _4, _7, _9) )
# 2425 "ParDeeplang.ml"
               : 'elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'eLSE) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 437 "ParDeeplang.mly"
                                      ( Else (_1, _3) )
# 2433 "ParDeeplang.ml"
               : 'elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matchCase_list) in
    Obj.repr(
# 440 "ParDeeplang.mly"
                           ( MatchBodys _1 )
# 2440 "ParDeeplang.ml"
               : 'matchBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'matcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 443 "ParDeeplang.mly"
                                                        ( MatchCases (_1, _4) )
# 2448 "ParDeeplang.ml"
               : 'matchCase))
; (fun __caml_parser_env ->
    Obj.repr(
# 446 "ParDeeplang.mly"
                 ( WildCardMatch  )
# 2454 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    Obj.repr(
# 447 "ParDeeplang.mly"
                 ( ConsMatchUnit _1 )
# 2461 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'matcher) in
    Obj.repr(
# 448 "ParDeeplang.mly"
                               ( ConsMatch (_1, _3) )
# 2469 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 449 "ParDeeplang.mly"
          ( TypelessVarMatch _1 )
# 2476 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    Obj.repr(
# 450 "ParDeeplang.mly"
          ( UnitMatch  )
# 2482 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'matcher_list) in
    Obj.repr(
# 451 "ParDeeplang.mly"
                             ( TupleMatch _2 )
# 2489 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 452 "ParDeeplang.mly"
            ( LiteralMatch _1 )
# 2496 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    Obj.repr(
# 453 "ParDeeplang.mly"
                  ( FieldMatchUnit _1 )
# 2503 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fieldMatcher_list) in
    Obj.repr(
# 454 "ParDeeplang.mly"
                                           ( FieldMatch (_1, _3) )
# 2511 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    Obj.repr(
# 457 "ParDeeplang.mly"
                           ( []  )
# 2517 "ParDeeplang.ml"
               : 'matcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matcher) in
    Obj.repr(
# 458 "ParDeeplang.mly"
            ( (fun x -> [x]) _1 )
# 2524 "ParDeeplang.ml"
               : 'matcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matcher) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matcher_list) in
    Obj.repr(
# 459 "ParDeeplang.mly"
                               ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2532 "ParDeeplang.ml"
               : 'matcher_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 462 "ParDeeplang.mly"
                                ( []  )
# 2538 "ParDeeplang.ml"
               : 'fieldMatcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fieldMatcher) in
    Obj.repr(
# 463 "ParDeeplang.mly"
                 ( (fun x -> [x]) _1 )
# 2545 "ParDeeplang.ml"
               : 'fieldMatcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fieldMatcher) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fieldMatcher_list) in
    Obj.repr(
# 464 "ParDeeplang.mly"
                                         ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2553 "ParDeeplang.ml"
               : 'fieldMatcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matcher) in
    Obj.repr(
# 467 "ParDeeplang.mly"
                                   ( FieldMatchers (_1, _3) )
# 2561 "ParDeeplang.ml"
               : 'fieldMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matchCase) in
    Obj.repr(
# 470 "ParDeeplang.mly"
                           ( (fun x -> [x]) _1 )
# 2568 "ParDeeplang.ml"
               : 'matchCase_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'matchCase) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'matchCase_list) in
    Obj.repr(
# 471 "ParDeeplang.mly"
                             ( (fun (x,xs) -> x::xs) (_1, _2) )
# 2576 "ParDeeplang.ml"
               : 'matchCase_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 474 "ParDeeplang.mly"
                         (  _1 )
# 2583 "ParDeeplang.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression2) in
    Obj.repr(
# 477 "ParDeeplang.mly"
                          (  _1 )
# 2590 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 478 "ParDeeplang.mly"
                                ( ExpAssignment (_1, _3) )
# 2598 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 479 "ParDeeplang.mly"
                                ( ExpAssignmentPlus (_1, _3) )
# 2606 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 480 "ParDeeplang.mly"
                                ( ExpAssignmentMinus (_1, _3) )
# 2614 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 481 "ParDeeplang.mly"
                                ( ExpAssignmentMul (_1, _3) )
# 2622 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 482 "ParDeeplang.mly"
                                ( ExpAssignmentDiv (_1, _3) )
# 2630 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 483 "ParDeeplang.mly"
                                ( ExpAssignmentMod (_1, _3) )
# 2638 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression3) in
    Obj.repr(
# 486 "ParDeeplang.mly"
                          (  _1 )
# 2645 "ParDeeplang.ml"
               : 'expression2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression3) in
    Obj.repr(
# 487 "ParDeeplang.mly"
                                   ( ExpLogicalOr (_1, _3) )
# 2653 "ParDeeplang.ml"
               : 'expression2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression4) in
    Obj.repr(
# 490 "ParDeeplang.mly"
                          (  _1 )
# 2660 "ParDeeplang.ml"
               : 'expression3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression4) in
    Obj.repr(
# 491 "ParDeeplang.mly"
                                   ( ExpLogicalAnd (_1, _3) )
# 2668 "ParDeeplang.ml"
               : 'expression3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression5) in
    Obj.repr(
# 494 "ParDeeplang.mly"
                          (  _1 )
# 2675 "ParDeeplang.ml"
               : 'expression4))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression4) in
    Obj.repr(
# 495 "ParDeeplang.mly"
                       ( ExpLogicalNot _2 )
# 2682 "ParDeeplang.ml"
               : 'expression4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression6) in
    Obj.repr(
# 498 "ParDeeplang.mly"
                          (  _1 )
# 2689 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 499 "ParDeeplang.mly"
                                   ( ExpLt (_1, _3) )
# 2697 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 500 "ParDeeplang.mly"
                                   ( ExpLeq (_1, _3) )
# 2705 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 501 "ParDeeplang.mly"
                                   ( ExpGt (_1, _3) )
# 2713 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 502 "ParDeeplang.mly"
                                   ( ExpGeq (_1, _3) )
# 2721 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 505 "ParDeeplang.mly"
                          (  _1 )
# 2728 "ParDeeplang.ml"
               : 'expression6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 506 "ParDeeplang.mly"
                                   ( ExpEq (_1, _3) )
# 2736 "ParDeeplang.ml"
               : 'expression6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 507 "ParDeeplang.mly"
                                   ( ExpNoteq (_1, _3) )
# 2744 "ParDeeplang.ml"
               : 'expression6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression8) in
    Obj.repr(
# 510 "ParDeeplang.mly"
                          (  _1 )
# 2751 "ParDeeplang.ml"
               : 'expression7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression8) in
    Obj.repr(
# 511 "ParDeeplang.mly"
                                   ( ExpLeftShift (_1, _3) )
# 2759 "ParDeeplang.ml"
               : 'expression7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression8) in
    Obj.repr(
# 512 "ParDeeplang.mly"
                                   ( ExpRightShift (_1, _3) )
# 2767 "ParDeeplang.ml"
               : 'expression7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression9) in
    Obj.repr(
# 515 "ParDeeplang.mly"
                          (  _1 )
# 2774 "ParDeeplang.ml"
               : 'expression8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression8) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression9) in
    Obj.repr(
# 516 "ParDeeplang.mly"
                                   ( ExpAdd (_1, _3) )
# 2782 "ParDeeplang.ml"
               : 'expression8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression8) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression9) in
    Obj.repr(
# 517 "ParDeeplang.mly"
                                   ( ExpSub (_1, _3) )
# 2790 "ParDeeplang.ml"
               : 'expression8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 520 "ParDeeplang.mly"
                           (  _1 )
# 2797 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression9) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 521 "ParDeeplang.mly"
                                    ( ExpMul (_1, _3) )
# 2805 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression9) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 522 "ParDeeplang.mly"
                                    ( ExpDiv (_1, _3) )
# 2813 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression9) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 523 "ParDeeplang.mly"
                                    ( ExpMod (_1, _3) )
# 2821 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression11) in
    Obj.repr(
# 526 "ParDeeplang.mly"
                            (  _1 )
# 2828 "ParDeeplang.ml"
               : 'expression10))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression12) in
    Obj.repr(
# 529 "ParDeeplang.mly"
                            (  _1 )
# 2835 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression11) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 530 "ParDeeplang.mly"
                                             ( ExpApp (_1, _3) )
# 2843 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression11) in
    Obj.repr(
# 531 "ParDeeplang.mly"
                       ( ExpAppUnit _1 )
# 2850 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 532 "ParDeeplang.mly"
                                              ( ExpNewObj (_2, _4) )
# 2858 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    Obj.repr(
# 533 "ParDeeplang.mly"
                        ( ExpNewObjUnit _2 )
# 2865 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression11) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 534 "ParDeeplang.mly"
                                 ( ExpMethod (_1, _3) )
# 2873 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression13) in
    Obj.repr(
# 537 "ParDeeplang.mly"
                            (  _1 )
# 2880 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 538 "ParDeeplang.mly"
             ( ExpVar _1 )
# 2887 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 539 "ParDeeplang.mly"
            ( Literals _1 )
# 2894 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 540 "ParDeeplang.mly"
                                ( Tuples _2 )
# 2901 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fieldInit_list) in
    Obj.repr(
# 541 "ParDeeplang.mly"
                                        ( StructInit (_1, _3) )
# 2909 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 544 "ParDeeplang.mly"
                                      (  _2 )
# 2916 "ParDeeplang.ml"
               : 'expression13))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 545 "ParDeeplang.mly"
                           ( ExpBracket _2 )
# 2923 "ParDeeplang.ml"
               : 'expression13))
; (fun __caml_parser_env ->
    Obj.repr(
# 548 "ParDeeplang.mly"
                              ( []  )
# 2929 "ParDeeplang.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 549 "ParDeeplang.mly"
               ( (fun x -> [x]) _1 )
# 2936 "ParDeeplang.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 550 "ParDeeplang.mly"
                                     ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2944 "ParDeeplang.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'string) in
    Obj.repr(
# 553 "ParDeeplang.mly"
                 ( String _1 )
# 2951 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'char) in
    Obj.repr(
# 554 "ParDeeplang.mly"
         ( Char _1 )
# 2958 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'int) in
    Obj.repr(
# 555 "ParDeeplang.mly"
        ( Integer _1 )
# 2965 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'float) in
    Obj.repr(
# 556 "ParDeeplang.mly"
          ( Float _1 )
# 2972 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 557 "ParDeeplang.mly"
            ( True  )
# 2978 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 558 "ParDeeplang.mly"
             ( False  )
# 2984 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 559 "ParDeeplang.mly"
          ( LUnit  )
# 2990 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fieldInit) in
    Obj.repr(
# 562 "ParDeeplang.mly"
                           ( (fun x -> [x]) _1 )
# 2997 "ParDeeplang.ml"
               : 'fieldInit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fieldInit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fieldInit_list) in
    Obj.repr(
# 563 "ParDeeplang.mly"
                                   ( (fun (x,xs) -> x::xs) (_1, _3) )
# 3005 "ParDeeplang.ml"
               : 'fieldInit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 566 "ParDeeplang.mly"
                                   ( FieldInitCons (_1, _3) )
# 3013 "ParDeeplang.ml"
               : 'fieldInit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 570 "ParDeeplang.mly"
                ( _1 )
# 3020 "ParDeeplang.ml"
               : 'char))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 571 "ParDeeplang.mly"
                    ( _1 )
# 3027 "ParDeeplang.ml"
               : 'float))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 572 "ParDeeplang.mly"
                    ( _1 )
# 3034 "ParDeeplang.ml"
               : 'int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 573 "ParDeeplang.mly"
                    ( _1 )
# 3041 "ParDeeplang.ml"
               : 'string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 574 "ParDeeplang.mly"
            ( IF (_1))
# 3048 "ParDeeplang.ml"
               : 'iF))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 575 "ParDeeplang.mly"
                ( ELSE (_1))
# 3055 "ParDeeplang.ml"
               : 'eLSE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 576 "ParDeeplang.mly"
                  ( WHILE (_1))
# 3062 "ParDeeplang.ml"
               : 'wHILE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 577 "ParDeeplang.mly"
              ( FOR (_1))
# 3069 "ParDeeplang.ml"
               : 'fOR))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 578 "ParDeeplang.mly"
              ( LET (_1))
# 3076 "ParDeeplang.ml"
               : 'lET))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 579 "ParDeeplang.mly"
              ( FUN (_1))
# 3083 "ParDeeplang.ml"
               : 'fUN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 580 "ParDeeplang.mly"
              ( MUT (_1))
# 3090 "ParDeeplang.ml"
               : 'mUT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 581 "ParDeeplang.mly"
                          ( INTERFACE (_1))
# 3097 "ParDeeplang.ml"
               : 'iNTERFACE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 582 "ParDeeplang.mly"
                ( IMPL (_1))
# 3104 "ParDeeplang.ml"
               : 'iMPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 583 "ParDeeplang.mly"
            ( AS (_1))
# 3111 "ParDeeplang.ml"
               : 'aS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 584 "ParDeeplang.mly"
                  ( MATCH (_1))
# 3118 "ParDeeplang.ml"
               : 'mATCH))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 585 "ParDeeplang.mly"
                ( TYPE (_1))
# 3125 "ParDeeplang.ml"
               : 'tYPE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 586 "ParDeeplang.mly"
                      ( EXTENDS (_1))
# 3132 "ParDeeplang.ml"
               : 'eXTENDS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 587 "ParDeeplang.mly"
                    ( TypeId (_1, 0))
# 3139 "ParDeeplang.ml"
               : 'typeId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 588 "ParDeeplang.mly"
                        ( BaseType (_1))
# 3146 "ParDeeplang.ml"
               : 'baseType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 589 "ParDeeplang.mly"
                  ( VarId (_1, 0))
# 3153 "ParDeeplang.ml"
               : 'varId))
(* Entry pCode_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pCode *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pTypeT *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pTypeT_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pVariable *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pVariable_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pDeclare *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pArgs *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pArg *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pArg_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pRetType *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pInterfaceName *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pInterfaceName_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pMethods *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pMethodT *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pMethodT_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pDefine *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pFunctionT *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pConstructor *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pConstructor_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pField *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pField_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pStructField *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pStructField_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pTypedVar *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pFunctions *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pFunctionT_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pStatement *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pStatement_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pElseBody *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pMatchBody *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pMatchCase *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pMatcher *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pMatcher_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pFieldMatcher_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pFieldMatcher *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pMatchCase_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression1 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression2 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression3 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression4 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression5 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression6 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression7 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression8 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression9 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression10 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression11 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression12 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression13 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pExpression_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pLiteral *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pFieldInit_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry pFieldInit *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let pCode_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : AbsDeeplang.code list)
let pCode (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : AbsDeeplang.code)
let pTypeT (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : AbsDeeplang.typeT)
let pTypeT_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : AbsDeeplang.typeT list)
let pVariable (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : AbsDeeplang.variable)
let pVariable_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : AbsDeeplang.variable list)
let pDeclare (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 7 lexfun lexbuf : AbsDeeplang.declare)
let pArgs (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 8 lexfun lexbuf : AbsDeeplang.args)
let pArg (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 9 lexfun lexbuf : AbsDeeplang.arg)
let pArg_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 10 lexfun lexbuf : AbsDeeplang.arg list)
let pRetType (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 11 lexfun lexbuf : AbsDeeplang.retType)
let pInterfaceName (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 12 lexfun lexbuf : AbsDeeplang.interfaceName)
let pInterfaceName_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 13 lexfun lexbuf : AbsDeeplang.interfaceName list)
let pMethods (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 14 lexfun lexbuf : AbsDeeplang.methods)
let pMethodT (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 15 lexfun lexbuf : AbsDeeplang.methodT)
let pMethodT_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 16 lexfun lexbuf : AbsDeeplang.methodT list)
let pDefine (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 17 lexfun lexbuf : AbsDeeplang.define)
let pFunctionT (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 18 lexfun lexbuf : AbsDeeplang.functionT)
let pConstructor (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 19 lexfun lexbuf : AbsDeeplang.constructor)
let pConstructor_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 20 lexfun lexbuf : AbsDeeplang.constructor list)
let pField (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 21 lexfun lexbuf : AbsDeeplang.field)
let pField_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 22 lexfun lexbuf : AbsDeeplang.field list)
let pStructField (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 23 lexfun lexbuf : AbsDeeplang.structField)
let pStructField_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 24 lexfun lexbuf : AbsDeeplang.structField list)
let pTypedVar (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 25 lexfun lexbuf : AbsDeeplang.typedVar)
let pFunctions (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 26 lexfun lexbuf : AbsDeeplang.functions)
let pFunctionT_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 27 lexfun lexbuf : AbsDeeplang.functionT list)
let pStatement (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 28 lexfun lexbuf : AbsDeeplang.statement)
let pStatement_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 29 lexfun lexbuf : AbsDeeplang.statement list)
let pElseBody (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 30 lexfun lexbuf : AbsDeeplang.elseBody)
let pMatchBody (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 31 lexfun lexbuf : AbsDeeplang.matchBody)
let pMatchCase (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 32 lexfun lexbuf : AbsDeeplang.matchCase)
let pMatcher (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 33 lexfun lexbuf : AbsDeeplang.matcher)
let pMatcher_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 34 lexfun lexbuf : AbsDeeplang.matcher list)
let pFieldMatcher_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 35 lexfun lexbuf : AbsDeeplang.fieldMatcher list)
let pFieldMatcher (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 36 lexfun lexbuf : AbsDeeplang.fieldMatcher)
let pMatchCase_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 37 lexfun lexbuf : AbsDeeplang.matchCase list)
let pExpression (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 38 lexfun lexbuf : AbsDeeplang.expression)
let pExpression1 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 39 lexfun lexbuf : AbsDeeplang.expression)
let pExpression2 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 40 lexfun lexbuf : AbsDeeplang.expression)
let pExpression3 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 41 lexfun lexbuf : AbsDeeplang.expression)
let pExpression4 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 42 lexfun lexbuf : AbsDeeplang.expression)
let pExpression5 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 43 lexfun lexbuf : AbsDeeplang.expression)
let pExpression6 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 44 lexfun lexbuf : AbsDeeplang.expression)
let pExpression7 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 45 lexfun lexbuf : AbsDeeplang.expression)
let pExpression8 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 46 lexfun lexbuf : AbsDeeplang.expression)
let pExpression9 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 47 lexfun lexbuf : AbsDeeplang.expression)
let pExpression10 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 48 lexfun lexbuf : AbsDeeplang.expression)
let pExpression11 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 49 lexfun lexbuf : AbsDeeplang.expression)
let pExpression12 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 50 lexfun lexbuf : AbsDeeplang.expression)
let pExpression13 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 51 lexfun lexbuf : AbsDeeplang.expression)
let pExpression_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 52 lexfun lexbuf : AbsDeeplang.expression list)
let pLiteral (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 53 lexfun lexbuf : AbsDeeplang.literal)
let pFieldInit_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 54 lexfun lexbuf : AbsDeeplang.fieldInit list)
let pFieldInit (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 55 lexfun lexbuf : AbsDeeplang.fieldInit)
