type token =
  | KW_return
  | KW_true
  | KW_false
  | SYMB8
  | SYMB9
  | SYMB10
  | SYMB11
  | SYMB12
  | SYMB13
  | SYMB14
  | SYMB15
  | SYMB16
  | SYMB17
  | SYMB18
  | SYMB19
  | SYMB20
  | SYMB21
  | SYMB22
  | SYMB23
  | SYMB24
  | SYMB25
  | SYMB26
  | SYMB27
  | SYMB28
  | SYMB29
  | SYMB30
  | SYMB31
  | SYMB32
  | SYMB33
  | SYMB34
  | SYMB35
  | SYMB36
  | SYMB38
  | TOK_EOF
  | TOK_Ident of (string)
  | TOK_Char of (char)
  | TOK_Double of (float)
  | TOK_Integer of (int)
  | TOK_String of (string)
  | TOK_IF of ((int * int) * string)
  | TOK_ELSE of ((int * int) * string)
  | TOK_WHILE of ((int * int) * string)
  | TOK_FOR of ((int * int) * string)
  | TOK_IN of ((int * int) * string)
  | TOK_LET of ((int * int) * string)
  | TOK_FUN of ((int * int) * string)
  | TOK_MUT of ((int * int) * string)
  | TOK_INTERFACE of ((int * int) * string)
  | TOK_IMPL of ((int * int) * string)
  | TOK_AS of ((int * int) * string)
  | TOK_MATCH of ((int * int) * string)
  | TOK_TYPE of ((int * int) * string)
  | TOK_EXTENDS of ((int * int) * string)
  | TOK_TypeId of ((int * int) * string)
  | TOK_BaseType of ((int * int) * string)
  | TOK_VarId of ((int * int) * string)
  | TOK_SColon of ((int * int) * string)
  | TOK_Arrow of ((int * int) * string)
  | TOK_LBrack of ((int * int) * string)
  | TOK_RBrack of ((int * int) * string)
  | TOK_LParen of ((int * int) * string)
  | TOK_RParen of ((int * int) * string)
  | TOK_Unit of ((int * int) * string)
  | TOK_Mod of ((int * int) * string)

open Parsing;;
let _ = parse_error;;
# 3 "ParDeeplang.mly"
open AbsDeeplang
open Lexing


# 75 "ParDeeplang.ml"
let yytransl_const = [|
  257 (* KW_return *);
  258 (* KW_true *);
  259 (* KW_false *);
  260 (* SYMB8 *);
  261 (* SYMB9 *);
  262 (* SYMB10 *);
  263 (* SYMB11 *);
  264 (* SYMB12 *);
  265 (* SYMB13 *);
  266 (* SYMB14 *);
  267 (* SYMB15 *);
  268 (* SYMB16 *);
  269 (* SYMB17 *);
  270 (* SYMB18 *);
  271 (* SYMB19 *);
  272 (* SYMB20 *);
  273 (* SYMB21 *);
  274 (* SYMB22 *);
  275 (* SYMB23 *);
  276 (* SYMB24 *);
  277 (* SYMB25 *);
  278 (* SYMB26 *);
  279 (* SYMB27 *);
  280 (* SYMB28 *);
  281 (* SYMB29 *);
  282 (* SYMB30 *);
  283 (* SYMB31 *);
  284 (* SYMB32 *);
  285 (* SYMB33 *);
  286 (* SYMB34 *);
  287 (* SYMB35 *);
  288 (* SYMB36 *);
  289 (* SYMB38 *);
  290 (* TOK_EOF *);
    0|]

let yytransl_block = [|
  291 (* TOK_Ident *);
  292 (* TOK_Char *);
  293 (* TOK_Double *);
  294 (* TOK_Integer *);
  295 (* TOK_String *);
  296 (* TOK_IF *);
  297 (* TOK_ELSE *);
  298 (* TOK_WHILE *);
  299 (* TOK_FOR *);
  300 (* TOK_IN *);
  301 (* TOK_LET *);
  302 (* TOK_FUN *);
  303 (* TOK_MUT *);
  304 (* TOK_INTERFACE *);
  305 (* TOK_IMPL *);
  306 (* TOK_AS *);
  307 (* TOK_MATCH *);
  308 (* TOK_TYPE *);
  309 (* TOK_EXTENDS *);
  310 (* TOK_TypeId *);
  311 (* TOK_BaseType *);
  312 (* TOK_VarId *);
  313 (* TOK_SColon *);
  314 (* TOK_Arrow *);
  315 (* TOK_LBrack *);
  316 (* TOK_RBrack *);
  317 (* TOK_LParen *);
  318 (* TOK_RParen *);
  319 (* TOK_Unit *);
  320 (* TOK_Mod *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\017\000\017\000\020\000\020\000\022\000\022\000\004\000\
\004\000\004\000\025\000\025\000\025\000\033\000\032\000\032\000\
\026\000\026\000\028\000\031\000\031\000\029\000\029\000\035\000\
\034\000\034\000\034\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\036\000\036\000\048\000\048\000\038\000\038\000\
\050\000\049\000\049\000\051\000\051\000\039\000\039\000\043\000\
\043\000\041\000\041\000\046\000\046\000\053\000\053\000\053\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\047\000\047\000\047\000\055\000\055\000\055\000\062\000\056\000\
\056\000\056\000\042\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\064\000\064\000\064\000\066\000\
\066\000\066\000\067\000\060\000\060\000\007\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\069\000\069\000\070\000\
\070\000\071\000\071\000\072\000\072\000\072\000\072\000\072\000\
\073\000\073\000\073\000\074\000\074\000\074\000\075\000\075\000\
\075\000\076\000\076\000\076\000\076\000\077\000\079\000\079\000\
\079\000\079\000\079\000\079\000\080\000\080\000\080\000\080\000\
\080\000\080\000\082\000\082\000\081\000\081\000\081\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\083\000\
\083\000\087\000\085\000\086\000\011\000\084\000\054\000\061\000\
\058\000\045\000\057\000\040\000\024\000\023\000\027\000\044\000\
\052\000\059\000\037\000\030\000\019\000\018\000\021\000\008\000\
\013\000\010\000\012\000\015\000\016\000\014\000\078\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\001\000\000\000\001\000\001\000\001\000\
\002\000\000\000\005\000\003\000\001\000\002\000\003\000\001\000\
\001\000\001\000\003\000\001\000\003\000\002\000\001\000\004\000\
\003\000\005\000\002\000\001\000\003\000\003\000\001\000\003\000\
\000\000\002\000\001\000\001\000\003\000\001\000\003\000\005\000\
\000\000\001\000\002\000\001\000\005\000\005\000\005\000\004\000\
\005\000\003\000\005\000\007\000\001\000\004\000\001\000\003\000\
\003\000\001\000\003\000\001\000\002\000\001\000\003\000\002\000\
\000\000\001\000\000\000\001\000\003\000\000\000\001\000\002\000\
\003\000\005\000\002\000\003\000\008\000\009\000\007\000\007\000\
\001\000\002\000\000\000\000\000\009\000\004\000\005\000\001\000\
\001\000\003\000\003\000\001\000\002\000\004\000\001\000\001\000\
\003\000\001\000\002\000\004\000\000\000\001\000\003\000\000\000\
\001\000\003\000\003\000\001\000\002\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\003\000\001\000\
\003\000\001\000\002\000\001\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\001\000\003\000\
\003\000\001\000\003\000\003\000\003\000\001\000\001\000\004\000\
\002\000\004\000\002\000\003\000\001\000\001\000\001\000\003\000\
\003\000\004\000\003\000\003\000\000\000\001\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\000\000\164\000\165\000\000\000\092\000\
\167\000\000\000\171\000\172\000\173\000\174\000\175\000\177\000\
\178\000\180\000\181\000\182\000\183\000\184\000\186\000\187\000\
\189\000\191\000\194\000\196\000\198\000\200\000\000\000\000\000\
\006\000\007\000\008\000\000\000\000\000\162\000\096\000\000\000\
\000\000\000\000\095\000\000\000\000\000\000\000\044\000\000\000\
\000\000\088\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\098\000\110\000\000\000\000\000\120\000\122\000\124\000\
\000\000\000\000\000\000\138\000\000\000\143\000\149\000\160\000\
\161\000\163\000\000\000\000\000\000\000\000\000\000\000\023\000\
\123\000\001\000\003\000\192\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\099\000\000\000\093\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\035\000\
\000\000\000\000\066\000\000\000\190\000\000\000\000\000\013\000\
\000\000\016\000\000\000\000\000\000\000\000\000\185\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\199\000\000\000\000\000\145\000\000\000\076\000\082\000\
\075\000\000\000\073\000\000\000\195\000\153\000\197\000\155\000\
\000\000\097\000\152\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\112\000\113\000\114\000\115\000\116\000\117\000\
\028\000\000\000\000\000\038\000\000\000\188\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\098\000\
\068\000\000\000\193\000\000\000\050\000\000\000\017\000\000\000\
\014\000\000\000\000\000\000\000\000\000\090\000\000\000\000\000\
\000\000\000\000\121\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\139\000\140\000\141\000\
\148\000\000\000\000\000\159\000\000\000\103\000\000\000\100\000\
\000\000\154\000\000\000\094\000\146\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\093\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\000\000\179\000\000\000\
\000\000\000\000\000\000\144\000\000\000\170\000\000\000\000\000\
\106\000\000\000\169\000\000\000\029\000\000\000\000\000\051\000\
\000\000\000\000\039\000\043\000\000\000\026\000\000\000\046\000\
\000\000\061\000\000\000\045\000\000\000\000\000\064\000\047\000\
\000\000\072\000\069\000\000\000\019\000\049\000\000\000\000\000\
\000\000\000\000\074\000\000\000\000\000\000\000\032\000\000\000\
\000\000\037\000\000\000\063\000\000\000\000\000\056\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\107\000\
\052\000\000\000\054\000\000\000\000\000\000\000\000\000\079\000\
\000\000\080\000\109\000\040\000\059\000\000\000\176\000\077\000\
\000\000\000\000\078\000\000\000\000\000\000\000\000\000\000\000\
\087\000\086\000\000\000\000\000\000\000\000\000\000\000\085\000"

let yydgoto = "\002\000\
\030\000\031\000\032\000\033\000\034\000\076\000\077\000\085\000\
\192\000\037\000\038\000\150\000\188\000\039\000\040\000\228\000\
\194\000\114\000\041\000\000\000\042\000\043\000\044\000\045\000\
\171\000\235\000\046\000\239\000\175\000\176\000\240\000\232\000\
\233\000\237\000\238\000\047\000\048\000\247\000\242\000\078\000\
\108\000\050\000\254\000\051\000\052\000\189\000\079\000\248\000\
\061\001\243\000\244\000\120\000\001\001\053\000\088\001\054\000\
\008\001\055\000\056\000\070\001\089\001\071\001\057\000\090\000\
\058\000\157\000\158\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\139\000\069\000\070\000\
\087\000\071\000\159\000\072\000\073\000\074\000\160\000"

let yysindex = "\042\000\
\218\000\000\000\000\000\116\000\000\000\000\000\167\002\000\000\
\000\000\116\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\251\254\041\002\
\000\000\000\000\000\000\252\254\116\000\000\000\000\000\116\000\
\021\255\194\000\000\000\037\255\037\255\025\255\000\000\025\255\
\057\255\000\000\020\000\050\255\050\255\064\255\050\255\050\255\
\132\255\000\000\000\000\160\255\177\255\000\000\000\000\000\000\
\172\001\156\255\108\255\000\000\066\255\000\000\000\000\000\000\
\000\000\000\000\252\254\167\002\252\254\057\255\196\255\000\000\
\000\000\000\000\000\000\000\000\000\000\208\255\161\255\008\255\
\015\255\162\255\162\255\000\000\037\255\000\000\116\000\116\000\
\116\000\116\000\116\000\116\000\116\000\000\000\061\255\000\000\
\126\255\166\255\000\000\242\002\000\000\040\255\020\000\000\000\
\119\000\000\000\000\000\188\255\242\002\116\000\000\000\119\255\
\116\000\037\255\020\000\116\000\116\000\213\002\213\002\213\002\
\213\002\213\002\213\002\213\002\213\002\213\002\213\002\213\002\
\213\002\000\000\213\002\037\255\000\000\116\000\000\000\000\000\
\000\000\242\002\000\000\116\000\000\000\000\000\000\000\000\000\
\242\002\000\000\000\000\211\255\226\255\235\255\237\255\250\255\
\068\255\162\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\255\199\255\000\000\213\255\000\000\000\000\025\255\
\093\255\025\255\252\254\242\002\028\255\253\255\132\255\000\000\
\000\000\213\255\000\000\020\000\000\000\143\255\000\000\010\255\
\000\000\162\255\020\000\139\255\162\255\000\000\162\255\162\255\
\199\255\177\255\000\000\216\255\216\255\216\255\216\255\216\255\
\216\255\156\255\156\255\108\255\108\255\000\000\000\000\000\000\
\000\000\162\255\253\255\000\000\015\255\000\000\116\000\000\000\
\037\255\000\000\037\255\000\000\000\000\000\000\005\000\162\255\
\017\000\020\000\244\255\037\255\018\000\213\255\038\000\007\000\
\044\000\039\000\000\000\047\000\037\255\050\255\161\255\049\000\
\000\000\037\255\000\000\242\002\116\000\252\254\037\255\213\255\
\048\000\199\255\024\000\020\000\000\000\040\255\000\000\116\000\
\058\000\061\000\064\000\000\000\252\254\000\000\132\255\072\000\
\000\000\083\000\000\000\020\000\000\000\037\255\199\255\000\000\
\167\002\061\255\000\000\000\000\025\255\000\000\020\000\000\000\
\093\255\000\000\037\255\000\000\025\255\068\255\000\000\000\000\
\061\255\000\000\000\000\161\255\000\000\000\000\162\255\167\002\
\167\002\242\002\000\000\242\002\116\000\199\255\000\000\081\000\
\199\255\000\000\199\255\000\000\162\255\088\000\000\000\199\255\
\000\000\087\000\089\000\093\000\005\255\098\000\242\002\000\000\
\000\000\252\254\000\000\037\255\244\255\167\002\066\000\000\000\
\095\000\000\000\000\000\000\000\000\000\102\000\000\000\000\000\
\017\255\167\002\000\000\167\002\050\255\106\000\107\000\116\000\
\000\000\000\000\162\255\109\000\167\002\117\000\066\000\000\000"

let yyrindex = "\000\000\
\092\000\000\000\000\000\000\000\000\000\000\000\126\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\000\
\000\000\000\000\000\000\000\000\077\000\000\000\000\000\076\000\
\000\000\142\003\000\000\000\000\000\000\000\000\000\000\000\000\
\254\002\000\000\000\000\000\000\000\000\189\003\000\000\000\000\
\095\003\000\000\000\000\130\255\048\255\000\000\000\000\000\000\
\014\255\223\000\172\002\000\000\027\004\000\000\000\000\000\000\
\000\000\000\000\000\000\132\000\000\000\254\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\153\255\000\000\000\000\
\207\004\000\000\000\000\000\000\134\000\000\000\085\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\168\255\000\000\000\000\000\000\000\000\
\076\000\000\000\000\000\000\000\000\000\135\000\000\000\140\000\
\043\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\171\001\000\000\149\000\000\000\000\000\000\000\
\000\000\000\000\000\000\076\000\000\000\101\000\000\000\000\000\
\000\000\152\000\000\000\000\000\000\000\000\000\000\000\100\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\003\235\000\000\000\036\000\104\000\131\000\119\001\245\001\
\051\002\162\004\190\004\090\004\135\004\000\000\000\000\000\000\
\000\000\000\000\101\000\000\000\105\000\000\000\000\000\000\000\
\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\121\000\000\000\104\002\000\000\000\000\149\000\022\000\000\000\
\000\000\000\000\000\000\160\000\000\000\004\255\000\000\111\000\
\000\000\134\000\000\000\000\000\000\000\000\000\000\000\152\000\
\000\000\044\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\236\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\108\001\000\000\
\126\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\126\000\
\126\000\000\000\000\000\000\000\000\000\019\255\000\000\000\000\
\112\000\000\000\013\255\000\000\000\000\122\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\178\000\000\000\
\000\000\000\000\000\000\000\000\000\000\126\000\234\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\126\000\000\000\126\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\126\000\000\000\234\001\000\000"

let yygindex = "\000\000\
\000\000\155\001\000\000\000\000\000\000\019\000\255\255\248\255\
\125\000\181\000\186\000\046\255\087\255\018\001\245\255\129\000\
\188\000\000\000\080\000\000\000\028\000\074\001\010\000\096\255\
\154\255\023\255\000\000\148\000\211\000\000\000\167\000\175\000\
\000\000\216\000\000\000\077\255\000\000\163\000\171\000\053\000\
\124\001\173\255\242\000\000\000\098\001\209\000\189\255\000\000\
\141\000\027\255\000\000\090\255\222\000\127\000\120\000\222\255\
\000\000\000\000\000\000\153\000\000\000\000\000\158\255\073\001\
\094\000\015\001\000\000\136\001\000\000\135\001\247\255\000\000\
\000\000\160\001\169\000\207\000\070\000\000\000\000\000\000\000\
\221\255\000\000\035\001\000\000\000\000\000\000\000\000"

let yytablesize = 1551
let yytable = "\036\000\
\081\000\234\000\075\000\179\000\091\000\089\000\000\001\053\000\
\144\000\183\000\245\000\148\000\236\000\004\001\081\001\034\001\
\057\000\129\000\153\000\035\000\057\000\129\000\030\000\092\001\
\182\000\255\000\092\000\093\000\082\000\095\000\036\000\129\000\
\129\000\092\000\250\000\086\000\036\001\080\000\088\000\113\000\
\117\000\118\000\001\000\121\000\122\000\185\000\186\000\183\000\
\017\000\017\000\035\000\118\000\084\000\049\000\119\000\118\000\
\015\000\142\000\107\000\162\000\161\000\062\001\219\000\053\000\
\119\000\118\000\143\000\187\000\145\000\151\000\129\000\102\000\
\103\000\129\000\057\000\129\000\000\001\236\000\025\000\074\001\
\030\000\028\000\196\000\029\000\049\000\035\000\077\001\107\000\
\028\000\065\001\029\000\170\000\026\000\086\000\170\000\255\000\
\180\000\187\000\140\000\113\000\017\000\113\000\062\001\020\000\
\118\000\180\000\218\000\118\000\026\000\118\000\028\000\113\000\
\220\000\119\000\151\000\203\000\197\000\119\000\221\000\199\000\
\156\000\028\000\245\000\029\000\015\001\104\000\028\000\106\000\
\029\000\151\000\115\000\172\000\173\000\111\000\180\000\080\000\
\123\000\111\000\136\000\137\000\086\000\180\000\119\000\234\000\
\080\000\221\000\086\000\080\000\026\000\200\000\234\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\020\000\080\000\217\000\
\180\000\252\000\249\000\138\000\177\000\080\000\026\000\110\000\
\113\000\124\000\174\000\057\001\080\000\003\001\007\001\113\000\
\134\000\135\000\111\000\181\000\119\000\111\000\191\000\111\000\
\191\000\105\000\064\001\125\000\181\000\231\000\116\000\084\000\
\187\000\184\000\191\000\147\000\241\000\214\000\215\000\080\000\
\216\000\072\001\184\000\148\000\158\000\056\001\158\000\223\000\
\152\000\038\001\154\000\155\000\149\000\014\001\113\000\151\000\
\027\000\181\000\028\000\157\000\029\000\157\000\017\000\111\000\
\181\000\224\000\035\001\190\000\067\001\068\001\225\000\184\000\
\180\000\193\000\132\000\133\000\226\000\040\001\184\000\201\000\
\113\000\024\001\025\001\039\001\016\001\227\000\018\001\104\000\
\187\000\246\000\019\000\181\000\051\001\253\000\047\001\026\001\
\113\000\020\001\086\001\191\000\172\000\173\000\170\000\069\001\
\241\000\184\000\191\000\113\000\022\001\016\001\094\001\080\000\
\095\001\027\001\041\001\036\000\036\000\170\000\178\000\033\000\
\033\000\102\001\229\000\111\000\069\001\111\000\180\000\125\000\
\180\000\029\001\230\000\125\000\210\000\211\000\032\001\111\000\
\031\001\231\000\033\001\014\001\037\001\125\000\125\000\043\001\
\002\001\191\000\094\000\180\000\241\000\013\000\241\000\006\001\
\048\001\084\001\005\001\049\001\112\000\009\001\050\001\010\001\
\011\001\025\000\109\000\181\000\052\001\080\000\027\000\080\000\
\028\000\096\001\029\000\191\000\212\000\213\000\141\000\053\001\
\073\001\184\000\012\001\076\001\125\000\078\001\099\001\125\000\
\079\001\125\000\080\000\191\000\080\001\090\001\023\001\241\000\
\021\001\082\001\087\001\126\000\104\000\091\001\191\000\126\000\
\111\000\097\001\098\001\101\001\246\000\005\000\006\000\111\000\
\169\000\126\000\126\000\169\000\103\001\005\000\008\000\009\000\
\112\000\181\000\112\000\181\000\004\000\083\000\127\000\010\000\
\157\000\101\000\127\000\081\000\112\000\104\000\105\000\184\000\
\054\001\184\000\157\000\168\000\127\000\127\000\181\000\011\000\
\012\000\013\000\014\000\059\001\041\000\065\000\111\000\070\000\
\126\000\018\000\020\000\126\000\184\000\126\000\102\000\062\000\
\033\000\025\000\055\000\026\000\025\000\109\000\027\000\066\001\
\028\000\027\000\029\000\028\000\151\000\029\000\031\000\058\000\
\111\000\108\000\083\000\127\000\044\001\075\001\127\000\045\001\
\127\000\198\000\030\001\058\001\055\001\028\001\251\000\063\001\
\111\000\146\000\096\000\060\001\013\001\112\000\097\000\098\000\
\099\000\100\000\101\000\111\000\112\000\195\000\046\001\093\001\
\085\001\003\000\004\000\005\000\006\000\042\001\104\001\083\001\
\007\000\222\000\132\000\100\001\008\000\009\000\132\000\163\000\
\164\000\165\000\166\000\167\000\168\000\010\000\119\000\017\001\
\132\000\132\000\119\000\132\000\132\000\132\000\132\000\132\000\
\132\000\132\000\132\000\112\000\119\000\011\000\012\000\013\000\
\014\000\015\000\202\000\016\000\017\000\019\001\018\000\019\000\
\020\000\021\000\022\000\000\000\023\000\024\000\000\000\025\000\
\000\000\026\000\000\000\000\000\027\000\112\000\028\000\132\000\
\029\000\000\000\132\000\000\000\132\000\204\000\205\000\206\000\
\207\000\208\000\209\000\119\000\000\000\112\000\119\000\000\000\
\119\000\000\000\000\000\169\000\012\000\012\000\012\000\012\000\
\112\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\000\000\169\000\000\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\
\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\012\000\000\000\012\000\012\000\000\000\012\000\012\000\
\012\000\012\000\012\000\012\000\034\000\034\000\034\000\000\000\
\000\000\034\000\034\000\000\000\000\000\000\000\034\000\034\000\
\000\000\000\000\128\000\000\000\000\000\000\000\128\000\034\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\128\000\128\000\000\000\000\000\000\000\034\000\000\000\034\000\
\034\000\034\000\034\000\034\000\000\000\034\000\034\000\000\000\
\034\000\034\000\034\000\034\000\034\000\000\000\034\000\034\000\
\000\000\034\000\000\000\034\000\034\000\000\000\034\000\000\000\
\034\000\000\000\034\000\033\000\033\000\033\000\000\000\128\000\
\033\000\033\000\128\000\000\000\128\000\033\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\126\000\127\000\128\000\129\000\130\000\131\000\132\000\133\000\
\000\000\000\000\000\000\000\000\033\000\000\000\033\000\033\000\
\033\000\033\000\033\000\000\000\033\000\033\000\000\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\033\000\000\000\
\033\000\000\000\033\000\000\000\000\000\033\000\000\000\033\000\
\000\000\033\000\084\000\084\000\084\000\000\000\000\000\000\000\
\084\000\084\000\000\000\000\000\084\000\084\000\000\000\000\000\
\130\000\000\000\000\000\000\000\130\000\084\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\130\000\130\000\
\000\000\000\000\000\000\084\000\000\000\084\000\084\000\084\000\
\084\000\084\000\000\000\084\000\084\000\000\000\084\000\084\000\
\084\000\084\000\084\000\000\000\084\000\084\000\000\000\084\000\
\000\000\084\000\000\000\000\000\084\000\000\000\084\000\000\000\
\084\000\004\000\005\000\006\000\000\000\130\000\000\000\007\000\
\130\000\000\000\130\000\008\000\009\000\000\000\131\000\000\000\
\000\000\000\000\131\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\131\000\131\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\012\000\013\000\014\000\
\015\000\000\000\016\000\017\000\000\000\018\000\019\000\020\000\
\021\000\022\000\000\000\023\000\024\000\000\000\025\000\000\000\
\026\000\000\000\000\000\027\000\000\000\028\000\000\000\029\000\
\024\000\024\000\024\000\131\000\000\000\000\000\131\000\000\000\
\131\000\000\000\024\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\024\000\000\000\024\000\024\000\024\000\024\000\
\024\000\000\000\024\000\024\000\000\000\024\000\000\000\024\000\
\000\000\000\000\024\000\000\000\024\000\000\000\024\000\004\000\
\005\000\006\000\000\000\000\000\000\000\007\000\000\000\135\000\
\000\000\008\000\009\000\135\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\135\000\135\000\000\000\
\135\000\135\000\135\000\135\000\135\000\135\000\135\000\135\000\
\135\000\135\000\011\000\012\000\013\000\014\000\015\000\000\000\
\016\000\017\000\000\000\018\000\000\000\020\000\005\000\006\000\
\000\000\023\000\000\000\000\000\025\000\000\000\026\000\008\000\
\009\000\027\000\000\000\028\000\135\000\029\000\000\000\135\000\
\000\000\135\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\006\000\000\000\000\000\000\000\
\011\000\012\000\013\000\014\000\008\000\009\000\000\000\067\000\
\067\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\067\000\067\000\025\000\000\000\026\000\000\000\000\000\027\000\
\000\000\028\000\000\000\029\000\000\000\011\000\012\000\013\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\067\000\067\000\067\000\067\000\000\000\000\000\025\000\
\000\000\026\000\000\000\000\000\000\000\000\000\028\000\000\000\
\029\000\000\000\091\000\067\000\000\000\067\000\091\000\091\000\
\091\000\000\000\067\000\000\000\067\000\000\000\000\000\000\000\
\091\000\091\000\000\000\091\000\091\000\091\000\091\000\091\000\
\091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\091\000\000\000\000\000\000\000\000\000\000\000\
\091\000\000\000\089\000\000\000\000\000\000\000\089\000\091\000\
\089\000\000\000\091\000\091\000\091\000\091\000\091\000\000\000\
\089\000\089\000\000\000\089\000\089\000\089\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\089\000\000\000\000\000\000\000\000\000\000\000\
\089\000\023\000\023\000\000\000\000\000\023\000\000\000\089\000\
\000\000\000\000\089\000\089\000\089\000\089\000\089\000\023\000\
\023\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\150\000\000\000\000\000\000\000\150\000\000\000\023\000\000\000\
\000\000\023\000\023\000\023\000\023\000\023\000\150\000\150\000\
\000\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\000\
\000\000\000\000\000\000\089\000\000\000\150\000\000\000\000\000\
\150\000\150\000\150\000\150\000\150\000\089\000\089\000\000\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\142\000\000\000\
\000\000\000\000\142\000\000\000\000\000\000\000\000\000\000\000\
\089\000\000\000\089\000\089\000\142\000\142\000\150\000\142\000\
\142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
\142\000\142\000\142\000\000\000\150\000\150\000\000\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\142\000\000\000\000\000\142\000\000\000\
\142\000\000\000\142\000\000\000\000\000\136\000\000\000\000\000\
\000\000\136\000\000\000\000\000\000\000\000\000\000\000\150\000\
\000\000\150\000\150\000\136\000\136\000\000\000\136\000\136\000\
\136\000\136\000\136\000\136\000\136\000\136\000\136\000\136\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\137\000\000\000\000\000\000\000\137\000\000\000\
\000\000\000\000\136\000\000\000\000\000\136\000\000\000\136\000\
\137\000\137\000\000\000\137\000\137\000\137\000\137\000\137\000\
\137\000\137\000\137\000\137\000\137\000\133\000\000\000\000\000\
\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\133\000\133\000\000\000\133\000\133\000\
\133\000\133\000\133\000\133\000\133\000\133\000\000\000\137\000\
\000\000\134\000\137\000\000\000\137\000\134\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\000\
\134\000\000\000\134\000\134\000\134\000\134\000\134\000\134\000\
\134\000\134\000\133\000\000\000\000\000\133\000\000\000\133\000\
\150\000\150\000\000\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\000\000\
\000\000\134\000\000\000\134\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\150\000\102\000\150\000\150\000"

let yycheck = "\001\000\
\010\000\171\000\004\000\106\000\040\000\040\000\186\000\004\001\
\076\000\108\000\177\000\004\001\173\000\004\001\010\001\245\000\
\004\001\004\001\004\001\001\000\008\001\008\001\004\001\007\001\
\108\000\186\000\006\001\007\001\034\001\041\000\032\000\018\001\
\019\001\006\001\007\001\037\000\247\000\010\000\040\000\051\000\
\052\000\053\000\001\000\055\000\056\000\006\001\007\001\146\000\
\006\001\007\001\032\000\004\001\057\001\001\000\050\001\008\001\
\040\001\069\000\049\000\095\000\095\000\035\001\146\000\060\001\
\050\001\018\001\075\000\058\001\077\000\062\001\057\001\044\000\
\045\000\060\001\062\001\062\001\000\001\238\000\054\001\057\001\
\062\001\061\001\117\000\063\001\032\000\043\001\064\001\078\000\
\061\001\044\001\063\001\103\000\056\001\095\000\106\000\000\001\
\108\000\058\001\033\001\111\000\058\001\113\000\076\001\047\001\
\057\001\117\000\142\000\060\001\056\001\062\001\061\001\123\000\
\148\000\050\001\062\001\125\000\118\000\050\001\153\000\121\000\
\093\000\061\001\033\001\063\001\223\000\046\000\061\001\048\000\
\063\001\062\001\051\000\006\001\007\001\004\001\146\000\108\000\
\005\001\008\001\031\001\032\001\142\000\153\000\050\001\057\001\
\117\000\180\000\148\000\120\000\056\001\122\000\064\001\124\000\
\125\000\126\000\127\000\128\000\129\000\130\000\131\000\132\000\
\133\000\134\000\135\000\136\000\137\000\047\001\139\000\140\000\
\180\000\181\000\179\000\064\001\007\001\146\000\056\001\051\000\
\188\000\018\001\053\001\026\001\153\000\190\000\044\001\195\000\
\029\001\030\001\057\001\108\000\050\001\060\001\111\000\062\001\
\113\000\046\000\041\001\019\001\117\000\170\000\051\000\057\001\
\058\001\108\000\123\000\008\001\177\000\136\000\137\000\180\000\
\139\000\052\001\117\000\004\001\060\001\025\001\062\001\005\001\
\088\000\252\000\090\000\091\000\060\001\223\000\234\000\062\001\
\059\001\146\000\061\001\060\001\063\001\062\001\043\001\051\000\
\153\000\008\001\246\000\111\000\048\001\049\001\004\001\146\000\
\252\000\113\000\027\001\028\001\008\001\254\000\153\000\123\000\
\004\001\006\001\007\001\253\000\225\000\004\001\227\000\176\000\
\058\001\178\000\046\001\180\000\013\001\009\001\008\001\236\000\
\020\001\005\001\078\001\188\000\006\001\007\001\026\001\050\001\
\245\000\180\000\195\000\031\001\004\001\250\000\090\001\252\000\
\092\001\008\001\255\000\006\001\007\001\041\001\106\000\006\001\
\007\001\101\001\162\000\111\000\071\001\113\000\050\001\004\001\
\052\001\004\001\170\000\008\001\132\000\133\000\008\001\123\000\
\005\001\022\001\004\001\053\001\004\001\018\001\019\001\008\001\
\188\000\234\000\041\000\071\001\033\001\038\001\035\001\195\000\
\007\001\074\001\194\000\007\001\051\000\197\000\007\001\199\000\
\200\000\054\001\055\001\252\000\005\001\050\001\059\001\052\001\
\061\001\093\001\063\001\004\001\134\000\135\000\069\000\005\001\
\008\001\252\000\218\000\004\001\057\001\007\001\096\001\060\001\
\008\001\062\001\071\001\020\001\008\001\007\001\234\000\076\001\
\232\000\008\001\041\001\004\001\029\001\008\001\031\001\008\001\
\188\000\008\001\008\001\007\001\037\001\002\001\003\001\195\000\
\103\000\018\001\019\001\106\000\008\001\034\001\011\001\012\001\
\111\000\050\001\113\000\052\001\034\001\008\001\004\001\020\001\
\060\001\062\001\008\001\008\001\123\000\008\001\008\001\050\001\
\020\001\052\001\062\001\008\001\018\001\019\001\071\001\036\001\
\037\001\038\001\039\001\031\001\008\001\057\001\234\000\008\001\
\057\001\062\001\047\001\060\001\071\001\062\001\062\001\008\001\
\057\001\054\001\060\001\056\001\054\001\055\001\059\001\047\001\
\061\001\059\001\063\001\061\001\062\001\063\001\062\001\062\001\
\004\001\008\001\032\000\057\001\003\001\061\001\060\001\004\001\
\062\001\120\000\240\000\029\001\022\001\238\000\181\000\037\001\
\020\001\078\000\009\001\033\001\219\000\188\000\013\001\014\001\
\015\001\016\001\017\001\031\001\195\000\116\000\006\001\089\001\
\076\001\000\001\001\001\002\001\003\001\000\001\103\001\071\001\
\007\001\153\000\004\001\099\001\011\001\012\001\008\001\096\000\
\097\000\098\000\099\000\100\000\101\000\020\001\004\001\225\000\
\018\001\019\001\008\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\234\000\018\001\036\001\037\001\038\001\
\039\001\040\001\124\000\042\001\043\001\227\000\045\001\046\001\
\047\001\048\001\049\001\255\255\051\001\052\001\255\255\054\001\
\255\255\056\001\255\255\255\255\059\001\004\001\061\001\057\001\
\063\001\255\255\060\001\255\255\062\001\126\000\127\000\128\000\
\129\000\130\000\131\000\057\001\255\255\020\001\060\001\255\255\
\062\001\255\255\255\255\026\001\001\001\002\001\003\001\004\001\
\031\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\041\001\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\038\001\039\001\040\001\255\255\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\054\001\255\255\056\001\057\001\255\255\059\001\060\001\
\061\001\062\001\063\001\064\001\001\001\002\001\003\001\255\255\
\255\255\006\001\007\001\255\255\255\255\255\255\011\001\012\001\
\255\255\255\255\004\001\255\255\255\255\255\255\008\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\255\255\255\255\255\255\034\001\255\255\036\001\
\037\001\038\001\039\001\040\001\255\255\042\001\043\001\255\255\
\045\001\046\001\047\001\048\001\049\001\255\255\051\001\052\001\
\255\255\054\001\255\255\056\001\057\001\255\255\059\001\255\255\
\061\001\255\255\063\001\001\001\002\001\003\001\255\255\057\001\
\006\001\007\001\060\001\255\255\062\001\011\001\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\255\255\034\001\255\255\036\001\037\001\
\038\001\039\001\040\001\255\255\042\001\043\001\255\255\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\255\255\
\054\001\255\255\056\001\255\255\255\255\059\001\255\255\061\001\
\255\255\063\001\001\001\002\001\003\001\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\011\001\012\001\255\255\255\255\
\004\001\255\255\255\255\255\255\008\001\020\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\255\255\255\255\255\255\034\001\255\255\036\001\037\001\038\001\
\039\001\040\001\255\255\042\001\043\001\255\255\045\001\046\001\
\047\001\048\001\049\001\255\255\051\001\052\001\255\255\054\001\
\255\255\056\001\255\255\255\255\059\001\255\255\061\001\255\255\
\063\001\001\001\002\001\003\001\255\255\057\001\255\255\007\001\
\060\001\255\255\062\001\011\001\012\001\255\255\004\001\255\255\
\255\255\255\255\008\001\255\255\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\255\255\042\001\043\001\255\255\045\001\046\001\047\001\
\048\001\049\001\255\255\051\001\052\001\255\255\054\001\255\255\
\056\001\255\255\255\255\059\001\255\255\061\001\255\255\063\001\
\001\001\002\001\003\001\057\001\255\255\255\255\060\001\255\255\
\062\001\255\255\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001\255\255\036\001\037\001\038\001\039\001\040\001\
\255\255\042\001\043\001\255\255\045\001\046\001\047\001\048\001\
\049\001\255\255\051\001\052\001\255\255\054\001\255\255\056\001\
\255\255\255\255\059\001\255\255\061\001\255\255\063\001\001\001\
\002\001\003\001\255\255\255\255\255\255\007\001\255\255\004\001\
\255\255\011\001\012\001\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\018\001\019\001\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\036\001\037\001\038\001\039\001\040\001\255\255\
\042\001\043\001\255\255\045\001\255\255\047\001\002\001\003\001\
\255\255\051\001\255\255\255\255\054\001\255\255\056\001\011\001\
\012\001\059\001\255\255\061\001\057\001\063\001\255\255\060\001\
\255\255\062\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\003\001\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\011\001\012\001\255\255\002\001\
\003\001\255\255\255\255\047\001\255\255\255\255\255\255\255\255\
\011\001\012\001\054\001\255\255\056\001\255\255\255\255\059\001\
\255\255\061\001\255\255\063\001\255\255\036\001\037\001\038\001\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\036\001\037\001\038\001\039\001\255\255\255\255\054\001\
\255\255\056\001\255\255\255\255\255\255\255\255\061\001\255\255\
\063\001\255\255\004\001\054\001\255\255\056\001\008\001\009\001\
\010\001\255\255\061\001\255\255\063\001\255\255\255\255\255\255\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\044\001\255\255\255\255\255\255\255\255\255\255\
\050\001\255\255\004\001\255\255\255\255\255\255\008\001\057\001\
\010\001\255\255\060\001\061\001\062\001\063\001\064\001\255\255\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\044\001\255\255\255\255\255\255\255\255\255\255\
\050\001\004\001\005\001\255\255\255\255\008\001\255\255\057\001\
\255\255\255\255\060\001\061\001\062\001\063\001\064\001\018\001\
\019\001\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\050\001\
\004\001\255\255\255\255\255\255\008\001\255\255\057\001\255\255\
\255\255\060\001\061\001\062\001\063\001\064\001\018\001\019\001\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\001\
\255\255\255\255\255\255\008\001\255\255\057\001\255\255\255\255\
\060\001\061\001\062\001\063\001\064\001\018\001\019\001\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\050\001\004\001\255\255\
\255\255\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\061\001\255\255\063\001\064\001\018\001\019\001\004\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\018\001\019\001\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\255\255\060\001\255\255\
\062\001\255\255\064\001\255\255\255\255\004\001\255\255\255\255\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\063\001\064\001\018\001\019\001\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\004\001\255\255\255\255\255\255\008\001\255\255\
\255\255\255\255\057\001\255\255\255\255\060\001\255\255\062\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\004\001\255\255\255\255\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\057\001\
\255\255\004\001\060\001\255\255\062\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\057\001\255\255\255\255\060\001\255\255\062\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\255\255\
\255\255\060\001\255\255\062\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\062\001\063\001\064\001"

let yynames_const = "\
  KW_return\000\
  KW_true\000\
  KW_false\000\
  SYMB8\000\
  SYMB9\000\
  SYMB10\000\
  SYMB11\000\
  SYMB12\000\
  SYMB13\000\
  SYMB14\000\
  SYMB15\000\
  SYMB16\000\
  SYMB17\000\
  SYMB18\000\
  SYMB19\000\
  SYMB20\000\
  SYMB21\000\
  SYMB22\000\
  SYMB23\000\
  SYMB24\000\
  SYMB25\000\
  SYMB26\000\
  SYMB27\000\
  SYMB28\000\
  SYMB29\000\
  SYMB30\000\
  SYMB31\000\
  SYMB32\000\
  SYMB33\000\
  SYMB34\000\
  SYMB35\000\
  SYMB36\000\
  SYMB38\000\
  TOK_EOF\000\
  "

let yynames_block = "\
  TOK_Ident\000\
  TOK_Char\000\
  TOK_Double\000\
  TOK_Integer\000\
  TOK_String\000\
  TOK_IF\000\
  TOK_ELSE\000\
  TOK_WHILE\000\
  TOK_FOR\000\
  TOK_IN\000\
  TOK_LET\000\
  TOK_FUN\000\
  TOK_MUT\000\
  TOK_INTERFACE\000\
  TOK_IMPL\000\
  TOK_AS\000\
  TOK_MATCH\000\
  TOK_TYPE\000\
  TOK_EXTENDS\000\
  TOK_TypeId\000\
  TOK_BaseType\000\
  TOK_VarId\000\
  TOK_SColon\000\
  TOK_Arrow\000\
  TOK_LBrack\000\
  TOK_RBrack\000\
  TOK_LParen\000\
  TOK_RParen\000\
  TOK_Unit\000\
  TOK_Mod\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'code_list) in
    Obj.repr(
# 79 "ParDeeplang.mly"
                               ( _1 )
# 837 "ParDeeplang.ml"
               : AbsDeeplang.code list))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 843 "ParDeeplang.ml"
               : AbsDeeplang.code list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'code) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'code_list) in
    Obj.repr(
# 83 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _2) )
# 851 "ParDeeplang.ml"
               : 'code_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'code) in
    Obj.repr(
# 84 "ParDeeplang.mly"
         ( (fun x -> [x]) _1 )
# 858 "ParDeeplang.ml"
               : 'code_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "ParDeeplang.mly"
                ( [] )
# 864 "ParDeeplang.ml"
               : 'code_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declare) in
    Obj.repr(
# 88 "ParDeeplang.mly"
               ( Declares _1 )
# 871 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'define) in
    Obj.repr(
# 89 "ParDeeplang.mly"
           ( Defines _1 )
# 878 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 90 "ParDeeplang.mly"
              ( Statements _1 )
# 885 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sCOLON) in
    Obj.repr(
# 91 "ParDeeplang.mly"
                      ( Expressions _1 )
# 893 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "ParDeeplang.mly"
                ( Unit  )
# 899 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lBRACK) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeT) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'sCOLON) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'rBRACK) in
    Obj.repr(
# 95 "ParDeeplang.mly"
                                       ( {span = (Parsing.symbol_start_pos (), Parsing.symbol_start_pos ()); typeTShape = TypeFixLenArray (_2, _4)} )
# 910 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeT) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'aRROW) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 96 "ParDeeplang.mly"
                      ( {span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()); typeTShape = TypeArrow (_1, _3)} )
# 919 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 97 "ParDeeplang.mly"
         ( {span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()); typeTShape = TypeUnit} )
# 926 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 98 "ParDeeplang.mly"
                  ( {span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()); typeTShape = TypeUnit} )
# 934 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeT_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 99 "ParDeeplang.mly"
                             ( {span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()); typeTShape = TypeTuple _2} )
# 943 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'baseType) in
    Obj.repr(
# 100 "ParDeeplang.mly"
             ( {span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()); typeTShape = TypePrimitive _1} )
# 950 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 101 "ParDeeplang.mly"
           ( {span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typeTShape = TypeX _1} )
# 957 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 104 "ParDeeplang.mly"
                   ( (fun x -> [x]) _1 )
# 964 "ParDeeplang.ml"
               : 'typeT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT_list) in
    Obj.repr(
# 105 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 972 "ParDeeplang.ml"
               : 'typeT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 108 "ParDeeplang.mly"
                   ( (fun x -> [x]) _1 )
# 979 "ParDeeplang.ml"
               : 'varId_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varId_list) in
    Obj.repr(
# 109 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 987 "ParDeeplang.ml"
               : 'varId_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mUT) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 112 "ParDeeplang.mly"
                   ( {span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; mVarIdShape = (true, _2)} )
# 995 "ParDeeplang.ml"
               : 'mVarId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 113 "ParDeeplang.mly"
          ( {span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; mVarIdShape = (false, _1)} )
# 1002 "ParDeeplang.ml"
               : 'mVarId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'retType) in
    Obj.repr(
# 116 "ParDeeplang.mly"
                                 ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; declareShape = DecFunc (_1, _2, _3, _4) } )
# 1012 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'iNTERFACE) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'methods) in
    Obj.repr(
# 117 "ParDeeplang.mly"
                                    ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; declareShape = InterfaceNoExt (_1, _2, _3) } )
# 1021 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'iNTERFACE) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'eXTENDS) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'interfaceName_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'methods) in
    Obj.repr(
# 118 "ParDeeplang.mly"
                                                               ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; declareShape = InterfaceExt (_1, _2, _4, _5) } )
# 1032 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 121 "ParDeeplang.mly"
                     ( ArgUnit )
# 1040 "ParDeeplang.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 122 "ParDeeplang.mly"
         ( ArgUnit )
# 1047 "ParDeeplang.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arg_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 123 "ParDeeplang.mly"
                           ( ArgExist _2 )
# 1056 "ParDeeplang.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 126 "ParDeeplang.mly"
                        ( ArgCons (_1, _3) )
# 1064 "ParDeeplang.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 129 "ParDeeplang.mly"
               ( (fun x -> [x]) _1 )
# 1071 "ParDeeplang.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arg_list) in
    Obj.repr(
# 130 "ParDeeplang.mly"
                       ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1079 "ParDeeplang.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "ParDeeplang.mly"
                      ( RetUnit  )
# 1085 "ParDeeplang.ml"
               : 'retType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aRROW) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 134 "ParDeeplang.mly"
                ( RetExist _2 )
# 1093 "ParDeeplang.ml"
               : 'retType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 137 "ParDeeplang.mly"
                       ( InterfaceNames _1 )
# 1100 "ParDeeplang.ml"
               : 'interfaceName))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'interfaceName) in
    Obj.repr(
# 140 "ParDeeplang.mly"
                                   ( (fun x -> [x]) _1 )
# 1107 "ParDeeplang.ml"
               : 'interfaceName_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'interfaceName_list) in
    Obj.repr(
# 141 "ParDeeplang.mly"
                                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1115 "ParDeeplang.ml"
               : 'interfaceName_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "ParDeeplang.mly"
                 ( [] )
# 1121 "ParDeeplang.ml"
               : 'methods))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'methodT_list) in
    Obj.repr(
# 145 "ParDeeplang.mly"
                               ( _2 )
# 1128 "ParDeeplang.ml"
               : 'methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'retType) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'sCOLON) in
    Obj.repr(
# 148 "ParDeeplang.mly"
                                        ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; methodShape = (_1, _2, _3, _4) } )
# 1139 "ParDeeplang.ml"
               : 'methodT))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "ParDeeplang.mly"
                           ( []  )
# 1145 "ParDeeplang.ml"
               : 'methodT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'methodT) in
    Obj.repr(
# 152 "ParDeeplang.mly"
            ( (fun x -> [x]) _1 )
# 1152 "ParDeeplang.ml"
               : 'methodT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'methodT) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'methodT_list) in
    Obj.repr(
# 153 "ParDeeplang.mly"
                         ( (fun (x,xs) -> x::xs) (_1, _2) )
# 1160 "ParDeeplang.ml"
               : 'methodT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functionT) in
    Obj.repr(
# 156 "ParDeeplang.mly"
                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; defineShape = DefFunc _1 } )
# 1167 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lBRACK) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'constructor_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'rBRACK) in
    Obj.repr(
# 157 "ParDeeplang.mly"
                                               ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; defineShape = ADT (_1, _2, _4) } )
# 1178 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'structField_list) in
    Obj.repr(
# 158 "ParDeeplang.mly"
                                               ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; defineShape = Struct (_1, _2, _4) } )
# 1187 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lET) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'mutFlag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typedMatcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'rHS) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'sCOLON) in
    Obj.repr(
# 159 "ParDeeplang.mly"
                                        ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; defineShape = DefVar (_1, _2, _3, _4) } )
# 1198 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'sCOLON) in
    Obj.repr(
# 160 "ParDeeplang.mly"
                            ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; defineShape = DefType (_1, _2, _3) } )
# 1208 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'iMPL) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fOR) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typeT) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'functions) in
    Obj.repr(
# 161 "ParDeeplang.mly"
                                           ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; defineShape = InterfaceImpl (_1, _2, _3, _4, _5) } )
# 1219 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'iMPL) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'functions) in
    Obj.repr(
# 162 "ParDeeplang.mly"
                         ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; defineShape = RawImpl (_1, _2, _3) } )
# 1228 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'retType) in
    Obj.repr(
# 165 "ParDeeplang.mly"
                                          ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; functionShape = (_1, _2, _3, _4, []) } )
# 1238 "ParDeeplang.ml"
               : 'functionT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'retType) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 166 "ParDeeplang.mly"
                                                        ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; functionShape = (_1, _2, _3, _4, _6) } )
# 1249 "ParDeeplang.ml"
               : 'functionT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 169 "ParDeeplang.mly"
                     ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; constructorShape = (_1, []) } )
# 1256 "ParDeeplang.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 170 "ParDeeplang.mly"
                                    ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; constructorShape = (_1, _3) } )
# 1266 "ParDeeplang.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor) in
    Obj.repr(
# 173 "ParDeeplang.mly"
                               ( (fun x -> [x]) _1 )
# 1273 "ParDeeplang.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constructor) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_list) in
    Obj.repr(
# 174 "ParDeeplang.mly"
                                       ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1281 "ParDeeplang.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 177 "ParDeeplang.mly"
                          ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; fieldShape = (_1, _3) } )
# 1289 "ParDeeplang.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 180 "ParDeeplang.mly"
                   ( (fun x -> [x]) _1 )
# 1296 "ParDeeplang.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_list) in
    Obj.repr(
# 181 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1304 "ParDeeplang.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 184 "ParDeeplang.mly"
                    ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; structFieldShape = (false, _1) } )
# 1311 "ParDeeplang.ml"
               : 'structField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aS) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 185 "ParDeeplang.mly"
             ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; structFieldShape = (true, _2) } )
# 1319 "ParDeeplang.ml"
               : 'structField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'structField) in
    Obj.repr(
# 188 "ParDeeplang.mly"
                               ( (fun x -> [x]) _1 )
# 1326 "ParDeeplang.ml"
               : 'structField_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'structField) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'structField_list) in
    Obj.repr(
# 189 "ParDeeplang.mly"
                                       ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1334 "ParDeeplang.ml"
               : 'structField_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 192 "ParDeeplang.mly"
                        ( DefRHS _2 )
# 1341 "ParDeeplang.ml"
               : 'rHS))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "ParDeeplang.mly"
                ( NilRHS  )
# 1347 "ParDeeplang.ml"
               : 'rHS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mUT) in
    Obj.repr(
# 196 "ParDeeplang.mly"
              ( true )
# 1354 "ParDeeplang.ml"
               : 'mutFlag))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "ParDeeplang.mly"
                ( false  )
# 1360 "ParDeeplang.ml"
               : 'mutFlag))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "ParDeeplang.mly"
                   ( [] )
# 1366 "ParDeeplang.ml"
               : 'functions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'functionT_list) in
    Obj.repr(
# 201 "ParDeeplang.mly"
                                 ( _2 )
# 1373 "ParDeeplang.ml"
               : 'functions))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "ParDeeplang.mly"
                             ( []  )
# 1379 "ParDeeplang.ml"
               : 'functionT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functionT) in
    Obj.repr(
# 205 "ParDeeplang.mly"
              ( (fun x -> [x]) _1 )
# 1386 "ParDeeplang.ml"
               : 'functionT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'functionT) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'functionT_list) in
    Obj.repr(
# 206 "ParDeeplang.mly"
                             ( (fun (x,xs) -> x::xs) (_1, _2) )
# 1394 "ParDeeplang.ml"
               : 'functionT_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 209 "ParDeeplang.mly"
                                         ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; statementShape = Block _2 } )
# 1401 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lET) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'mutFlag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typedMatcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'rHS) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'sCOLON) in
    Obj.repr(
# 210 "ParDeeplang.mly"
                                        ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; statementShape = DefVarSt (_1, _2, _3, _4) } )
# 1412 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'sCOLON) in
    Obj.repr(
# 211 "ParDeeplang.mly"
                      ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; statementShape = ExprSt _1 } )
# 1420 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sCOLON) in
    Obj.repr(
# 212 "ParDeeplang.mly"
                                ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; statementShape = Return _2 } )
# 1428 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'iF) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'rPAREN) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elseBody) in
    Obj.repr(
# 213 "ParDeeplang.mly"
                                                                      ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; statementShape = If (_1, _3, _6, _8) } )
# 1440 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'fOR) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'matcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'iN) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'rPAREN) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 214 "ParDeeplang.mly"
                                                                         ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; statementShape = For (_1, _3, _4, _5, _8) } )
# 1453 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'wHILE) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'rPAREN) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 215 "ParDeeplang.mly"
                                                                ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; statementShape = While (_1, _3, _6) } )
# 1464 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'mATCH) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'varId) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'rPAREN) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'matchCase_list) in
    Obj.repr(
# 216 "ParDeeplang.mly"
                                                           ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; statementShape = Match (_1, _3, _6) } )
# 1475 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 219 "ParDeeplang.mly"
                           ( (fun x -> [x]) _1 )
# 1482 "ParDeeplang.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 220 "ParDeeplang.mly"
                             ( (fun (x,xs) -> x::xs) (_1, _2) )
# 1490 "ParDeeplang.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "ParDeeplang.mly"
                ( [] )
# 1496 "ParDeeplang.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "ParDeeplang.mly"
                       ( [] )
# 1502 "ParDeeplang.ml"
               : 'elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'eLSE) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'iF) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'lPAREN) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'rPAREN) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'elseBody) in
    Obj.repr(
# 225 "ParDeeplang.mly"
                                                                           ( [{ span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; statementShape = If (_2, _4, _7, _9) }] )
# 1515 "ParDeeplang.ml"
               : 'elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'eLSE) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 226 "ParDeeplang.mly"
                                      ( _3 )
# 1523 "ParDeeplang.ml"
               : 'elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'matcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 229 "ParDeeplang.mly"
                                                        ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; matchCaseShape = (_1, _4) } )
# 1531 "ParDeeplang.ml"
               : 'matchCase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedMatcher) in
    Obj.repr(
# 232 "ParDeeplang.mly"
                       ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; matcherShape = TypedMatchers _1 } )
# 1538 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typelessMatcher) in
    Obj.repr(
# 233 "ParDeeplang.mly"
                    ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; matcherShape = TypelessMatchers _1 } )
# 1545 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matcher) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'aS) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mVarId) in
    Obj.repr(
# 234 "ParDeeplang.mly"
                      ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; matcherShape = AsVarMatch (_1, _2, _3) } )
# 1554 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typelessMatcher) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 237 "ParDeeplang.mly"
                                           ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typedMatcherShape = (_1, _3) } )
# 1562 "ParDeeplang.ml"
               : 'typedMatcher))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "ParDeeplang.mly"
                         ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typelessMatcherShape = WildCardMatch } )
# 1568 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 241 "ParDeeplang.mly"
                ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typelessMatcherShape = ConsMatchUnit _1 } )
# 1576 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'matcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 242 "ParDeeplang.mly"
                                 ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typelessMatcherShape = ConsMatch (_1, _3) } )
# 1586 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mVarId) in
    Obj.repr(
# 243 "ParDeeplang.mly"
           ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typelessMatcherShape = TypelessVarMatch _1 } )
# 1593 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 244 "ParDeeplang.mly"
         ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typelessMatcherShape = TupleMatch [] } )
# 1600 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'matcher_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 245 "ParDeeplang.mly"
                               ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typelessMatcherShape = TupleMatch _2 } )
# 1609 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 246 "ParDeeplang.mly"
            ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typelessMatcherShape = LiteralMatch _1 } )
# 1616 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    Obj.repr(
# 247 "ParDeeplang.mly"
                  ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typelessMatcherShape = FieldMatch (_1, []) } )
# 1623 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fieldMatcher_list) in
    Obj.repr(
# 248 "ParDeeplang.mly"
                                           ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; typelessMatcherShape = FieldMatch (_1, _3) } )
# 1631 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    Obj.repr(
# 251 "ParDeeplang.mly"
                           ( []  )
# 1637 "ParDeeplang.ml"
               : 'matcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matcher) in
    Obj.repr(
# 252 "ParDeeplang.mly"
            ( (fun x -> [x]) _1 )
# 1644 "ParDeeplang.ml"
               : 'matcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matcher) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matcher_list) in
    Obj.repr(
# 253 "ParDeeplang.mly"
                               ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1652 "ParDeeplang.ml"
               : 'matcher_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "ParDeeplang.mly"
                                ( [] )
# 1658 "ParDeeplang.ml"
               : 'fieldMatcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fieldMatcher) in
    Obj.repr(
# 257 "ParDeeplang.mly"
                 ( (fun x -> [x]) _1 )
# 1665 "ParDeeplang.ml"
               : 'fieldMatcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fieldMatcher) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fieldMatcher_list) in
    Obj.repr(
# 258 "ParDeeplang.mly"
                                         ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1673 "ParDeeplang.ml"
               : 'fieldMatcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typelessMatcher) in
    Obj.repr(
# 261 "ParDeeplang.mly"
                                           ( (_1, _3) )
# 1681 "ParDeeplang.ml"
               : 'fieldMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matchCase) in
    Obj.repr(
# 264 "ParDeeplang.mly"
                           ( (fun x -> [x]) _1 )
# 1688 "ParDeeplang.ml"
               : 'matchCase_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'matchCase) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'matchCase_list) in
    Obj.repr(
# 265 "ParDeeplang.mly"
                             ( (fun (x,xs) -> x::xs) (_1, _2) )
# 1696 "ParDeeplang.ml"
               : 'matchCase_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 268 "ParDeeplang.mly"
                         ( _1 )
# 1703 "ParDeeplang.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression2) in
    Obj.repr(
# 271 "ParDeeplang.mly"
                          ( _1 )
# 1710 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 272 "ParDeeplang.mly"
                             ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpAssignment (_1, _3) } )
# 1718 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 273 "ParDeeplang.mly"
                             ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpAssignmentPlus (_1, _3) } )
# 1726 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 274 "ParDeeplang.mly"
                             ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpAssignmentMinus (_1, _3) } )
# 1734 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 275 "ParDeeplang.mly"
                             ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpAssignmentMul (_1, _3) } )
# 1742 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 276 "ParDeeplang.mly"
                             ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpAssignmentDiv (_1, _3) } )
# 1750 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 277 "ParDeeplang.mly"
                             ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpAssignmentMod (_1, _3) } )
# 1758 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression3) in
    Obj.repr(
# 280 "ParDeeplang.mly"
                          ( _1 )
# 1765 "ParDeeplang.ml"
               : 'expression2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression3) in
    Obj.repr(
# 281 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpLogicalOr (_1, _3) } )
# 1773 "ParDeeplang.ml"
               : 'expression2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression4) in
    Obj.repr(
# 284 "ParDeeplang.mly"
                          ( _1 )
# 1780 "ParDeeplang.ml"
               : 'expression3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression4) in
    Obj.repr(
# 285 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpLogicalAnd (_1, _3) } )
# 1788 "ParDeeplang.ml"
               : 'expression3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression5) in
    Obj.repr(
# 288 "ParDeeplang.mly"
                          ( _1 )
# 1795 "ParDeeplang.ml"
               : 'expression4))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression4) in
    Obj.repr(
# 289 "ParDeeplang.mly"
                       ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpLogicalNot _2 } )
# 1802 "ParDeeplang.ml"
               : 'expression4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression6) in
    Obj.repr(
# 292 "ParDeeplang.mly"
                          ( _1 )
# 1809 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 293 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpLt (_1, _3) } )
# 1817 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 294 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpLeq (_1, _3) } )
# 1825 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 295 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpGt (_1, _3) } )
# 1833 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 296 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpGeq (_1, _3) } )
# 1841 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 299 "ParDeeplang.mly"
                          ( _1 )
# 1848 "ParDeeplang.ml"
               : 'expression6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 300 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpEq (_1, _3) } )
# 1856 "ParDeeplang.ml"
               : 'expression6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 301 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpNoteq (_1, _3) } )
# 1864 "ParDeeplang.ml"
               : 'expression6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression8) in
    Obj.repr(
# 304 "ParDeeplang.mly"
                          ( _1 )
# 1871 "ParDeeplang.ml"
               : 'expression7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression8) in
    Obj.repr(
# 305 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpLeftShift (_1, _3) } )
# 1879 "ParDeeplang.ml"
               : 'expression7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression8) in
    Obj.repr(
# 306 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpRightShift (_1, _3) } )
# 1887 "ParDeeplang.ml"
               : 'expression7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression9) in
    Obj.repr(
# 309 "ParDeeplang.mly"
                          ( _1 )
# 1894 "ParDeeplang.ml"
               : 'expression8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression8) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression9) in
    Obj.repr(
# 310 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpAdd (_1, _3) } )
# 1902 "ParDeeplang.ml"
               : 'expression8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression8) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression9) in
    Obj.repr(
# 311 "ParDeeplang.mly"
                                   ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpSub (_1, _3) } )
# 1910 "ParDeeplang.ml"
               : 'expression8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 314 "ParDeeplang.mly"
                           ( _1 )
# 1917 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression9) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 315 "ParDeeplang.mly"
                                    ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpMul (_1, _3) } )
# 1925 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression9) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 316 "ParDeeplang.mly"
                                    ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpDiv (_1, _3) } )
# 1933 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression9) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mOD) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 317 "ParDeeplang.mly"
                                 ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpMod (_1, _3) } )
# 1942 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression11) in
    Obj.repr(
# 320 "ParDeeplang.mly"
                            ( _1 )
# 1949 "ParDeeplang.ml"
               : 'expression10))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression12) in
    Obj.repr(
# 323 "ParDeeplang.mly"
                            ( _1 )
# 1956 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression11) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 324 "ParDeeplang.mly"
                                               ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpApp (_1, _3) } )
# 1966 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression11) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 325 "ParDeeplang.mly"
                      ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ;expressionShape = ExpAppUnit _1 } )
# 1974 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 326 "ParDeeplang.mly"
                                         ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpNewObj (_1, _3) } )
# 1984 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 327 "ParDeeplang.mly"
                ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpNewObjUnit _1 } )
# 1992 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression11) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 328 "ParDeeplang.mly"
                              ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpMethod (_1, _3) } )
# 2000 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression13) in
    Obj.repr(
# 331 "ParDeeplang.mly"
                            ( _1 )
# 2007 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matcher) in
    Obj.repr(
# 332 "ParDeeplang.mly"
            ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpVar _1 } )
# 2014 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 333 "ParDeeplang.mly"
            ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = Literals _1 } )
# 2021 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 334 "ParDeeplang.mly"
                                  ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = Tuples _2 } )
# 2030 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lBRACK) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rBRACK) in
    Obj.repr(
# 335 "ParDeeplang.mly"
                                  ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = Array _2 } )
# 2039 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fieldInit_list) in
    Obj.repr(
# 336 "ParDeeplang.mly"
                                        ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = StructInit (_1, _3) } )
# 2047 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 339 "ParDeeplang.mly"
                                        ( _2 )
# 2056 "ParDeeplang.ml"
               : 'expression13))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 340 "ParDeeplang.mly"
                             ( { span = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ()) ; expressionShape = ExpBracket _2 } )
# 2065 "ParDeeplang.ml"
               : 'expression13))
; (fun __caml_parser_env ->
    Obj.repr(
# 343 "ParDeeplang.mly"
                              ( [] )
# 2071 "ParDeeplang.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 344 "ParDeeplang.mly"
               ( (fun x -> [x]) _1 )
# 2078 "ParDeeplang.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 345 "ParDeeplang.mly"
                                     ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2086 "ParDeeplang.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'string) in
    Obj.repr(
# 348 "ParDeeplang.mly"
                 ( String _1 )
# 2093 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'char) in
    Obj.repr(
# 349 "ParDeeplang.mly"
         ( Char _1 )
# 2100 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'int) in
    Obj.repr(
# 350 "ParDeeplang.mly"
        ( Integer _1 )
# 2107 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'float) in
    Obj.repr(
# 351 "ParDeeplang.mly"
          ( Float _1 )
# 2114 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 352 "ParDeeplang.mly"
            ( True )
# 2120 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 353 "ParDeeplang.mly"
             ( False )
# 2126 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 354 "ParDeeplang.mly"
         ( LUnit )
# 2133 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 355 "ParDeeplang.mly"
           ( AUnit )
# 2139 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fieldInit) in
    Obj.repr(
# 358 "ParDeeplang.mly"
                           ( (fun x -> [x]) _1 )
# 2146 "ParDeeplang.ml"
               : 'fieldInit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fieldInit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fieldInit_list) in
    Obj.repr(
# 359 "ParDeeplang.mly"
                                   ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2154 "ParDeeplang.ml"
               : 'fieldInit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 362 "ParDeeplang.mly"
                                   ( FieldInitCons (_1, _3) )
# 2162 "ParDeeplang.ml"
               : 'fieldInit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 366 "ParDeeplang.mly"
                ( _1 )
# 2169 "ParDeeplang.ml"
               : 'char))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 367 "ParDeeplang.mly"
                    ( _1 )
# 2176 "ParDeeplang.ml"
               : 'float))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 368 "ParDeeplang.mly"
                    ( _1 )
# 2183 "ParDeeplang.ml"
               : 'int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 369 "ParDeeplang.mly"
                    ( _1 )
# 2190 "ParDeeplang.ml"
               : 'string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 370 "ParDeeplang.mly"
            ( IF (_1))
# 2197 "ParDeeplang.ml"
               : 'iF))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 371 "ParDeeplang.mly"
                ( ELSE (_1))
# 2204 "ParDeeplang.ml"
               : 'eLSE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 372 "ParDeeplang.mly"
                  ( WHILE (_1))
# 2211 "ParDeeplang.ml"
               : 'wHILE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 373 "ParDeeplang.mly"
              ( FOR (_1))
# 2218 "ParDeeplang.ml"
               : 'fOR))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 374 "ParDeeplang.mly"
            ( IN (_1))
# 2225 "ParDeeplang.ml"
               : 'iN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 375 "ParDeeplang.mly"
              ( LET (_1))
# 2232 "ParDeeplang.ml"
               : 'lET))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 376 "ParDeeplang.mly"
              ( FUN (_1))
# 2239 "ParDeeplang.ml"
               : 'fUN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 377 "ParDeeplang.mly"
              ( MUT (_1))
# 2246 "ParDeeplang.ml"
               : 'mUT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 378 "ParDeeplang.mly"
                          ( INTERFACE (_1))
# 2253 "ParDeeplang.ml"
               : 'iNTERFACE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 379 "ParDeeplang.mly"
                ( IMPL (_1))
# 2260 "ParDeeplang.ml"
               : 'iMPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 380 "ParDeeplang.mly"
            ( AS (_1))
# 2267 "ParDeeplang.ml"
               : 'aS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 381 "ParDeeplang.mly"
                  ( MATCH (_1))
# 2274 "ParDeeplang.ml"
               : 'mATCH))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 382 "ParDeeplang.mly"
                ( TYPE (_1))
# 2281 "ParDeeplang.ml"
               : 'tYPE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 383 "ParDeeplang.mly"
                      ( EXTENDS (_1))
# 2288 "ParDeeplang.ml"
               : 'eXTENDS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 384 "ParDeeplang.mly"
                    ( TypeId (_1))
# 2295 "ParDeeplang.ml"
               : 'typeId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 385 "ParDeeplang.mly"
                        ( BaseType (_1))
# 2302 "ParDeeplang.ml"
               : 'baseType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 386 "ParDeeplang.mly"
                  ( VarId (_1))
# 2309 "ParDeeplang.ml"
               : 'varId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 387 "ParDeeplang.mly"
                    ( SYMBOL (_1))
# 2316 "ParDeeplang.ml"
               : 'sCOLON))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 388 "ParDeeplang.mly"
                  ( SYMBOL (_1))
# 2323 "ParDeeplang.ml"
               : 'aRROW))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 389 "ParDeeplang.mly"
                    ( SYMBOL (_1) )
# 2330 "ParDeeplang.ml"
               : 'lBRACK))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 390 "ParDeeplang.mly"
                    ( SYMBOL (_1) )
# 2337 "ParDeeplang.ml"
               : 'rBRACK))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 391 "ParDeeplang.mly"
                    ( SYMBOL (_1) )
# 2344 "ParDeeplang.ml"
               : 'lPAREN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 392 "ParDeeplang.mly"
                    ( SYMBOL (_1) )
# 2351 "ParDeeplang.ml"
               : 'rPAREN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 393 "ParDeeplang.mly"
                ( SYMBOL (_1) )
# 2358 "ParDeeplang.ml"
               : 'uNIT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 394 "ParDeeplang.mly"
              ( SYMBOL (_1) )
# 2365 "ParDeeplang.ml"
               : 'mOD))
(* Entry pCode_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let pCode_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : AbsDeeplang.code list)
