type token =
  | KW_return
  | KW_true
  | KW_false
  | SYMB1
  | SYMB4
  | SYMB8
  | SYMB9
  | SYMB10
  | SYMB11
  | SYMB12
  | SYMB13
  | SYMB14
  | SYMB15
  | SYMB16
  | SYMB17
  | SYMB18
  | SYMB19
  | SYMB20
  | SYMB21
  | SYMB22
  | SYMB23
  | SYMB24
  | SYMB25
  | SYMB26
  | SYMB27
  | SYMB28
  | SYMB29
  | SYMB30
  | SYMB31
  | SYMB32
  | SYMB33
  | SYMB34
  | SYMB35
  | SYMB36
  | SYMB38
  | TOK_EOF
  | TOK_Ident of (string)
  | TOK_Char of (char)
  | TOK_Double of (float)
  | TOK_Integer of (int)
  | TOK_String of (string)
  | TOK_IF of ((int * int) * string)
  | TOK_ELSE of ((int * int) * string)
  | TOK_WHILE of ((int * int) * string)
  | TOK_FOR of ((int * int) * string)
  | TOK_IN of ((int * int) * string)
  | TOK_LET of ((int * int) * string)
  | TOK_FUN of ((int * int) * string)
  | TOK_MUT of ((int * int) * string)
  | TOK_INTERFACE of ((int * int) * string)
  | TOK_IMPL of ((int * int) * string)
  | TOK_AS of ((int * int) * string)
  | TOK_MATCH of ((int * int) * string)
  | TOK_TYPE of ((int * int) * string)
  | TOK_EXTENDS of ((int * int) * string)
  | TOK_TypeId of ((int * int) * string)
  | TOK_BaseType of ((int * int) * string)
  | TOK_VarId of ((int * int) * string)
  | TOK_LBrack of ((int * int) * string)
  | TOK_RBrack of ((int * int) * string)
  | TOK_LParen of ((int * int) * string)
  | TOK_RParen of ((int * int) * string)
  | TOK_Unit of ((int * int) * string)
  | TOK_Mod of ((int * int) * string)

open Parsing;;
let _ = parse_error;;
# 3 "ParDeeplang.mly"
open AbsDeeplang
open Lexing


# 75 "ParDeeplang.ml"
let yytransl_const = [|
  257 (* KW_return *);
  258 (* KW_true *);
  259 (* KW_false *);
  260 (* SYMB1 *);
  261 (* SYMB4 *);
  262 (* SYMB8 *);
  263 (* SYMB9 *);
  264 (* SYMB10 *);
  265 (* SYMB11 *);
  266 (* SYMB12 *);
  267 (* SYMB13 *);
  268 (* SYMB14 *);
  269 (* SYMB15 *);
  270 (* SYMB16 *);
  271 (* SYMB17 *);
  272 (* SYMB18 *);
  273 (* SYMB19 *);
  274 (* SYMB20 *);
  275 (* SYMB21 *);
  276 (* SYMB22 *);
  277 (* SYMB23 *);
  278 (* SYMB24 *);
  279 (* SYMB25 *);
  280 (* SYMB26 *);
  281 (* SYMB27 *);
  282 (* SYMB28 *);
  283 (* SYMB29 *);
  284 (* SYMB30 *);
  285 (* SYMB31 *);
  286 (* SYMB32 *);
  287 (* SYMB33 *);
  288 (* SYMB34 *);
  289 (* SYMB35 *);
  290 (* SYMB36 *);
  291 (* SYMB38 *);
  292 (* TOK_EOF *);
    0|]

let yytransl_block = [|
  293 (* TOK_Ident *);
  294 (* TOK_Char *);
  295 (* TOK_Double *);
  296 (* TOK_Integer *);
  297 (* TOK_String *);
  298 (* TOK_IF *);
  299 (* TOK_ELSE *);
  300 (* TOK_WHILE *);
  301 (* TOK_FOR *);
  302 (* TOK_IN *);
  303 (* TOK_LET *);
  304 (* TOK_FUN *);
  305 (* TOK_MUT *);
  306 (* TOK_INTERFACE *);
  307 (* TOK_IMPL *);
  308 (* TOK_AS *);
  309 (* TOK_MATCH *);
  310 (* TOK_TYPE *);
  311 (* TOK_EXTENDS *);
  312 (* TOK_TypeId *);
  313 (* TOK_BaseType *);
  314 (* TOK_VarId *);
  315 (* TOK_LBrack *);
  316 (* TOK_RBrack *);
  317 (* TOK_LParen *);
  318 (* TOK_RParen *);
  319 (* TOK_Unit *);
  320 (* TOK_Mod *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\015\000\015\000\018\000\018\000\020\000\020\000\004\000\
\004\000\004\000\023\000\023\000\023\000\031\000\030\000\030\000\
\024\000\024\000\026\000\029\000\029\000\027\000\027\000\033\000\
\033\000\032\000\032\000\032\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\035\000\035\000\046\000\046\000\037\000\
\037\000\048\000\047\000\047\000\049\000\049\000\038\000\038\000\
\042\000\042\000\040\000\040\000\045\000\045\000\051\000\051\000\
\051\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\034\000\034\000\053\000\053\000\053\000\058\000\061\000\
\054\000\054\000\054\000\041\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\063\000\063\000\063\000\
\065\000\065\000\065\000\066\000\060\000\060\000\007\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\068\000\068\000\
\069\000\069\000\070\000\070\000\071\000\071\000\071\000\071\000\
\071\000\072\000\072\000\072\000\073\000\073\000\073\000\074\000\
\074\000\074\000\075\000\075\000\075\000\075\000\076\000\078\000\
\078\000\078\000\078\000\078\000\078\000\079\000\079\000\079\000\
\079\000\079\000\079\000\081\000\081\000\080\000\080\000\080\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\082\000\082\000\086\000\084\000\085\000\010\000\083\000\052\000\
\059\000\056\000\044\000\055\000\039\000\022\000\021\000\025\000\
\043\000\050\000\057\000\036\000\028\000\017\000\016\000\019\000\
\009\000\011\000\013\000\014\000\012\000\077\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\001\000\000\000\001\000\001\000\001\000\
\002\000\000\000\005\000\003\000\001\000\002\000\003\000\001\000\
\001\000\001\000\003\000\001\000\003\000\002\000\001\000\004\000\
\003\000\005\000\002\000\001\000\003\000\003\000\001\000\003\000\
\000\000\002\000\001\000\001\000\003\000\001\000\003\000\005\000\
\007\000\000\000\001\000\002\000\001\000\005\000\005\000\005\000\
\004\000\005\000\003\000\005\000\007\000\001\000\004\000\001\000\
\003\000\003\000\001\000\003\000\001\000\002\000\001\000\003\000\
\002\000\000\000\001\000\000\000\001\000\003\000\000\000\001\000\
\002\000\003\000\005\000\002\000\003\000\008\000\009\000\007\000\
\007\000\001\000\002\000\000\000\009\000\004\000\001\000\005\000\
\001\000\001\000\003\000\003\000\001\000\002\000\004\000\001\000\
\001\000\003\000\001\000\002\000\004\000\000\000\001\000\003\000\
\000\000\001\000\003\000\003\000\001\000\002\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\003\000\
\001\000\003\000\001\000\002\000\001\000\003\000\003\000\003\000\
\003\000\001\000\003\000\003\000\001\000\003\000\003\000\001\000\
\003\000\003\000\001\000\003\000\003\000\003\000\001\000\001\000\
\004\000\002\000\004\000\002\000\003\000\001\000\001\000\001\000\
\003\000\003\000\004\000\003\000\003\000\000\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\000\000\165\000\166\000\000\000\093\000\
\168\000\000\000\172\000\173\000\174\000\175\000\176\000\178\000\
\179\000\181\000\182\000\183\000\184\000\185\000\187\000\188\000\
\190\000\192\000\193\000\195\000\197\000\199\000\000\000\000\000\
\006\000\007\000\008\000\000\000\000\000\163\000\097\000\000\000\
\000\000\000\000\096\000\000\000\000\000\000\000\045\000\000\000\
\000\000\089\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\099\000\111\000\000\000\000\000\121\000\123\000\125\000\
\000\000\000\000\000\000\139\000\000\000\144\000\150\000\161\000\
\162\000\164\000\000\000\000\000\000\000\000\000\000\000\023\000\
\124\000\001\000\003\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\100\000\000\000\094\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\035\000\000\000\
\000\000\067\000\000\000\191\000\000\000\000\000\013\000\000\000\
\016\000\000\000\000\000\000\000\000\000\186\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\198\000\000\000\000\000\146\000\000\000\077\000\083\000\076\000\
\074\000\000\000\000\000\194\000\154\000\196\000\156\000\000\000\
\098\000\153\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\113\000\114\000\115\000\116\000\117\000\118\000\028\000\
\000\000\000\000\038\000\000\000\189\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\099\000\000\000\
\069\000\000\000\051\000\000\000\017\000\000\000\014\000\000\000\
\000\000\000\000\000\000\091\000\000\000\000\000\000\000\000\000\
\122\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\140\000\141\000\142\000\149\000\000\000\
\000\000\160\000\000\000\104\000\000\000\101\000\000\000\155\000\
\000\000\095\000\147\000\027\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\000\000\000\000\000\000\000\000\000\000\049\000\000\000\
\094\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\180\000\000\000\000\000\000\000\
\000\000\145\000\000\000\171\000\000\000\000\000\107\000\000\000\
\170\000\000\000\029\000\000\000\000\000\052\000\000\000\000\000\
\039\000\044\000\000\000\026\000\000\000\047\000\000\000\062\000\
\000\000\046\000\000\000\000\000\065\000\048\000\000\000\073\000\
\070\000\000\000\019\000\050\000\000\000\000\000\000\000\000\000\
\075\000\000\000\000\000\000\000\032\000\000\000\000\000\037\000\
\000\000\064\000\000\000\000\000\057\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\087\000\000\000\108\000\053\000\
\000\000\055\000\000\000\000\000\000\000\000\000\080\000\000\000\
\081\000\110\000\040\000\000\000\060\000\000\000\177\000\078\000\
\000\000\000\000\000\000\079\000\000\000\000\000\000\000\041\000\
\000\000\000\000\088\000\086\000\000\000\000\000\000\000\000\000\
\000\000\085\000"

let yydgoto = "\002\000\
\030\000\031\000\032\000\033\000\034\000\076\000\077\000\190\000\
\037\000\038\000\149\000\039\000\040\000\226\000\192\000\113\000\
\041\000\000\000\042\000\043\000\044\000\045\000\170\000\233\000\
\046\000\237\000\174\000\175\000\238\000\230\000\231\000\235\000\
\236\000\078\000\047\000\048\000\245\000\240\000\079\000\107\000\
\050\000\252\000\051\000\052\000\187\000\246\000\059\001\241\000\
\242\000\119\000\000\001\053\000\088\001\054\000\006\001\055\000\
\056\000\068\001\089\001\069\001\070\001\057\000\089\000\058\000\
\156\000\157\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\138\000\069\000\070\000\086\000\
\071\000\158\000\072\000\073\000\074\000\159\000"

let yysindex = "\120\000\
\115\001\000\000\000\000\140\000\000\000\000\000\237\002\000\000\
\000\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\129\255\111\002\
\000\000\000\000\000\000\168\255\140\000\000\000\000\000\140\000\
\082\255\036\000\000\000\131\255\131\255\136\255\000\000\136\255\
\135\255\000\000\229\000\134\255\134\255\149\255\134\255\134\255\
\199\255\000\000\000\000\208\255\222\255\000\000\000\000\000\000\
\208\000\078\255\069\255\000\000\147\255\000\000\000\000\000\000\
\000\000\000\000\005\000\237\002\007\000\004\000\135\255\000\000\
\000\000\000\000\000\000\000\000\021\000\225\255\014\255\049\255\
\227\255\227\255\000\000\131\255\000\000\140\000\140\000\140\000\
\140\000\140\000\140\000\140\000\000\000\230\254\000\000\044\255\
\007\255\000\000\033\003\000\000\214\255\229\000\000\000\107\000\
\000\000\000\000\242\255\033\003\140\000\000\000\037\255\140\000\
\131\255\229\000\140\000\140\000\212\000\212\000\212\000\212\000\
\212\000\212\000\212\000\212\000\212\000\212\000\212\000\212\000\
\000\000\212\000\131\255\000\000\140\000\000\000\000\000\000\000\
\000\000\033\003\140\000\000\000\000\000\000\000\000\000\033\003\
\000\000\000\000\029\000\024\000\033\000\025\000\034\000\046\255\
\227\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\080\255\037\000\000\000\253\255\000\000\000\000\136\255\048\255\
\136\255\052\000\033\003\120\255\051\000\199\255\000\000\229\000\
\000\000\253\255\000\000\126\255\000\000\172\255\000\000\227\255\
\229\000\061\255\227\255\000\000\227\255\227\255\068\000\222\255\
\000\000\188\255\188\255\188\255\188\255\188\255\188\255\078\255\
\078\255\069\255\069\255\000\000\000\000\000\000\000\000\227\255\
\051\000\000\000\049\255\000\000\140\000\000\000\131\255\000\000\
\131\255\000\000\000\000\000\000\057\000\227\255\075\000\229\000\
\223\255\131\255\064\000\253\255\090\000\237\255\092\000\094\000\
\000\000\095\000\131\255\134\255\225\255\101\000\000\000\131\255\
\000\000\033\003\140\000\105\000\068\000\131\255\253\255\102\000\
\078\000\229\000\000\000\214\255\000\000\140\000\106\000\116\000\
\117\000\000\000\123\000\000\000\199\255\125\000\000\000\127\000\
\000\000\229\000\000\000\131\255\068\000\000\000\237\002\230\254\
\000\000\000\000\136\255\000\000\229\000\000\000\048\255\000\000\
\131\255\000\000\136\255\046\255\000\000\000\000\230\254\000\000\
\000\000\225\255\000\000\000\000\227\255\237\002\237\002\033\003\
\000\000\033\003\140\000\068\000\000\000\119\000\037\000\000\000\
\068\000\000\000\227\255\124\000\000\000\037\000\000\000\128\000\
\129\000\130\000\009\255\135\000\000\000\033\003\000\000\000\000\
\053\255\000\000\131\255\223\255\237\002\103\000\000\000\138\000\
\000\000\000\000\000\000\237\002\000\000\142\000\000\000\000\000\
\033\255\237\002\145\000\000\000\237\002\134\255\149\000\000\000\
\150\000\140\000\000\000\000\000\227\255\148\000\237\002\151\000\
\103\000\000\000"

let yyrindex = "\000\000\
\115\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\000\
\000\000\000\000\000\000\000\000\112\000\000\000\000\000\121\000\
\000\000\194\003\000\000\000\000\000\000\000\000\000\000\000\000\
\046\003\000\000\000\000\000\000\000\000\239\003\000\000\000\000\
\147\003\000\000\000\000\023\255\254\255\000\000\000\000\000\000\
\165\255\020\255\062\000\000\000\028\004\000\000\000\000\000\000\
\000\000\000\000\000\000\164\000\000\000\000\000\046\003\000\000\
\000\000\000\000\000\000\000\000\164\255\000\000\000\000\249\004\
\000\000\000\000\000\000\174\000\000\000\154\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\185\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\154\000\000\000\000\000\000\000\
\000\000\000\000\179\255\000\000\000\000\000\000\000\000\121\000\
\000\000\000\000\000\000\000\000\175\000\000\000\177\000\089\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\241\001\000\000\182\000\000\000\000\000\000\000\000\000\
\000\000\000\000\121\000\000\000\189\000\000\000\000\000\000\000\
\000\000\190\000\000\000\000\000\000\000\156\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\102\003\141\001\
\000\000\059\000\096\000\184\000\203\000\239\000\128\001\206\004\
\234\004\134\004\177\004\000\000\000\000\000\000\000\000\000\000\
\189\000\000\000\158\000\000\000\000\000\000\000\174\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\159\000\000\000\
\174\002\000\000\000\000\182\000\239\255\000\000\000\000\000\000\
\000\000\192\000\000\000\011\255\000\000\152\000\000\000\174\000\
\000\000\000\000\000\000\000\000\050\001\000\000\190\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\073\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\178\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\255\000\000\000\000\128\255\000\000\
\012\255\000\000\000\000\160\000\000\000\247\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\198\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\002\000\000"

let yygindex = "\000\000\
\000\000\179\001\000\000\000\000\000\000\027\000\255\255\012\000\
\211\255\226\000\045\255\026\001\147\000\176\255\227\000\000\000\
\254\000\000\000\028\000\109\001\045\000\089\255\152\255\042\255\
\000\000\122\000\001\001\000\000\213\000\222\000\000\000\011\001\
\000\000\191\255\085\255\000\000\219\000\224\000\091\000\183\001\
\174\255\040\001\000\000\149\001\006\001\000\000\194\000\021\255\
\000\000\094\255\012\001\185\000\171\000\218\255\000\000\000\000\
\000\000\000\000\000\000\207\000\000\000\161\255\126\001\063\000\
\056\001\000\000\198\001\000\000\157\001\003\000\000\000\000\000\
\014\002\141\000\146\000\098\000\000\000\000\000\000\000\220\255\
\000\000\057\001\000\000\000\000\000\000\000\000"

let yytablesize = 1593
let yytable = "\036\000\
\178\000\088\000\075\000\090\000\234\000\110\000\151\000\032\001\
\153\000\154\000\143\000\182\000\081\000\243\000\255\000\176\000\
\054\000\058\000\254\000\147\000\080\001\058\000\030\000\133\000\
\181\000\133\000\112\000\035\000\112\000\133\000\036\000\191\000\
\112\000\034\001\028\000\085\000\029\000\080\000\087\000\133\000\
\133\000\093\001\133\000\133\000\133\000\133\000\133\000\133\000\
\133\000\133\000\182\000\171\000\172\000\060\001\152\000\160\000\
\083\001\161\000\035\000\177\000\118\000\084\001\109\000\217\000\
\110\000\027\000\110\000\028\000\234\000\029\000\054\000\101\000\
\102\000\058\000\015\000\150\000\110\000\194\000\030\000\133\000\
\227\000\133\000\112\000\255\000\112\000\020\000\063\001\254\000\
\228\000\091\000\092\000\049\000\085\000\106\000\026\000\060\001\
\073\001\118\000\173\000\118\000\118\000\135\000\136\000\076\001\
\216\000\026\000\005\001\150\000\133\000\134\000\218\000\003\001\
\118\000\219\000\007\001\195\000\008\001\009\001\197\000\155\000\
\001\000\188\000\049\000\106\000\243\000\013\001\201\000\091\000\
\248\000\001\001\184\000\033\000\137\000\199\000\080\000\010\001\
\033\000\026\000\110\000\085\000\219\000\150\000\028\000\080\000\
\029\000\085\000\080\000\110\000\198\000\019\001\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\082\000\080\000\215\000\104\000\
\130\000\183\000\130\000\084\000\115\000\080\000\130\000\055\001\
\184\000\002\001\183\000\080\000\028\000\139\000\029\000\020\000\
\130\000\130\000\110\000\094\000\026\000\017\000\062\001\025\000\
\017\000\017\000\028\000\253\000\229\000\112\000\116\000\117\000\
\118\000\120\000\121\000\239\000\004\001\122\000\080\000\028\000\
\183\000\029\000\071\001\036\001\110\000\054\001\183\000\141\000\
\131\000\132\000\184\000\012\001\064\001\185\000\186\000\159\000\
\130\000\159\000\130\000\123\000\110\000\035\000\022\001\023\001\
\212\000\213\000\074\001\214\000\065\001\066\001\158\000\110\000\
\158\000\183\000\124\000\021\001\171\000\172\000\036\000\036\000\
\169\000\037\001\014\001\169\000\016\001\179\000\033\000\033\000\
\112\000\119\000\112\000\119\000\045\001\024\001\179\000\119\000\
\142\000\067\001\144\000\086\001\112\000\145\000\239\000\208\000\
\209\000\119\000\091\001\014\001\102\001\080\000\210\000\211\000\
\095\001\039\001\147\000\097\001\148\000\052\001\017\000\067\001\
\150\000\222\000\224\000\221\000\179\000\104\001\223\000\225\000\
\057\001\232\000\179\000\103\000\019\000\105\000\095\000\229\000\
\114\000\012\001\096\000\097\000\098\000\099\000\100\000\247\000\
\183\000\119\000\239\000\119\000\239\000\251\000\126\000\018\001\
\126\000\136\000\093\000\136\000\126\000\179\000\250\000\136\000\
\184\000\025\001\112\000\080\000\111\000\080\000\126\000\126\000\
\020\001\136\000\136\000\112\000\136\000\136\000\136\000\136\000\
\136\000\136\000\136\000\136\000\136\000\136\000\140\000\027\001\
\101\001\080\000\029\001\127\000\031\001\127\000\239\000\030\001\
\180\000\127\000\035\001\189\000\038\001\189\000\183\000\041\001\
\183\000\180\000\046\001\127\000\127\000\013\000\126\000\189\000\
\126\000\136\000\112\000\136\000\047\001\048\001\049\001\168\000\
\072\001\075\001\168\000\050\001\183\000\051\001\033\001\111\000\
\077\001\111\000\078\001\079\001\179\000\005\000\006\000\180\000\
\081\001\087\001\090\001\111\000\112\000\180\000\005\000\092\001\
\008\000\009\000\096\001\127\000\103\001\127\000\099\001\100\001\
\105\001\010\000\025\000\108\000\112\000\027\000\004\000\028\000\
\150\000\029\000\169\000\158\000\103\000\082\000\244\000\112\000\
\180\000\011\000\012\000\013\000\014\000\189\000\102\000\105\000\
\106\000\169\000\169\000\128\000\020\000\128\000\189\000\042\000\
\066\000\128\000\179\000\025\000\179\000\026\000\027\000\071\000\
\028\000\063\000\029\000\128\000\128\000\249\000\129\000\109\000\
\129\000\111\000\083\000\056\000\129\000\005\000\006\000\158\000\
\179\000\018\000\111\000\103\000\031\000\059\000\129\000\129\000\
\008\000\009\000\042\001\196\000\043\001\189\000\125\000\126\000\
\127\000\128\000\129\000\130\000\131\000\132\000\028\001\056\001\
\098\001\053\001\131\000\128\000\131\000\128\000\026\001\180\000\
\131\000\011\000\012\000\013\000\014\000\061\001\058\001\189\000\
\011\001\111\000\131\000\131\000\020\000\146\000\129\000\193\000\
\129\000\044\001\040\001\025\000\085\001\026\000\027\000\189\000\
\028\000\094\001\029\000\106\001\082\001\220\000\015\001\200\000\
\103\000\017\001\189\000\111\000\025\000\108\000\000\000\027\000\
\244\000\028\000\000\000\029\000\162\000\163\000\164\000\165\000\
\166\000\167\000\131\000\111\000\131\000\180\000\000\000\180\000\
\000\000\168\000\012\000\012\000\012\000\012\000\111\000\012\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\168\000\000\000\000\000\180\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\
\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\012\000\000\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\003\000\004\000\005\000\006\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\008\000\
\009\000\000\000\000\000\132\000\000\000\132\000\000\000\000\000\
\010\000\132\000\202\000\203\000\204\000\205\000\206\000\207\000\
\120\000\000\000\120\000\132\000\132\000\000\000\120\000\000\000\
\011\000\012\000\013\000\014\000\015\000\000\000\016\000\017\000\
\120\000\018\000\019\000\020\000\021\000\022\000\000\000\023\000\
\024\000\000\000\025\000\000\000\026\000\027\000\000\000\028\000\
\000\000\029\000\034\000\034\000\034\000\034\000\000\000\000\000\
\000\000\034\000\034\000\132\000\000\000\132\000\034\000\034\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\120\000\000\000\120\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\000\000\000\034\000\
\034\000\034\000\034\000\034\000\000\000\034\000\034\000\000\000\
\034\000\034\000\034\000\034\000\034\000\000\000\034\000\034\000\
\000\000\034\000\000\000\034\000\034\000\000\000\034\000\000\000\
\034\000\033\000\033\000\033\000\000\000\000\000\000\000\000\000\
\033\000\033\000\000\000\000\000\000\000\033\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\033\000\033\000\
\033\000\033\000\033\000\000\000\033\000\033\000\000\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\033\000\000\000\
\033\000\000\000\033\000\033\000\000\000\033\000\000\000\033\000\
\084\000\084\000\084\000\000\000\000\000\000\000\000\000\000\000\
\084\000\084\000\000\000\000\000\084\000\084\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\084\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\000\000\000\084\000\084\000\084\000\
\084\000\084\000\000\000\084\000\084\000\000\000\084\000\084\000\
\084\000\084\000\084\000\000\000\084\000\084\000\000\000\084\000\
\000\000\084\000\084\000\000\000\084\000\000\000\084\000\004\000\
\005\000\006\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\012\000\013\000\014\000\
\015\000\000\000\016\000\017\000\000\000\018\000\019\000\020\000\
\021\000\022\000\000\000\023\000\024\000\000\000\025\000\000\000\
\026\000\027\000\000\000\028\000\000\000\029\000\024\000\024\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\024\000\000\000\024\000\024\000\024\000\024\000\
\024\000\000\000\024\000\024\000\000\000\024\000\000\000\024\000\
\024\000\000\000\024\000\000\000\024\000\004\000\005\000\006\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\008\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\012\000\013\000\014\000\015\000\000\000\
\016\000\017\000\000\000\018\000\000\000\020\000\000\000\000\000\
\000\000\023\000\005\000\006\000\025\000\000\000\026\000\027\000\
\000\000\028\000\000\000\029\000\000\000\008\000\009\000\068\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\012\000\
\013\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\068\000\068\000\068\000\068\000\000\000\
\025\000\000\000\026\000\000\000\000\000\028\000\000\000\029\000\
\000\000\000\000\000\000\000\000\000\000\068\000\000\000\068\000\
\000\000\092\000\068\000\092\000\068\000\000\000\000\000\092\000\
\092\000\092\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\092\000\092\000\000\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\092\000\000\000\000\000\090\000\000\000\
\090\000\092\000\000\000\000\000\090\000\000\000\090\000\000\000\
\000\000\092\000\092\000\092\000\092\000\092\000\090\000\090\000\
\000\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\090\000\000\000\000\000\000\000\000\000\023\000\090\000\023\000\
\023\000\000\000\000\000\023\000\000\000\000\000\090\000\090\000\
\090\000\090\000\090\000\000\000\000\000\023\000\023\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\151\000\000\000\151\000\023\000\000\000\000\000\
\151\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
\023\000\023\000\151\000\151\000\000\000\151\000\151\000\151\000\
\151\000\151\000\151\000\151\000\151\000\151\000\151\000\151\000\
\151\000\151\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\
\000\000\143\000\000\000\000\000\000\000\143\000\000\000\000\000\
\000\000\000\000\151\000\151\000\151\000\151\000\151\000\143\000\
\143\000\000\000\143\000\143\000\143\000\143\000\143\000\143\000\
\143\000\143\000\143\000\143\000\143\000\143\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\090\000\000\000\
\000\000\000\000\090\000\000\000\000\000\000\000\000\000\143\000\
\000\000\143\000\000\000\143\000\090\000\090\000\151\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\151\000\151\000\000\000\151\000\
\151\000\151\000\151\000\151\000\151\000\151\000\151\000\151\000\
\151\000\151\000\151\000\151\000\090\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\090\000\000\000\090\000\
\090\000\137\000\000\000\137\000\000\000\000\000\000\000\137\000\
\000\000\000\000\000\000\000\000\000\000\151\000\000\000\151\000\
\151\000\137\000\137\000\000\000\137\000\137\000\137\000\137\000\
\137\000\137\000\137\000\137\000\137\000\137\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\138\000\000\000\138\000\000\000\
\000\000\000\000\138\000\000\000\000\000\000\000\000\000\000\000\
\000\000\137\000\000\000\137\000\138\000\138\000\000\000\138\000\
\138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
\138\000\134\000\000\000\134\000\000\000\000\000\000\000\134\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\134\000\134\000\000\000\134\000\134\000\134\000\134\000\
\134\000\134\000\134\000\134\000\138\000\135\000\138\000\135\000\
\000\000\000\000\000\000\135\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\135\000\135\000\000\000\
\135\000\135\000\135\000\135\000\135\000\135\000\135\000\135\000\
\000\000\134\000\000\000\134\000\151\000\151\000\000\000\151\000\
\151\000\151\000\151\000\151\000\151\000\151\000\151\000\151\000\
\151\000\151\000\151\000\151\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\135\000\000\000\135\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\151\000\103\000\151\000\
\151\000"

let yycheck = "\001\000\
\105\000\040\000\004\000\040\000\172\000\051\000\087\000\243\000\
\089\000\090\000\076\000\107\000\010\000\176\000\186\000\009\001\
\006\001\006\001\186\000\006\001\012\001\010\001\006\001\004\001\
\107\000\006\001\004\001\001\000\006\001\010\001\032\000\112\000\
\010\001\245\000\061\001\037\000\063\001\010\000\040\000\020\001\
\021\001\009\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\146\000\008\001\009\001\033\001\006\001\094\000\
\004\001\094\000\032\000\105\000\052\001\009\001\051\000\146\000\
\110\000\059\001\112\000\061\001\236\000\063\001\060\001\044\000\
\045\000\062\001\042\001\062\001\122\000\116\000\062\001\060\001\
\161\000\062\001\060\001\255\000\062\001\049\001\042\001\255\000\
\169\000\008\001\009\001\001\000\094\000\049\000\058\001\075\001\
\055\001\052\001\055\001\052\001\052\001\033\001\034\001\062\001\
\141\000\058\001\046\001\062\001\031\001\032\001\147\000\192\000\
\052\001\152\000\195\000\117\000\197\000\198\000\120\000\092\000\
\001\000\110\000\032\000\079\000\031\001\221\000\124\000\008\001\
\009\001\004\001\005\001\004\001\064\001\122\000\107\000\216\000\
\009\001\058\001\184\000\141\000\179\000\062\001\061\001\116\000\
\063\001\147\000\119\000\193\000\121\000\230\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\130\000\131\000\132\000\
\133\000\134\000\135\000\136\000\036\001\138\000\139\000\046\000\
\004\001\107\000\006\001\004\001\051\000\146\000\010\001\024\001\
\005\001\006\001\116\000\152\000\061\001\035\001\063\001\049\001\
\020\001\021\001\232\000\041\000\058\001\005\001\039\001\056\001\
\008\001\009\001\061\001\184\000\169\000\051\000\052\000\053\000\
\052\001\055\000\056\000\176\000\193\000\007\001\179\000\061\001\
\146\000\063\001\050\001\250\000\002\001\023\001\152\000\069\000\
\029\001\030\001\005\001\221\000\045\001\008\001\009\001\060\001\
\060\001\062\001\062\001\020\001\018\001\045\001\008\001\009\001\
\135\000\136\000\059\001\138\000\046\001\047\001\060\001\029\001\
\062\001\179\000\021\001\232\000\008\001\009\001\008\001\009\001\
\102\000\251\000\223\000\105\000\225\000\107\000\008\001\009\001\
\110\000\004\001\112\000\006\001\006\001\234\000\116\000\010\001\
\004\001\048\001\004\001\077\001\122\000\010\001\243\000\131\000\
\132\000\020\001\084\001\248\000\101\001\250\000\133\000\134\000\
\090\001\254\000\006\001\093\001\060\001\018\001\045\001\070\001\
\062\001\010\001\010\001\007\001\146\000\103\001\006\001\006\001\
\029\001\005\001\152\000\046\000\048\001\048\000\011\001\020\001\
\051\000\051\001\015\001\016\001\017\001\018\001\019\001\004\001\
\250\000\060\001\031\001\062\001\033\001\011\001\004\001\007\001\
\006\001\004\001\041\000\006\001\010\001\179\000\180\000\010\001\
\005\001\010\001\184\000\048\001\051\000\050\001\020\001\021\001\
\006\001\020\001\021\001\193\000\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\069\000\006\001\
\098\001\070\001\007\001\004\001\006\001\006\001\075\001\010\001\
\107\000\010\001\006\001\110\000\004\001\112\000\048\001\010\001\
\050\001\116\000\009\001\020\001\021\001\040\001\060\001\122\000\
\062\001\060\001\232\000\062\001\009\001\009\001\004\001\102\000\
\010\001\006\001\105\000\007\001\070\001\007\001\244\000\110\000\
\009\001\112\000\010\001\010\001\250\000\002\001\003\001\146\000\
\010\001\043\001\009\001\122\000\002\001\152\000\036\001\010\001\
\013\001\014\001\010\001\060\001\009\001\062\001\010\001\010\001\
\010\001\022\001\056\001\057\001\018\001\059\001\036\001\061\001\
\062\001\063\001\024\001\060\001\175\000\010\001\177\000\029\001\
\179\000\038\001\039\001\040\001\041\001\184\000\062\001\010\001\
\010\001\039\001\010\001\004\001\049\001\006\001\193\000\010\001\
\004\001\010\001\048\001\056\001\050\001\058\001\059\001\010\001\
\061\001\010\001\063\001\020\001\021\001\180\000\004\001\010\001\
\006\001\184\000\032\000\060\001\010\001\002\001\003\001\062\001\
\070\001\062\001\193\000\062\001\062\001\062\001\020\001\021\001\
\013\001\014\001\001\001\119\000\002\001\232\000\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\238\000\027\001\
\094\001\020\001\004\001\060\001\006\001\062\001\236\000\250\000\
\010\001\038\001\039\001\040\001\041\001\035\001\031\001\002\001\
\217\000\232\000\020\001\021\001\049\001\079\000\060\001\115\000\
\062\001\004\001\255\000\056\001\075\001\058\001\059\001\018\001\
\061\001\089\001\063\001\105\001\070\001\152\000\223\000\123\000\
\027\001\225\000\029\001\002\001\056\001\057\001\255\255\059\001\
\035\001\061\001\255\255\063\001\095\000\096\000\097\000\098\000\
\099\000\100\000\060\001\018\001\062\001\048\001\255\255\050\001\
\255\255\024\001\001\001\002\001\003\001\004\001\029\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\039\001\255\255\255\255\070\001\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\038\001\
\039\001\040\001\041\001\042\001\255\255\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\255\255\056\001\255\255\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\000\001\001\001\002\001\003\001\255\255\255\255\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\013\001\
\014\001\255\255\255\255\004\001\255\255\006\001\255\255\255\255\
\022\001\010\001\125\000\126\000\127\000\128\000\129\000\130\000\
\004\001\255\255\006\001\020\001\021\001\255\255\010\001\255\255\
\038\001\039\001\040\001\041\001\042\001\255\255\044\001\045\001\
\020\001\047\001\048\001\049\001\050\001\051\001\255\255\053\001\
\054\001\255\255\056\001\255\255\058\001\059\001\255\255\061\001\
\255\255\063\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\008\001\009\001\060\001\255\255\062\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\060\001\255\255\062\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\255\255\038\001\
\039\001\040\001\041\001\042\001\255\255\044\001\045\001\255\255\
\047\001\048\001\049\001\050\001\051\001\255\255\053\001\054\001\
\255\255\056\001\255\255\058\001\059\001\255\255\061\001\255\255\
\063\001\001\001\002\001\003\001\255\255\255\255\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\044\001\045\001\255\255\047\001\
\048\001\049\001\050\001\051\001\255\255\053\001\054\001\255\255\
\056\001\255\255\058\001\059\001\255\255\061\001\255\255\063\001\
\001\001\002\001\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\255\255\038\001\039\001\040\001\
\041\001\042\001\255\255\044\001\045\001\255\255\047\001\048\001\
\049\001\050\001\051\001\255\255\053\001\054\001\255\255\056\001\
\255\255\058\001\059\001\255\255\061\001\255\255\063\001\001\001\
\002\001\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\255\255\044\001\045\001\255\255\047\001\048\001\049\001\
\050\001\051\001\255\255\053\001\054\001\255\255\056\001\255\255\
\058\001\059\001\255\255\061\001\255\255\063\001\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\255\255\038\001\039\001\040\001\041\001\042\001\
\255\255\044\001\045\001\255\255\047\001\048\001\049\001\050\001\
\051\001\255\255\053\001\054\001\255\255\056\001\255\255\058\001\
\059\001\255\255\061\001\255\255\063\001\001\001\002\001\003\001\
\255\255\255\255\255\255\255\255\255\255\009\001\255\255\255\255\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\255\255\
\044\001\045\001\255\255\047\001\255\255\049\001\255\255\255\255\
\255\255\053\001\002\001\003\001\056\001\255\255\058\001\059\001\
\255\255\061\001\255\255\063\001\255\255\013\001\014\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\255\255\038\001\039\001\040\001\041\001\255\255\
\056\001\255\255\058\001\255\255\255\255\061\001\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\056\001\255\255\058\001\
\255\255\004\001\061\001\006\001\063\001\255\255\255\255\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\255\255\255\255\004\001\255\255\
\006\001\052\001\255\255\255\255\010\001\255\255\012\001\255\255\
\255\255\060\001\061\001\062\001\063\001\064\001\020\001\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\046\001\255\255\255\255\255\255\255\255\004\001\052\001\006\001\
\007\001\255\255\255\255\010\001\255\255\255\255\060\001\061\001\
\062\001\063\001\064\001\255\255\255\255\020\001\021\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\004\001\255\255\006\001\052\001\255\255\255\255\
\010\001\255\255\255\255\255\255\255\255\060\001\061\001\062\001\
\063\001\064\001\020\001\021\001\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\001\
\255\255\006\001\255\255\255\255\255\255\010\001\255\255\255\255\
\255\255\255\255\060\001\061\001\062\001\063\001\064\001\020\001\
\021\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\060\001\
\255\255\062\001\255\255\064\001\020\001\021\001\006\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\052\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\063\001\
\064\001\004\001\255\255\006\001\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\063\001\
\064\001\020\001\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\255\255\006\001\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\255\255\062\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\004\001\255\255\006\001\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\060\001\004\001\062\001\006\001\
\255\255\255\255\255\255\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\060\001\255\255\062\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\255\255\062\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\062\001\063\001\
\064\001"

let yynames_const = "\
  KW_return\000\
  KW_true\000\
  KW_false\000\
  SYMB1\000\
  SYMB4\000\
  SYMB8\000\
  SYMB9\000\
  SYMB10\000\
  SYMB11\000\
  SYMB12\000\
  SYMB13\000\
  SYMB14\000\
  SYMB15\000\
  SYMB16\000\
  SYMB17\000\
  SYMB18\000\
  SYMB19\000\
  SYMB20\000\
  SYMB21\000\
  SYMB22\000\
  SYMB23\000\
  SYMB24\000\
  SYMB25\000\
  SYMB26\000\
  SYMB27\000\
  SYMB28\000\
  SYMB29\000\
  SYMB30\000\
  SYMB31\000\
  SYMB32\000\
  SYMB33\000\
  SYMB34\000\
  SYMB35\000\
  SYMB36\000\
  SYMB38\000\
  TOK_EOF\000\
  "

let yynames_block = "\
  TOK_Ident\000\
  TOK_Char\000\
  TOK_Double\000\
  TOK_Integer\000\
  TOK_String\000\
  TOK_IF\000\
  TOK_ELSE\000\
  TOK_WHILE\000\
  TOK_FOR\000\
  TOK_IN\000\
  TOK_LET\000\
  TOK_FUN\000\
  TOK_MUT\000\
  TOK_INTERFACE\000\
  TOK_IMPL\000\
  TOK_AS\000\
  TOK_MATCH\000\
  TOK_TYPE\000\
  TOK_EXTENDS\000\
  TOK_TypeId\000\
  TOK_BaseType\000\
  TOK_VarId\000\
  TOK_LBrack\000\
  TOK_RBrack\000\
  TOK_LParen\000\
  TOK_RParen\000\
  TOK_Unit\000\
  TOK_Mod\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'code_list) in
    Obj.repr(
# 79 "ParDeeplang.mly"
                               ( _1 )
# 852 "ParDeeplang.ml"
               : AbsDeeplang.code list))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "ParDeeplang.mly"
          ( raise (BNFC_Util.Parse_error (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())) )
# 858 "ParDeeplang.ml"
               : AbsDeeplang.code list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'code) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'code_list) in
    Obj.repr(
# 83 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _2) )
# 866 "ParDeeplang.ml"
               : 'code_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'code) in
    Obj.repr(
# 84 "ParDeeplang.mly"
         ( (fun x -> [x]) _1 )
# 873 "ParDeeplang.ml"
               : 'code_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "ParDeeplang.mly"
                ( [] )
# 879 "ParDeeplang.ml"
               : 'code_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declare) in
    Obj.repr(
# 88 "ParDeeplang.mly"
               ( Declares _1 )
# 886 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'define) in
    Obj.repr(
# 89 "ParDeeplang.mly"
           ( Defines _1 )
# 893 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 90 "ParDeeplang.mly"
              ( Statements _1 )
# 900 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 91 "ParDeeplang.mly"
                     ( Expressions _1 )
# 907 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "ParDeeplang.mly"
                ( Unit  )
# 913 "ParDeeplang.ml"
               : 'code))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lBRACK) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeT) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'int) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'rBRACK) in
    Obj.repr(
# 95 "ParDeeplang.mly"
                                      ( {span = (let SYMBOL (x, _) = _1 in let SYMBOL (y, _) = _5 in (fst x, snd y)); shape = TypeFixLenArray (_2, _4)} )
# 923 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 96 "ParDeeplang.mly"
                      ( {span = (fst _1.span, snd _3.span); shape = TypeArrow (_1, _3)} )
# 931 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 97 "ParDeeplang.mly"
         ( {span = (let SYMBOL (x, _) = _1 in x); shape = TypeUnit} )
# 938 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 98 "ParDeeplang.mly"
                  ( {span = (let SYMBOL (x, _) = _1 in let SYMBOL (y, _) = _2 in (fst x, snd y)); shape = TypeUnit} )
# 946 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeT_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 99 "ParDeeplang.mly"
                             ( {span = (let SYMBOL (x, _) = _1 in let SYMBOL (y, _) = _3 in (fst x, snd y)); shape = TypeTuple _2} )
# 955 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'baseType) in
    Obj.repr(
# 100 "ParDeeplang.mly"
             ( {span = (let BaseType (x, _) = _1 in x); shape = TypePrimitive _1} )
# 962 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 101 "ParDeeplang.mly"
           ( {span = (let TypeId (x, _) = _1 in x) ; shape = TypeX _1} )
# 969 "ParDeeplang.ml"
               : 'typeT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 104 "ParDeeplang.mly"
                   ( (fun x -> [x]) _1 )
# 976 "ParDeeplang.ml"
               : 'typeT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT_list) in
    Obj.repr(
# 105 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 984 "ParDeeplang.ml"
               : 'typeT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 108 "ParDeeplang.mly"
                   ( (fun x -> [x]) _1 )
# 991 "ParDeeplang.ml"
               : 'varId_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varId_list) in
    Obj.repr(
# 109 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 999 "ParDeeplang.ml"
               : 'varId_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mUT) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 112 "ParDeeplang.mly"
                   ( MutVar (_1, _2) )
# 1007 "ParDeeplang.ml"
               : 'mVarId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 113 "ParDeeplang.mly"
          ( ImmutVar _1 )
# 1014 "ParDeeplang.ml"
               : 'mVarId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'retType) in
    Obj.repr(
# 116 "ParDeeplang.mly"
                                 ( DecFunc (_1, _2, _3, _4) )
# 1024 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'iNTERFACE) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'methods) in
    Obj.repr(
# 117 "ParDeeplang.mly"
                                    ( InterfaceNoExt (_1, _2, _3) )
# 1033 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'iNTERFACE) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'eXTENDS) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'interfaceName_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'methods) in
    Obj.repr(
# 118 "ParDeeplang.mly"
                                                               ( InterfaceExt (_1, _2, _3, _4, _5) )
# 1044 "ParDeeplang.ml"
               : 'declare))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 121 "ParDeeplang.mly"
                     ( ArgUnit  )
# 1052 "ParDeeplang.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 122 "ParDeeplang.mly"
         ( ArgUnit2 )
# 1059 "ParDeeplang.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arg_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 123 "ParDeeplang.mly"
                           ( ArgExist _2 )
# 1068 "ParDeeplang.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 126 "ParDeeplang.mly"
                        ( ArgCons (_1, _3) )
# 1076 "ParDeeplang.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 129 "ParDeeplang.mly"
               ( (fun x -> [x]) _1 )
# 1083 "ParDeeplang.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arg_list) in
    Obj.repr(
# 130 "ParDeeplang.mly"
                       ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1091 "ParDeeplang.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "ParDeeplang.mly"
                      ( RetUnit  )
# 1097 "ParDeeplang.ml"
               : 'retType))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 134 "ParDeeplang.mly"
                ( RetExist _2 )
# 1104 "ParDeeplang.ml"
               : 'retType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 137 "ParDeeplang.mly"
                       ( InterfaceNames _1 )
# 1111 "ParDeeplang.ml"
               : 'interfaceName))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'interfaceName) in
    Obj.repr(
# 140 "ParDeeplang.mly"
                                   ( (fun x -> [x]) _1 )
# 1118 "ParDeeplang.ml"
               : 'interfaceName_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'interfaceName_list) in
    Obj.repr(
# 141 "ParDeeplang.mly"
                                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1126 "ParDeeplang.ml"
               : 'interfaceName_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "ParDeeplang.mly"
                 ( InterfaceMethodUnit  )
# 1132 "ParDeeplang.ml"
               : 'methods))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'methodT_list) in
    Obj.repr(
# 145 "ParDeeplang.mly"
                               ( InterfaceMethodExist _2 )
# 1139 "ParDeeplang.ml"
               : 'methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'retType) in
    Obj.repr(
# 148 "ParDeeplang.mly"
                                       ( InterfaceMethod (_1, _2, _3, _4) )
# 1149 "ParDeeplang.ml"
               : 'methodT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'retType) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 149 "ParDeeplang.mly"
                                                        ( ADTMethod (_1, _2, _3, _4, _6) )
# 1160 "ParDeeplang.ml"
               : 'methodT))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "ParDeeplang.mly"
                           ( []  )
# 1166 "ParDeeplang.ml"
               : 'methodT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'methodT) in
    Obj.repr(
# 153 "ParDeeplang.mly"
            ( (fun x -> [x]) _1 )
# 1173 "ParDeeplang.ml"
               : 'methodT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'methodT) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'methodT_list) in
    Obj.repr(
# 154 "ParDeeplang.mly"
                         ( (fun (x,xs) -> x::xs) (_1, _2) )
# 1181 "ParDeeplang.ml"
               : 'methodT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functionT) in
    Obj.repr(
# 157 "ParDeeplang.mly"
                   ( DefFunc _1 )
# 1188 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lBRACK) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'constructor_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'rBRACK) in
    Obj.repr(
# 158 "ParDeeplang.mly"
                                               ( ADT (_1, _2, _4) )
# 1199 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'structField_list) in
    Obj.repr(
# 159 "ParDeeplang.mly"
                                               ( Struct (_1, _2, _4) )
# 1208 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lET) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'mutFlag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typedMatcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'rHS) in
    Obj.repr(
# 160 "ParDeeplang.mly"
                                       ( DefVar (_1, _2, _3, _4) )
# 1218 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'tYPE) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 161 "ParDeeplang.mly"
                           ( DefType (_1, _2, _3) )
# 1227 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'iMPL) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'interfaceName) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fOR) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typeT) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'functions) in
    Obj.repr(
# 162 "ParDeeplang.mly"
                                           ( InterfaceImpl (_1, _2, _3, _4, _5) )
# 1238 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'iMPL) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeT) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'functions) in
    Obj.repr(
# 163 "ParDeeplang.mly"
                         ( RawImpl (_1, _2, _3) )
# 1247 "ParDeeplang.ml"
               : 'define))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'retType) in
    Obj.repr(
# 166 "ParDeeplang.mly"
                                          ( FuncUnit (_1, _2, _3, _4) )
# 1257 "ParDeeplang.ml"
               : 'functionT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'fUN) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'args) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'retType) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 167 "ParDeeplang.mly"
                                                        ( Func (_1, _2, _3, _4, _6) )
# 1268 "ParDeeplang.ml"
               : 'functionT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeId) in
    Obj.repr(
# 170 "ParDeeplang.mly"
                     ( UnitCons _1 )
# 1275 "ParDeeplang.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 171 "ParDeeplang.mly"
                                    ( ParamCons (_1, _3) )
# 1285 "ParDeeplang.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor) in
    Obj.repr(
# 174 "ParDeeplang.mly"
                               ( (fun x -> [x]) _1 )
# 1292 "ParDeeplang.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constructor) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_list) in
    Obj.repr(
# 175 "ParDeeplang.mly"
                                       ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1300 "ParDeeplang.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 178 "ParDeeplang.mly"
                          ( FieldCons (_1, _3) )
# 1308 "ParDeeplang.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 181 "ParDeeplang.mly"
                   ( (fun x -> [x]) _1 )
# 1315 "ParDeeplang.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_list) in
    Obj.repr(
# 182 "ParDeeplang.mly"
                           ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1323 "ParDeeplang.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 185 "ParDeeplang.mly"
                    ( BasicStructField _1 )
# 1330 "ParDeeplang.ml"
               : 'structField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'aS) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 186 "ParDeeplang.mly"
             ( DelegateStructField (_1, _2) )
# 1338 "ParDeeplang.ml"
               : 'structField))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'structField) in
    Obj.repr(
# 189 "ParDeeplang.mly"
                               ( (fun x -> [x]) _1 )
# 1345 "ParDeeplang.ml"
               : 'structField_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'structField) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'structField_list) in
    Obj.repr(
# 190 "ParDeeplang.mly"
                                       ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1353 "ParDeeplang.ml"
               : 'structField_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 193 "ParDeeplang.mly"
                        ( DefRHS _2 )
# 1360 "ParDeeplang.ml"
               : 'rHS))
; (fun __caml_parser_env ->
    Obj.repr(
# 194 "ParDeeplang.mly"
                ( NilRHS  )
# 1366 "ParDeeplang.ml"
               : 'rHS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mUT) in
    Obj.repr(
# 197 "ParDeeplang.mly"
              ( Mut _1 )
# 1373 "ParDeeplang.ml"
               : 'mutFlag))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "ParDeeplang.mly"
                ( Immut  )
# 1379 "ParDeeplang.ml"
               : 'mutFlag))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "ParDeeplang.mly"
                   ( FunctionsUnit  )
# 1385 "ParDeeplang.ml"
               : 'functions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'functionT_list) in
    Obj.repr(
# 202 "ParDeeplang.mly"
                                 ( FunctionsMany _2 )
# 1392 "ParDeeplang.ml"
               : 'functions))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "ParDeeplang.mly"
                             ( []  )
# 1398 "ParDeeplang.ml"
               : 'functionT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functionT) in
    Obj.repr(
# 206 "ParDeeplang.mly"
              ( (fun x -> [x]) _1 )
# 1405 "ParDeeplang.ml"
               : 'functionT_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'functionT) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'functionT_list) in
    Obj.repr(
# 207 "ParDeeplang.mly"
                             ( (fun (x,xs) -> x::xs) (_1, _2) )
# 1413 "ParDeeplang.ml"
               : 'functionT_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 210 "ParDeeplang.mly"
                                         ( Block _2 )
# 1420 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lET) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'mutFlag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typedMatcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'rHS) in
    Obj.repr(
# 211 "ParDeeplang.mly"
                                       ( DefVarSt (_1, _2, _3, _4) )
# 1430 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 212 "ParDeeplang.mly"
                     ( ExprSt _1 )
# 1437 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 213 "ParDeeplang.mly"
                               ( Return _2 )
# 1444 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'iF) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'rPAREN) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elseBody) in
    Obj.repr(
# 214 "ParDeeplang.mly"
                                                                      ( If (_1, _3, _6, _8) )
# 1456 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'fOR) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'matcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'iN) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'rPAREN) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 215 "ParDeeplang.mly"
                                                                         ( For (_1, _3, _4, _5, _8) )
# 1469 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'wHILE) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'rPAREN) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 216 "ParDeeplang.mly"
                                                                ( While (_1, _3, _6) )
# 1480 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'mATCH) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'varId) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'rPAREN) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'matchBody) in
    Obj.repr(
# 217 "ParDeeplang.mly"
                                                      ( Match (_1, _3, _6) )
# 1491 "ParDeeplang.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 220 "ParDeeplang.mly"
                           ( (fun x -> [x]) _1 )
# 1498 "ParDeeplang.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 221 "ParDeeplang.mly"
                             ( (fun (x,xs) -> x::xs) (_1, _2) )
# 1506 "ParDeeplang.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "ParDeeplang.mly"
                       ( NoElse  )
# 1512 "ParDeeplang.ml"
               : 'elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'eLSE) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'iF) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'lPAREN) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'rPAREN) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'elseBody) in
    Obj.repr(
# 225 "ParDeeplang.mly"
                                                                           ( Elif (_1, _2, _4, _7, _9) )
# 1525 "ParDeeplang.ml"
               : 'elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'eLSE) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 226 "ParDeeplang.mly"
                                      ( Else (_1, _3) )
# 1533 "ParDeeplang.ml"
               : 'elseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matchCase_list) in
    Obj.repr(
# 229 "ParDeeplang.mly"
                           ( MatchBodys _1 )
# 1540 "ParDeeplang.ml"
               : 'matchBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'matcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 232 "ParDeeplang.mly"
                                                        ( MatchCases (_1, _4) )
# 1548 "ParDeeplang.ml"
               : 'matchCase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedMatcher) in
    Obj.repr(
# 235 "ParDeeplang.mly"
                       ( TypedMatchers _1 )
# 1555 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typelessMatcher) in
    Obj.repr(
# 236 "ParDeeplang.mly"
                    ( TypelessMatchers _1 )
# 1562 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matcher) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'aS) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mVarId) in
    Obj.repr(
# 237 "ParDeeplang.mly"
                      ( AsVarMatch (_1, _2, _3) )
# 1571 "ParDeeplang.ml"
               : 'matcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typelessMatcher) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeT) in
    Obj.repr(
# 240 "ParDeeplang.mly"
                                           ( Typed (_1, _3) )
# 1579 "ParDeeplang.ml"
               : 'typedMatcher))
; (fun __caml_parser_env ->
    Obj.repr(
# 243 "ParDeeplang.mly"
                         ( WildCardMatch  )
# 1585 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 244 "ParDeeplang.mly"
                ( ConsMatchUnit _1 )
# 1593 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'matcher) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 245 "ParDeeplang.mly"
                                 ( ConsMatch (_1, _3) )
# 1603 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mVarId) in
    Obj.repr(
# 246 "ParDeeplang.mly"
           ( TypelessVarMatch _1 )
# 1610 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 247 "ParDeeplang.mly"
         ( UnitMatch )
# 1617 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'matcher_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 248 "ParDeeplang.mly"
                               ( TupleMatch _2 )
# 1626 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 249 "ParDeeplang.mly"
            ( LiteralMatch _1 )
# 1633 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    Obj.repr(
# 250 "ParDeeplang.mly"
                  ( FieldMatchUnit _1 )
# 1640 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fieldMatcher_list) in
    Obj.repr(
# 251 "ParDeeplang.mly"
                                           ( FieldMatch (_1, _3) )
# 1648 "ParDeeplang.ml"
               : 'typelessMatcher))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "ParDeeplang.mly"
                           ( []  )
# 1654 "ParDeeplang.ml"
               : 'matcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matcher) in
    Obj.repr(
# 255 "ParDeeplang.mly"
            ( (fun x -> [x]) _1 )
# 1661 "ParDeeplang.ml"
               : 'matcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'matcher) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'matcher_list) in
    Obj.repr(
# 256 "ParDeeplang.mly"
                               ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1669 "ParDeeplang.ml"
               : 'matcher_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 259 "ParDeeplang.mly"
                                ( []  )
# 1675 "ParDeeplang.ml"
               : 'fieldMatcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fieldMatcher) in
    Obj.repr(
# 260 "ParDeeplang.mly"
                 ( (fun x -> [x]) _1 )
# 1682 "ParDeeplang.ml"
               : 'fieldMatcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fieldMatcher) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fieldMatcher_list) in
    Obj.repr(
# 261 "ParDeeplang.mly"
                                         ( (fun (x,xs) -> x::xs) (_1, _3) )
# 1690 "ParDeeplang.ml"
               : 'fieldMatcher_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typelessMatcher) in
    Obj.repr(
# 264 "ParDeeplang.mly"
                                           ( FieldMatchers (_1, _3) )
# 1698 "ParDeeplang.ml"
               : 'fieldMatcher))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matchCase) in
    Obj.repr(
# 267 "ParDeeplang.mly"
                           ( (fun x -> [x]) _1 )
# 1705 "ParDeeplang.ml"
               : 'matchCase_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'matchCase) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'matchCase_list) in
    Obj.repr(
# 268 "ParDeeplang.mly"
                             ( (fun (x,xs) -> x::xs) (_1, _2) )
# 1713 "ParDeeplang.ml"
               : 'matchCase_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 271 "ParDeeplang.mly"
                         (  _1 )
# 1720 "ParDeeplang.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression2) in
    Obj.repr(
# 274 "ParDeeplang.mly"
                          (  _1 )
# 1727 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 275 "ParDeeplang.mly"
                             ( ExpAssignment (_1, _3) )
# 1735 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 276 "ParDeeplang.mly"
                             ( ExpAssignmentPlus (_1, _3) )
# 1743 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 277 "ParDeeplang.mly"
                             ( ExpAssignmentMinus (_1, _3) )
# 1751 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 278 "ParDeeplang.mly"
                             ( ExpAssignmentMul (_1, _3) )
# 1759 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 279 "ParDeeplang.mly"
                             ( ExpAssignmentDiv (_1, _3) )
# 1767 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression1) in
    Obj.repr(
# 280 "ParDeeplang.mly"
                             ( ExpAssignmentMod (_1, _3) )
# 1775 "ParDeeplang.ml"
               : 'expression1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression3) in
    Obj.repr(
# 283 "ParDeeplang.mly"
                          (  _1 )
# 1782 "ParDeeplang.ml"
               : 'expression2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression3) in
    Obj.repr(
# 284 "ParDeeplang.mly"
                                   ( ExpLogicalOr (_1, _3) )
# 1790 "ParDeeplang.ml"
               : 'expression2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression4) in
    Obj.repr(
# 287 "ParDeeplang.mly"
                          (  _1 )
# 1797 "ParDeeplang.ml"
               : 'expression3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression4) in
    Obj.repr(
# 288 "ParDeeplang.mly"
                                   ( ExpLogicalAnd (_1, _3) )
# 1805 "ParDeeplang.ml"
               : 'expression3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression5) in
    Obj.repr(
# 291 "ParDeeplang.mly"
                          (  _1 )
# 1812 "ParDeeplang.ml"
               : 'expression4))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression4) in
    Obj.repr(
# 292 "ParDeeplang.mly"
                       ( ExpLogicalNot _2 )
# 1819 "ParDeeplang.ml"
               : 'expression4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression6) in
    Obj.repr(
# 295 "ParDeeplang.mly"
                          (  _1 )
# 1826 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 296 "ParDeeplang.mly"
                                   ( ExpLt (_1, _3) )
# 1834 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 297 "ParDeeplang.mly"
                                   ( ExpLeq (_1, _3) )
# 1842 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 298 "ParDeeplang.mly"
                                   ( ExpGt (_1, _3) )
# 1850 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 299 "ParDeeplang.mly"
                                   ( ExpGeq (_1, _3) )
# 1858 "ParDeeplang.ml"
               : 'expression5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 302 "ParDeeplang.mly"
                          (  _1 )
# 1865 "ParDeeplang.ml"
               : 'expression6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 303 "ParDeeplang.mly"
                                   ( ExpEq (_1, _3) )
# 1873 "ParDeeplang.ml"
               : 'expression6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression7) in
    Obj.repr(
# 304 "ParDeeplang.mly"
                                   ( ExpNoteq (_1, _3) )
# 1881 "ParDeeplang.ml"
               : 'expression6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression8) in
    Obj.repr(
# 307 "ParDeeplang.mly"
                          (  _1 )
# 1888 "ParDeeplang.ml"
               : 'expression7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression8) in
    Obj.repr(
# 308 "ParDeeplang.mly"
                                   ( ExpLeftShift (_1, _3) )
# 1896 "ParDeeplang.ml"
               : 'expression7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression8) in
    Obj.repr(
# 309 "ParDeeplang.mly"
                                   ( ExpRightShift (_1, _3) )
# 1904 "ParDeeplang.ml"
               : 'expression7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression9) in
    Obj.repr(
# 312 "ParDeeplang.mly"
                          (  _1 )
# 1911 "ParDeeplang.ml"
               : 'expression8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression8) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression9) in
    Obj.repr(
# 313 "ParDeeplang.mly"
                                   ( ExpAdd (_1, _3) )
# 1919 "ParDeeplang.ml"
               : 'expression8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression8) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression9) in
    Obj.repr(
# 314 "ParDeeplang.mly"
                                   ( ExpSub (_1, _3) )
# 1927 "ParDeeplang.ml"
               : 'expression8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 317 "ParDeeplang.mly"
                           (  _1 )
# 1934 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression9) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 318 "ParDeeplang.mly"
                                    ( ExpMul (_1, _3) )
# 1942 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression9) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 319 "ParDeeplang.mly"
                                    ( ExpDiv (_1, _3) )
# 1950 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression9) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'mOD) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression10) in
    Obj.repr(
# 320 "ParDeeplang.mly"
                                 ( ExpMod (_1, _3) )
# 1959 "ParDeeplang.ml"
               : 'expression9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression11) in
    Obj.repr(
# 323 "ParDeeplang.mly"
                            (  _1 )
# 1966 "ParDeeplang.ml"
               : 'expression10))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression12) in
    Obj.repr(
# 326 "ParDeeplang.mly"
                            ( _1 )
# 1973 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression11) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 327 "ParDeeplang.mly"
                                               ( ExpApp (_1, _3) )
# 1983 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression11) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 328 "ParDeeplang.mly"
                      ( ExpAppUnit _1 )
# 1991 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 329 "ParDeeplang.mly"
                                         ( ExpNewObj (_1, _3) )
# 2001 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeId) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 330 "ParDeeplang.mly"
                ( ExpNewObjUnit _1 )
# 2009 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression11) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varId) in
    Obj.repr(
# 331 "ParDeeplang.mly"
                              ( ExpMethod (_1, _3) )
# 2017 "ParDeeplang.ml"
               : 'expression11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression13) in
    Obj.repr(
# 334 "ParDeeplang.mly"
                            (  _1 )
# 2024 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'matcher) in
    Obj.repr(
# 335 "ParDeeplang.mly"
            ( ExpVar _1 )
# 2031 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 336 "ParDeeplang.mly"
            ( Literals _1 )
# 2038 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 337 "ParDeeplang.mly"
                                  ( Tuples _2 )
# 2047 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lBRACK) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rBRACK) in
    Obj.repr(
# 338 "ParDeeplang.mly"
                                  ( Array _2 )
# 2056 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeId) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fieldInit_list) in
    Obj.repr(
# 339 "ParDeeplang.mly"
                                        ( StructInit (_1, _3) )
# 2064 "ParDeeplang.ml"
               : 'expression12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 342 "ParDeeplang.mly"
                                        (  _2 )
# 2073 "ParDeeplang.ml"
               : 'expression13))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lPAREN) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rPAREN) in
    Obj.repr(
# 343 "ParDeeplang.mly"
                             ( ExpBracket _2 )
# 2082 "ParDeeplang.ml"
               : 'expression13))
; (fun __caml_parser_env ->
    Obj.repr(
# 346 "ParDeeplang.mly"
                              ( [] )
# 2088 "ParDeeplang.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 347 "ParDeeplang.mly"
               ( (fun x -> [x]) _1 )
# 2095 "ParDeeplang.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 348 "ParDeeplang.mly"
                                     ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2103 "ParDeeplang.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'string) in
    Obj.repr(
# 351 "ParDeeplang.mly"
                 ( String _1 )
# 2110 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'char) in
    Obj.repr(
# 352 "ParDeeplang.mly"
         ( Char _1 )
# 2117 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'int) in
    Obj.repr(
# 353 "ParDeeplang.mly"
        ( Integer _1 )
# 2124 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'float) in
    Obj.repr(
# 354 "ParDeeplang.mly"
          ( Float _1 )
# 2131 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 355 "ParDeeplang.mly"
            ( True )
# 2137 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 356 "ParDeeplang.mly"
             ( False )
# 2143 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'uNIT) in
    Obj.repr(
# 357 "ParDeeplang.mly"
         ( LUnit )
# 2150 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 358 "ParDeeplang.mly"
           ( AUnit )
# 2156 "ParDeeplang.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fieldInit) in
    Obj.repr(
# 361 "ParDeeplang.mly"
                           ( (fun x -> [x]) _1 )
# 2163 "ParDeeplang.ml"
               : 'fieldInit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fieldInit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fieldInit_list) in
    Obj.repr(
# 362 "ParDeeplang.mly"
                                   ( (fun (x,xs) -> x::xs) (_1, _3) )
# 2171 "ParDeeplang.ml"
               : 'fieldInit_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varId) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 365 "ParDeeplang.mly"
                                   ( FieldInitCons (_1, _3) )
# 2179 "ParDeeplang.ml"
               : 'fieldInit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 369 "ParDeeplang.mly"
                ( _1 )
# 2186 "ParDeeplang.ml"
               : 'char))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 370 "ParDeeplang.mly"
                    ( _1 )
# 2193 "ParDeeplang.ml"
               : 'float))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 371 "ParDeeplang.mly"
                    ( _1 )
# 2200 "ParDeeplang.ml"
               : 'int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 372 "ParDeeplang.mly"
                    ( _1 )
# 2207 "ParDeeplang.ml"
               : 'string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 373 "ParDeeplang.mly"
            ( IF (_1))
# 2214 "ParDeeplang.ml"
               : 'iF))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 374 "ParDeeplang.mly"
                ( ELSE (_1))
# 2221 "ParDeeplang.ml"
               : 'eLSE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 375 "ParDeeplang.mly"
                  ( WHILE (_1))
# 2228 "ParDeeplang.ml"
               : 'wHILE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 376 "ParDeeplang.mly"
              ( FOR (_1))
# 2235 "ParDeeplang.ml"
               : 'fOR))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 377 "ParDeeplang.mly"
            ( IN (_1))
# 2242 "ParDeeplang.ml"
               : 'iN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 378 "ParDeeplang.mly"
              ( LET (_1))
# 2249 "ParDeeplang.ml"
               : 'lET))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 379 "ParDeeplang.mly"
              ( FUN (_1))
# 2256 "ParDeeplang.ml"
               : 'fUN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 380 "ParDeeplang.mly"
              ( MUT (_1))
# 2263 "ParDeeplang.ml"
               : 'mUT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 381 "ParDeeplang.mly"
                          ( INTERFACE (_1))
# 2270 "ParDeeplang.ml"
               : 'iNTERFACE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 382 "ParDeeplang.mly"
                ( IMPL (_1))
# 2277 "ParDeeplang.ml"
               : 'iMPL))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 383 "ParDeeplang.mly"
            ( AS (_1))
# 2284 "ParDeeplang.ml"
               : 'aS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 384 "ParDeeplang.mly"
                  ( MATCH (_1))
# 2291 "ParDeeplang.ml"
               : 'mATCH))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 385 "ParDeeplang.mly"
                ( TYPE (_1))
# 2298 "ParDeeplang.ml"
               : 'tYPE))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 386 "ParDeeplang.mly"
                      ( EXTENDS (_1))
# 2305 "ParDeeplang.ml"
               : 'eXTENDS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 387 "ParDeeplang.mly"
                    ( TypeId (_1))
# 2312 "ParDeeplang.ml"
               : 'typeId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 388 "ParDeeplang.mly"
                        ( BaseType (_1))
# 2319 "ParDeeplang.ml"
               : 'baseType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 389 "ParDeeplang.mly"
                  ( VarId (_1))
# 2326 "ParDeeplang.ml"
               : 'varId))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 390 "ParDeeplang.mly"
                    ( SYMBOL (_1) )
# 2333 "ParDeeplang.ml"
               : 'lBRACK))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 391 "ParDeeplang.mly"
                    ( SYMBOL (_1) )
# 2340 "ParDeeplang.ml"
               : 'rBRACK))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 392 "ParDeeplang.mly"
                    ( SYMBOL (_1) )
# 2347 "ParDeeplang.ml"
               : 'lPAREN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 393 "ParDeeplang.mly"
                    ( SYMBOL (_1) )
# 2354 "ParDeeplang.ml"
               : 'rPAREN))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 394 "ParDeeplang.mly"
                ( SYMBOL (_1) )
# 2361 "ParDeeplang.ml"
               : 'uNIT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (int * int) * string) in
    Obj.repr(
# 395 "ParDeeplang.mly"
              ( SYMBOL (_1) )
# 2368 "ParDeeplang.ml"
               : 'mOD))
(* Entry pCode_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let pCode_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : AbsDeeplang.code list)
